// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Storyshots Components|Forms Login Form 1`] = `
<WithChannel(MuiDecorator)
  initData={
    Object {
      "themeInd": 0,
      "themes": Array [
        Object {
          "breakpoints": Object {
            "between": [Function],
            "down": [Function],
            "keys": Array [
              "xs",
              "sm",
              "md",
              "lg",
              "xl",
            ],
            "only": [Function],
            "up": [Function],
            "values": Object {
              "lg": 1280,
              "md": 1064,
              "sm": 600,
              "tablet": 834,
              "xl": 1400,
              "xs": 0,
            },
            "width": [Function],
          },
          "direction": "ltr",
          "mixins": Object {
            "gutters": [Function],
            "toolbar": Object {
              "@media (min-width:0px) and (orientation: landscape)": Object {
                "minHeight": 48,
              },
              "@media (min-width:600px)": Object {
                "minHeight": 64,
              },
              "minHeight": 56,
            },
          },
          "overrides": Object {},
          "palette": Object {
            "action": Object {
              "activatedOpacity": 0.12,
              "active": "rgba(0, 0, 0, 0.54)",
              "disabled": "rgba(0, 0, 0, 0.26)",
              "disabledBackground": "rgba(0, 0, 0, 0.12)",
              "disabledOpacity": 0.38,
              "focus": "rgba(0, 0, 0, 0.12)",
              "focusOpacity": 0.12,
              "hover": "rgba(0, 0, 0, 0.04)",
              "hoverOpacity": 0.04,
              "selected": "rgba(0, 0, 0, 0.08)",
              "selectedOpacity": 0.08,
            },
            "augmentColor": [Function],
            "background": Object {
              "default": "#fafafa",
              "paper": "#fff",
            },
            "common": Object {
              "black": "#000",
              "white": "#fff",
            },
            "contrastThreshold": 3,
            "divider": "rgba(0, 0, 0, 0.12)",
            "error": Object {
              "contrastText": "#fff",
              "dark": "rgb(155, 48, 26)",
              "light": "#E6735C",
              "main": "#DE4526",
            },
            "getContrastText": [Function],
            "grey": Object {
              "100": "#D2D5D9",
              "200": "#F9F9F9",
              "300": "#cccfd4",
              "400": "#C0C5C4",
              "50": "#FAFAFA",
              "500": "#848484",
              "600": "#C4C4C4",
              "700": "#616161",
              "800": "#424242",
              "900": "#212121",
              "A100": "#d5d5d5",
              "A200": "#aaaaaa",
              "A400": "#303030",
              "A700": "#616161",
            },
            "info": Object {
              "contrastText": "#b0ddc0",
              "dark": "#545555",
              "light": "#EFEFEF",
              "main": "#8f8f8f",
            },
            "primary": Object {
              "contrastText": "#000",
              "dark": "rgb(178, 178, 178)",
              "light": "#202020",
              "main": "#fff",
            },
            "secondary": Object {
              "contrastText": "#B9E1C7",
              "dark": "#7BC796",
              "light": "#DCF0E3",
              "main": "#4FB573",
            },
            "success": Object {
              "contrastText": "rgba(0, 0, 0, 0.87)",
              "dark": "#388e3c",
              "light": "#81c784",
              "main": "#4caf50",
            },
            "text": Object {
              "disabled": "rgba(0, 0, 0, 0.38)",
              "hint": "rgba(0, 0, 0, 0.38)",
              "primary": "rgba(0, 0, 0, 0.87)",
              "secondary": "rgba(0, 0, 0, 0.54)",
            },
            "tonalOffset": 0.2,
            "type": "light",
            "warning": Object {
              "contrastText": "rgba(0, 0, 0, 0.87)",
              "dark": "#f57c00",
              "light": "#ffb74d",
              "main": "#ff9800",
            },
          },
          "props": Object {
            "MuiTypography": Object {
              "variantMapping": Object {
                "body1": "p",
                "body2": "p",
                "h1": "h1",
                "h2": "h2",
                "h3": "h3",
                "h4": "h4",
                "h5": "h5",
                "h6": "h6",
                "subtitle1": "h2",
                "subtitle2": "h2",
              },
            },
          },
          "shadows": Array [
            "none",
            "0px 4px 10px rgba(0, 0, 0, 0.05)",
            "-4px 0px 10px rgba(0, 0, 0, 0.25)",
            "0px 0px 20px rgba(0, 0, 0, 0.25)",
            "0px 4px 10px rgba(0, 0, 0, 0.1)",
            "0px 0px 4px rgba(0, 0, 0, 0.05)",
            "0px 4px 10px rgba(0, 0, 0, 0.1)",
            "0px -4px 10px rgba(0, 0, 0, 0.1)",
            "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
            "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
            "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
            "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
            "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
            "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
            "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
            "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
            "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
            "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
            "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
            "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
            "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
          ],
          "shape": Object {
            "borderRadius": 4,
          },
          "spacing": [Function],
          "transitions": Object {
            "create": [Function],
            "duration": Object {
              "complex": 375,
              "enteringScreen": 225,
              "leavingScreen": 195,
              "short": 250,
              "shorter": 200,
              "shortest": 150,
              "standard": 300,
            },
            "easing": Object {
              "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
              "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
              "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
              "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
            },
            "getAutoHeightDuration": [Function],
          },
          "typography": Object {
            "body1": Object {
              "@media (max-width:599.95px)": Object {
                "fontSize": "0.875rem",
              },
              "@media (min-width:600px)": Object {
                "fontSize": "1rem",
              },
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "1rem",
              "fontWeight": 400,
              "lineHeight": 1.5,
            },
            "body2": Object {
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 400,
              "lineHeight": 1.43,
            },
            "button": Object {
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 500,
              "lineHeight": 1.75,
              "textTransform": "uppercase",
            },
            "caption": Object {
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "0.75rem",
              "fontWeight": 400,
              "lineHeight": 1.66,
            },
            "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
            "fontSize": 14,
            "fontWeightBold": 700,
            "fontWeightLight": 300,
            "fontWeightMedium": 500,
            "fontWeightRegular": 400,
            "h1": Object {
              "@media (max-width:599.95px)": Object {
                "fontSize": "2rem",
              },
              "@media (min-width:600px)": Object {
                "fontSize": "3rem",
              },
              "fontFamily": "\\"Muli\\",-apple-system,sans-serif",
              "fontSize": "6rem",
              "fontWeight": 300,
              "lineHeight": 1.167,
            },
            "h2": Object {
              "@media (max-width:599.95px)": Object {
                "fontSize": "1.5rem",
              },
              "@media (min-width:600px)": Object {
                "fontSize": "2.375rem",
              },
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "3.75rem",
              "fontWeight": 300,
              "lineHeight": 1.2,
            },
            "h3": Object {
              "@media (max-width:599.95px)": Object {
                "fontSize": "1.5rem",
              },
              "@media (min-width:600px)": Object {
                "fontSize": "2rem",
              },
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "3rem",
              "fontWeight": 400,
              "lineHeight": 1.167,
            },
            "h4": Object {
              "@media (max-width:599.95px)": Object {
                "fontSize": "1.3125rem",
              },
              "@media (min-width:600px)": Object {
                "fontSize": "1.5rem",
              },
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "2.125rem",
              "fontWeight": 400,
              "lineHeight": 1.235,
            },
            "h5": Object {
              "@media (max-width:599.95px)": Object {
                "fontSize": "1.125rem",
              },
              "@media (min-width:600px)": Object {
                "fontSize": "1.3125rem",
              },
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "1.5rem",
              "fontWeight": 400,
              "lineHeight": 1.334,
            },
            "h6": Object {
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "1.125rem",
              "fontWeight": 500,
              "lineHeight": 1.6,
            },
            "htmlFontSize": 16,
            "overline": Object {
              "fontFamily": "PT Mono,\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "0.75rem",
              "fontWeight": 400,
              "lineHeight": 2.66,
              "textTransform": "uppercase",
            },
            "pxToRem": [Function],
            "round": [Function],
            "subtitle1": Object {
              "@media (max-width:599.95px)": Object {
                "fontSize": "2rem",
              },
              "@media (min-width:600px)": Object {
                "fontSize": "2.375rem",
              },
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "1rem",
              "fontWeight": 400,
              "lineHeight": 1.75,
            },
            "subtitle2": Object {
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 500,
              "lineHeight": 1.57,
            },
          },
          "zIndex": Object {
            "appBar": 1100,
            "drawer": 1200,
            "mobileStepper": 1000,
            "modal": 1300,
            "snackbar": 1400,
            "speedDial": 1050,
            "tooltip": 1500,
          },
        },
      ],
    }
  }
  story={
    <LoginForm
      link="/"
      privacyLink="https://www.regen.network/privacy-policy/"
      submit={[Function]}
      termsLink="https://www.regen.network/terms-service/"
    />
  }
>
  <MuiDecorator
    data={
      Object {
        "themeInd": 0,
        "themes": Array [
          Object {
            "breakpoints": Object {
              "between": [Function],
              "down": [Function],
              "keys": Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ],
              "only": [Function],
              "up": [Function],
              "values": Object {
                "lg": 1280,
                "md": 1064,
                "sm": 600,
                "tablet": 834,
                "xl": 1400,
                "xs": 0,
              },
              "width": [Function],
            },
            "direction": "ltr",
            "mixins": Object {
              "gutters": [Function],
              "toolbar": Object {
                "@media (min-width:0px) and (orientation: landscape)": Object {
                  "minHeight": 48,
                },
                "@media (min-width:600px)": Object {
                  "minHeight": 64,
                },
                "minHeight": 56,
              },
            },
            "overrides": Object {},
            "palette": Object {
              "action": Object {
                "activatedOpacity": 0.12,
                "active": "rgba(0, 0, 0, 0.54)",
                "disabled": "rgba(0, 0, 0, 0.26)",
                "disabledBackground": "rgba(0, 0, 0, 0.12)",
                "disabledOpacity": 0.38,
                "focus": "rgba(0, 0, 0, 0.12)",
                "focusOpacity": 0.12,
                "hover": "rgba(0, 0, 0, 0.04)",
                "hoverOpacity": 0.04,
                "selected": "rgba(0, 0, 0, 0.08)",
                "selectedOpacity": 0.08,
              },
              "augmentColor": [Function],
              "background": Object {
                "default": "#fafafa",
                "paper": "#fff",
              },
              "common": Object {
                "black": "#000",
                "white": "#fff",
              },
              "contrastThreshold": 3,
              "divider": "rgba(0, 0, 0, 0.12)",
              "error": Object {
                "contrastText": "#fff",
                "dark": "rgb(155, 48, 26)",
                "light": "#E6735C",
                "main": "#DE4526",
              },
              "getContrastText": [Function],
              "grey": Object {
                "100": "#D2D5D9",
                "200": "#F9F9F9",
                "300": "#cccfd4",
                "400": "#C0C5C4",
                "50": "#FAFAFA",
                "500": "#848484",
                "600": "#C4C4C4",
                "700": "#616161",
                "800": "#424242",
                "900": "#212121",
                "A100": "#d5d5d5",
                "A200": "#aaaaaa",
                "A400": "#303030",
                "A700": "#616161",
              },
              "info": Object {
                "contrastText": "#b0ddc0",
                "dark": "#545555",
                "light": "#EFEFEF",
                "main": "#8f8f8f",
              },
              "primary": Object {
                "contrastText": "#000",
                "dark": "rgb(178, 178, 178)",
                "light": "#202020",
                "main": "#fff",
              },
              "secondary": Object {
                "contrastText": "#B9E1C7",
                "dark": "#7BC796",
                "light": "#DCF0E3",
                "main": "#4FB573",
              },
              "success": Object {
                "contrastText": "rgba(0, 0, 0, 0.87)",
                "dark": "#388e3c",
                "light": "#81c784",
                "main": "#4caf50",
              },
              "text": Object {
                "disabled": "rgba(0, 0, 0, 0.38)",
                "hint": "rgba(0, 0, 0, 0.38)",
                "primary": "rgba(0, 0, 0, 0.87)",
                "secondary": "rgba(0, 0, 0, 0.54)",
              },
              "tonalOffset": 0.2,
              "type": "light",
              "warning": Object {
                "contrastText": "rgba(0, 0, 0, 0.87)",
                "dark": "#f57c00",
                "light": "#ffb74d",
                "main": "#ff9800",
              },
            },
            "props": Object {
              "MuiTypography": Object {
                "variantMapping": Object {
                  "body1": "p",
                  "body2": "p",
                  "h1": "h1",
                  "h2": "h2",
                  "h3": "h3",
                  "h4": "h4",
                  "h5": "h5",
                  "h6": "h6",
                  "subtitle1": "h2",
                  "subtitle2": "h2",
                },
              },
            },
            "shadows": Array [
              "none",
              "0px 4px 10px rgba(0, 0, 0, 0.05)",
              "-4px 0px 10px rgba(0, 0, 0, 0.25)",
              "0px 0px 20px rgba(0, 0, 0, 0.25)",
              "0px 4px 10px rgba(0, 0, 0, 0.1)",
              "0px 0px 4px rgba(0, 0, 0, 0.05)",
              "0px 4px 10px rgba(0, 0, 0, 0.1)",
              "0px -4px 10px rgba(0, 0, 0, 0.1)",
              "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
              "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
              "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
              "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
              "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
              "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
              "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
              "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
              "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
              "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
              "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
              "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
              "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
            ],
            "shape": Object {
              "borderRadius": 4,
            },
            "spacing": [Function],
            "transitions": Object {
              "create": [Function],
              "duration": Object {
                "complex": 375,
                "enteringScreen": 225,
                "leavingScreen": 195,
                "short": 250,
                "shorter": 200,
                "shortest": 150,
                "standard": 300,
              },
              "easing": Object {
                "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
              },
              "getAutoHeightDuration": [Function],
            },
            "typography": Object {
              "body1": Object {
                "@media (max-width:599.95px)": Object {
                  "fontSize": "0.875rem",
                },
                "@media (min-width:600px)": Object {
                  "fontSize": "1rem",
                },
                "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                "fontSize": "1rem",
                "fontWeight": 400,
                "lineHeight": 1.5,
              },
              "body2": Object {
                "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 400,
                "lineHeight": 1.43,
              },
              "button": Object {
                "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 500,
                "lineHeight": 1.75,
                "textTransform": "uppercase",
              },
              "caption": Object {
                "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                "fontSize": "0.75rem",
                "fontWeight": 400,
                "lineHeight": 1.66,
              },
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": 14,
              "fontWeightBold": 700,
              "fontWeightLight": 300,
              "fontWeightMedium": 500,
              "fontWeightRegular": 400,
              "h1": Object {
                "@media (max-width:599.95px)": Object {
                  "fontSize": "2rem",
                },
                "@media (min-width:600px)": Object {
                  "fontSize": "3rem",
                },
                "fontFamily": "\\"Muli\\",-apple-system,sans-serif",
                "fontSize": "6rem",
                "fontWeight": 300,
                "lineHeight": 1.167,
              },
              "h2": Object {
                "@media (max-width:599.95px)": Object {
                  "fontSize": "1.5rem",
                },
                "@media (min-width:600px)": Object {
                  "fontSize": "2.375rem",
                },
                "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                "fontSize": "3.75rem",
                "fontWeight": 300,
                "lineHeight": 1.2,
              },
              "h3": Object {
                "@media (max-width:599.95px)": Object {
                  "fontSize": "1.5rem",
                },
                "@media (min-width:600px)": Object {
                  "fontSize": "2rem",
                },
                "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                "fontSize": "3rem",
                "fontWeight": 400,
                "lineHeight": 1.167,
              },
              "h4": Object {
                "@media (max-width:599.95px)": Object {
                  "fontSize": "1.3125rem",
                },
                "@media (min-width:600px)": Object {
                  "fontSize": "1.5rem",
                },
                "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                "fontSize": "2.125rem",
                "fontWeight": 400,
                "lineHeight": 1.235,
              },
              "h5": Object {
                "@media (max-width:599.95px)": Object {
                  "fontSize": "1.125rem",
                },
                "@media (min-width:600px)": Object {
                  "fontSize": "1.3125rem",
                },
                "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                "fontSize": "1.5rem",
                "fontWeight": 400,
                "lineHeight": 1.334,
              },
              "h6": Object {
                "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                "fontSize": "1.125rem",
                "fontWeight": 500,
                "lineHeight": 1.6,
              },
              "htmlFontSize": 16,
              "overline": Object {
                "fontFamily": "PT Mono,\\"Lato\\",-apple-system,sans-serif",
                "fontSize": "0.75rem",
                "fontWeight": 400,
                "lineHeight": 2.66,
                "textTransform": "uppercase",
              },
              "pxToRem": [Function],
              "round": [Function],
              "subtitle1": Object {
                "@media (max-width:599.95px)": Object {
                  "fontSize": "2rem",
                },
                "@media (min-width:600px)": Object {
                  "fontSize": "2.375rem",
                },
                "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                "fontSize": "1rem",
                "fontWeight": 400,
                "lineHeight": 1.75,
              },
              "subtitle2": Object {
                "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 500,
                "lineHeight": 1.57,
              },
            },
            "zIndex": Object {
              "appBar": 1100,
              "drawer": 1200,
              "mobileStepper": 1000,
              "modal": 1300,
              "snackbar": 1400,
              "speedDial": 1050,
              "tooltip": 1500,
            },
          },
        ],
      }
    }
    sendData={[Function]}
    store={
      ChannelStore {
        "channel": Channel {
          "events": Object {
            "docsRendered": Array [
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
            ],
            "registerSubscription": Array [
              [Function],
            ],
            "sm/storybook-addon-material-ui/material-event/back": Array [
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
            ],
            "sm/storybook-addon-material-ui/material-event/init": Array [
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
            ],
            "storyRendered": Array [
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
            ],
          },
          "isAsync": false,
          "sender": "2795b43315214",
          "transport": Object {
            "send": [Function],
            "setHandler": [Function],
          },
        },
        "connect": [Function],
        "disconnect": [Function],
        "emit": [Function],
        "init": [Function],
        "name": "store",
        "onConnected": [Function],
        "onConnectedFn": [Function],
        "onData": [Function],
        "onDataChannel": [Function],
        "onInitChannel": [Function],
        "removeData": [Function],
        "removeInit": [Function],
        "send": [Function],
        "sendInit": [Function],
        "store": Object {
          "themeInd": 0,
          "themes": Array [
            Object {
              "breakpoints": Object {
                "between": [Function],
                "down": [Function],
                "keys": Array [
                  "xs",
                  "sm",
                  "md",
                  "lg",
                  "xl",
                ],
                "only": [Function],
                "up": [Function],
                "values": Object {
                  "lg": 1280,
                  "md": 1064,
                  "sm": 600,
                  "tablet": 834,
                  "xl": 1400,
                  "xs": 0,
                },
                "width": [Function],
              },
              "direction": "ltr",
              "mixins": Object {
                "gutters": [Function],
                "toolbar": Object {
                  "@media (min-width:0px) and (orientation: landscape)": Object {
                    "minHeight": 48,
                  },
                  "@media (min-width:600px)": Object {
                    "minHeight": 64,
                  },
                  "minHeight": 56,
                },
              },
              "overrides": Object {},
              "palette": Object {
                "action": Object {
                  "activatedOpacity": 0.12,
                  "active": "rgba(0, 0, 0, 0.54)",
                  "disabled": "rgba(0, 0, 0, 0.26)",
                  "disabledBackground": "rgba(0, 0, 0, 0.12)",
                  "disabledOpacity": 0.38,
                  "focus": "rgba(0, 0, 0, 0.12)",
                  "focusOpacity": 0.12,
                  "hover": "rgba(0, 0, 0, 0.04)",
                  "hoverOpacity": 0.04,
                  "selected": "rgba(0, 0, 0, 0.08)",
                  "selectedOpacity": 0.08,
                },
                "augmentColor": [Function],
                "background": Object {
                  "default": "#fafafa",
                  "paper": "#fff",
                },
                "common": Object {
                  "black": "#000",
                  "white": "#fff",
                },
                "contrastThreshold": 3,
                "divider": "rgba(0, 0, 0, 0.12)",
                "error": Object {
                  "contrastText": "#fff",
                  "dark": "rgb(155, 48, 26)",
                  "light": "#E6735C",
                  "main": "#DE4526",
                },
                "getContrastText": [Function],
                "grey": Object {
                  "100": "#D2D5D9",
                  "200": "#F9F9F9",
                  "300": "#cccfd4",
                  "400": "#C0C5C4",
                  "50": "#FAFAFA",
                  "500": "#848484",
                  "600": "#C4C4C4",
                  "700": "#616161",
                  "800": "#424242",
                  "900": "#212121",
                  "A100": "#d5d5d5",
                  "A200": "#aaaaaa",
                  "A400": "#303030",
                  "A700": "#616161",
                },
                "info": Object {
                  "contrastText": "#b0ddc0",
                  "dark": "#545555",
                  "light": "#EFEFEF",
                  "main": "#8f8f8f",
                },
                "primary": Object {
                  "contrastText": "#000",
                  "dark": "rgb(178, 178, 178)",
                  "light": "#202020",
                  "main": "#fff",
                },
                "secondary": Object {
                  "contrastText": "#B9E1C7",
                  "dark": "#7BC796",
                  "light": "#DCF0E3",
                  "main": "#4FB573",
                },
                "success": Object {
                  "contrastText": "rgba(0, 0, 0, 0.87)",
                  "dark": "#388e3c",
                  "light": "#81c784",
                  "main": "#4caf50",
                },
                "text": Object {
                  "disabled": "rgba(0, 0, 0, 0.38)",
                  "hint": "rgba(0, 0, 0, 0.38)",
                  "primary": "rgba(0, 0, 0, 0.87)",
                  "secondary": "rgba(0, 0, 0, 0.54)",
                },
                "tonalOffset": 0.2,
                "type": "light",
                "warning": Object {
                  "contrastText": "rgba(0, 0, 0, 0.87)",
                  "dark": "#f57c00",
                  "light": "#ffb74d",
                  "main": "#ff9800",
                },
              },
              "props": Object {
                "MuiTypography": Object {
                  "variantMapping": Object {
                    "body1": "p",
                    "body2": "p",
                    "h1": "h1",
                    "h2": "h2",
                    "h3": "h3",
                    "h4": "h4",
                    "h5": "h5",
                    "h6": "h6",
                    "subtitle1": "h2",
                    "subtitle2": "h2",
                  },
                },
              },
              "shadows": Array [
                "none",
                "0px 4px 10px rgba(0, 0, 0, 0.05)",
                "-4px 0px 10px rgba(0, 0, 0, 0.25)",
                "0px 0px 20px rgba(0, 0, 0, 0.25)",
                "0px 4px 10px rgba(0, 0, 0, 0.1)",
                "0px 0px 4px rgba(0, 0, 0, 0.05)",
                "0px 4px 10px rgba(0, 0, 0, 0.1)",
                "0px -4px 10px rgba(0, 0, 0, 0.1)",
                "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
              ],
              "shape": Object {
                "borderRadius": 4,
              },
              "spacing": [Function],
              "transitions": Object {
                "create": [Function],
                "duration": Object {
                  "complex": 375,
                  "enteringScreen": 225,
                  "leavingScreen": 195,
                  "short": 250,
                  "shorter": 200,
                  "shortest": 150,
                  "standard": 300,
                },
                "easing": Object {
                  "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                  "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                  "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                  "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                },
                "getAutoHeightDuration": [Function],
              },
              "typography": Object {
                "body1": Object {
                  "@media (max-width:599.95px)": Object {
                    "fontSize": "0.875rem",
                  },
                  "@media (min-width:600px)": Object {
                    "fontSize": "1rem",
                  },
                  "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                  "fontSize": "1rem",
                  "fontWeight": 400,
                  "lineHeight": 1.5,
                },
                "body2": Object {
                  "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                  "fontSize": "0.875rem",
                  "fontWeight": 400,
                  "lineHeight": 1.43,
                },
                "button": Object {
                  "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                  "fontSize": "0.875rem",
                  "fontWeight": 500,
                  "lineHeight": 1.75,
                  "textTransform": "uppercase",
                },
                "caption": Object {
                  "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                  "fontSize": "0.75rem",
                  "fontWeight": 400,
                  "lineHeight": 1.66,
                },
                "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                "fontSize": 14,
                "fontWeightBold": 700,
                "fontWeightLight": 300,
                "fontWeightMedium": 500,
                "fontWeightRegular": 400,
                "h1": Object {
                  "@media (max-width:599.95px)": Object {
                    "fontSize": "2rem",
                  },
                  "@media (min-width:600px)": Object {
                    "fontSize": "3rem",
                  },
                  "fontFamily": "\\"Muli\\",-apple-system,sans-serif",
                  "fontSize": "6rem",
                  "fontWeight": 300,
                  "lineHeight": 1.167,
                },
                "h2": Object {
                  "@media (max-width:599.95px)": Object {
                    "fontSize": "1.5rem",
                  },
                  "@media (min-width:600px)": Object {
                    "fontSize": "2.375rem",
                  },
                  "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                  "fontSize": "3.75rem",
                  "fontWeight": 300,
                  "lineHeight": 1.2,
                },
                "h3": Object {
                  "@media (max-width:599.95px)": Object {
                    "fontSize": "1.5rem",
                  },
                  "@media (min-width:600px)": Object {
                    "fontSize": "2rem",
                  },
                  "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                  "fontSize": "3rem",
                  "fontWeight": 400,
                  "lineHeight": 1.167,
                },
                "h4": Object {
                  "@media (max-width:599.95px)": Object {
                    "fontSize": "1.3125rem",
                  },
                  "@media (min-width:600px)": Object {
                    "fontSize": "1.5rem",
                  },
                  "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                  "fontSize": "2.125rem",
                  "fontWeight": 400,
                  "lineHeight": 1.235,
                },
                "h5": Object {
                  "@media (max-width:599.95px)": Object {
                    "fontSize": "1.125rem",
                  },
                  "@media (min-width:600px)": Object {
                    "fontSize": "1.3125rem",
                  },
                  "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                  "fontSize": "1.5rem",
                  "fontWeight": 400,
                  "lineHeight": 1.334,
                },
                "h6": Object {
                  "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                  "fontSize": "1.125rem",
                  "fontWeight": 500,
                  "lineHeight": 1.6,
                },
                "htmlFontSize": 16,
                "overline": Object {
                  "fontFamily": "PT Mono,\\"Lato\\",-apple-system,sans-serif",
                  "fontSize": "0.75rem",
                  "fontWeight": 400,
                  "lineHeight": 2.66,
                  "textTransform": "uppercase",
                },
                "pxToRem": [Function],
                "round": [Function],
                "subtitle1": Object {
                  "@media (max-width:599.95px)": Object {
                    "fontSize": "2rem",
                  },
                  "@media (min-width:600px)": Object {
                    "fontSize": "2.375rem",
                  },
                  "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                  "fontSize": "1rem",
                  "fontWeight": 400,
                  "lineHeight": 1.75,
                },
                "subtitle2": Object {
                  "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                  "fontSize": "0.875rem",
                  "fontWeight": 500,
                  "lineHeight": 1.57,
                },
              },
              "zIndex": Object {
                "appBar": 1100,
                "drawer": 1200,
                "mobileStepper": 1000,
                "modal": 1300,
                "snackbar": 1400,
                "speedDial": 1050,
                "tooltip": 1500,
              },
            },
          ],
        },
        "subscriber": [Function],
      }
    }
    story={
      <LoginForm
        link="/"
        privacyLink="https://www.regen.network/privacy-policy/"
        submit={[Function]}
        termsLink="https://www.regen.network/terms-service/"
      />
    }
  >
    <ThemeProvider
      theme={
        Object {
          "breakpoints": Object {
            "between": [Function],
            "down": [Function],
            "keys": Array [
              "xs",
              "sm",
              "md",
              "lg",
              "xl",
            ],
            "only": [Function],
            "up": [Function],
            "values": Object {
              "lg": 1280,
              "md": 1064,
              "sm": 600,
              "tablet": 834,
              "xl": 1400,
              "xs": 0,
            },
            "width": [Function],
          },
          "direction": "ltr",
          "mixins": Object {
            "gutters": [Function],
            "toolbar": Object {
              "@media (min-width:0px) and (orientation: landscape)": Object {
                "minHeight": 48,
              },
              "@media (min-width:600px)": Object {
                "minHeight": 64,
              },
              "minHeight": 56,
            },
          },
          "overrides": Object {},
          "palette": Object {
            "action": Object {
              "activatedOpacity": 0.12,
              "active": "rgba(0, 0, 0, 0.54)",
              "disabled": "rgba(0, 0, 0, 0.26)",
              "disabledBackground": "rgba(0, 0, 0, 0.12)",
              "disabledOpacity": 0.38,
              "focus": "rgba(0, 0, 0, 0.12)",
              "focusOpacity": 0.12,
              "hover": "rgba(0, 0, 0, 0.04)",
              "hoverOpacity": 0.04,
              "selected": "rgba(0, 0, 0, 0.08)",
              "selectedOpacity": 0.08,
            },
            "augmentColor": [Function],
            "background": Object {
              "default": "#fafafa",
              "paper": "#fff",
            },
            "common": Object {
              "black": "#000",
              "white": "#fff",
            },
            "contrastThreshold": 3,
            "divider": "rgba(0, 0, 0, 0.12)",
            "error": Object {
              "contrastText": "#fff",
              "dark": "rgb(155, 48, 26)",
              "light": "#E6735C",
              "main": "#DE4526",
            },
            "getContrastText": [Function],
            "grey": Object {
              "100": "#D2D5D9",
              "200": "#F9F9F9",
              "300": "#cccfd4",
              "400": "#C0C5C4",
              "50": "#FAFAFA",
              "500": "#848484",
              "600": "#C4C4C4",
              "700": "#616161",
              "800": "#424242",
              "900": "#212121",
              "A100": "#d5d5d5",
              "A200": "#aaaaaa",
              "A400": "#303030",
              "A700": "#616161",
            },
            "info": Object {
              "contrastText": "#b0ddc0",
              "dark": "#545555",
              "light": "#EFEFEF",
              "main": "#8f8f8f",
            },
            "primary": Object {
              "contrastText": "#000",
              "dark": "rgb(178, 178, 178)",
              "light": "#202020",
              "main": "#fff",
            },
            "secondary": Object {
              "contrastText": "#B9E1C7",
              "dark": "#7BC796",
              "light": "#DCF0E3",
              "main": "#4FB573",
            },
            "success": Object {
              "contrastText": "rgba(0, 0, 0, 0.87)",
              "dark": "#388e3c",
              "light": "#81c784",
              "main": "#4caf50",
            },
            "text": Object {
              "disabled": "rgba(0, 0, 0, 0.38)",
              "hint": "rgba(0, 0, 0, 0.38)",
              "primary": "rgba(0, 0, 0, 0.87)",
              "secondary": "rgba(0, 0, 0, 0.54)",
            },
            "tonalOffset": 0.2,
            "type": "light",
            "warning": Object {
              "contrastText": "rgba(0, 0, 0, 0.87)",
              "dark": "#f57c00",
              "light": "#ffb74d",
              "main": "#ff9800",
            },
          },
          "props": Object {
            "MuiTypography": Object {
              "variantMapping": Object {
                "body1": "p",
                "body2": "p",
                "h1": "h1",
                "h2": "h2",
                "h3": "h3",
                "h4": "h4",
                "h5": "h5",
                "h6": "h6",
                "subtitle1": "h2",
                "subtitle2": "h2",
              },
            },
          },
          "shadows": Array [
            "none",
            "0px 4px 10px rgba(0, 0, 0, 0.05)",
            "-4px 0px 10px rgba(0, 0, 0, 0.25)",
            "0px 0px 20px rgba(0, 0, 0, 0.25)",
            "0px 4px 10px rgba(0, 0, 0, 0.1)",
            "0px 0px 4px rgba(0, 0, 0, 0.05)",
            "0px 4px 10px rgba(0, 0, 0, 0.1)",
            "0px -4px 10px rgba(0, 0, 0, 0.1)",
            "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
            "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
            "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
            "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
            "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
            "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
            "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
            "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
            "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
            "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
            "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
            "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
            "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
          ],
          "shape": Object {
            "borderRadius": 4,
          },
          "spacing": [Function],
          "transitions": Object {
            "create": [Function],
            "duration": Object {
              "complex": 375,
              "enteringScreen": 225,
              "leavingScreen": 195,
              "short": 250,
              "shorter": 200,
              "shortest": 150,
              "standard": 300,
            },
            "easing": Object {
              "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
              "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
              "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
              "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
            },
            "getAutoHeightDuration": [Function],
          },
          "typography": Object {
            "body1": Object {
              "@media (max-width:599.95px)": Object {
                "fontSize": "0.875rem",
              },
              "@media (min-width:600px)": Object {
                "fontSize": "1rem",
              },
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "1rem",
              "fontWeight": 400,
              "lineHeight": 1.5,
            },
            "body2": Object {
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 400,
              "lineHeight": 1.43,
            },
            "button": Object {
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 500,
              "lineHeight": 1.75,
              "textTransform": "uppercase",
            },
            "caption": Object {
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "0.75rem",
              "fontWeight": 400,
              "lineHeight": 1.66,
            },
            "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
            "fontSize": 14,
            "fontWeightBold": 700,
            "fontWeightLight": 300,
            "fontWeightMedium": 500,
            "fontWeightRegular": 400,
            "h1": Object {
              "@media (max-width:599.95px)": Object {
                "fontSize": "2rem",
              },
              "@media (min-width:600px)": Object {
                "fontSize": "3rem",
              },
              "fontFamily": "\\"Muli\\",-apple-system,sans-serif",
              "fontSize": "6rem",
              "fontWeight": 300,
              "lineHeight": 1.167,
            },
            "h2": Object {
              "@media (max-width:599.95px)": Object {
                "fontSize": "1.5rem",
              },
              "@media (min-width:600px)": Object {
                "fontSize": "2.375rem",
              },
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "3.75rem",
              "fontWeight": 300,
              "lineHeight": 1.2,
            },
            "h3": Object {
              "@media (max-width:599.95px)": Object {
                "fontSize": "1.5rem",
              },
              "@media (min-width:600px)": Object {
                "fontSize": "2rem",
              },
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "3rem",
              "fontWeight": 400,
              "lineHeight": 1.167,
            },
            "h4": Object {
              "@media (max-width:599.95px)": Object {
                "fontSize": "1.3125rem",
              },
              "@media (min-width:600px)": Object {
                "fontSize": "1.5rem",
              },
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "2.125rem",
              "fontWeight": 400,
              "lineHeight": 1.235,
            },
            "h5": Object {
              "@media (max-width:599.95px)": Object {
                "fontSize": "1.125rem",
              },
              "@media (min-width:600px)": Object {
                "fontSize": "1.3125rem",
              },
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "1.5rem",
              "fontWeight": 400,
              "lineHeight": 1.334,
            },
            "h6": Object {
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "1.125rem",
              "fontWeight": 500,
              "lineHeight": 1.6,
            },
            "htmlFontSize": 16,
            "overline": Object {
              "fontFamily": "PT Mono,\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "0.75rem",
              "fontWeight": 400,
              "lineHeight": 2.66,
              "textTransform": "uppercase",
            },
            "pxToRem": [Function],
            "round": [Function],
            "subtitle1": Object {
              "@media (max-width:599.95px)": Object {
                "fontSize": "2rem",
              },
              "@media (min-width:600px)": Object {
                "fontSize": "2.375rem",
              },
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "1rem",
              "fontWeight": 400,
              "lineHeight": 1.75,
            },
            "subtitle2": Object {
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 500,
              "lineHeight": 1.57,
            },
          },
          "zIndex": Object {
            "appBar": 1100,
            "drawer": 1200,
            "mobileStepper": 1000,
            "modal": 1300,
            "snackbar": 1400,
            "speedDial": 1050,
            "tooltip": 1500,
          },
          Symbol(mui.nested): false,
        }
      }
    >
      <div>
        <LoginForm
          link="/"
          privacyLink="https://www.regen.network/privacy-policy/"
          submit={[Function]}
          termsLink="https://www.regen.network/terms-service/"
        >
          <Formik
            initialValues={
              Object {
                "email": "",
                "password": "",
                "privacy": false,
                "recaptcha": undefined,
                "staySigned": false,
                "updates": false,
              }
            }
            onSubmit={[Function]}
            validate={[Function]}
          >
            <div>
              <Form>
                <form
                  action="#"
                  onReset={[Function]}
                  onSubmit={[Function]}
                >
                  <OnBoardingCard>
                    <RegenCard
                      className="makeStyles-root-693"
                    >
                      <WithStyles(ForwardRef(Card))
                        className="makeStyles-root-694 makeStyles-root-695 makeStyles-root-693"
                        elevation={0}
                      >
                        <ForwardRef(Card)
                          className="makeStyles-root-694 makeStyles-root-695 makeStyles-root-693"
                          classes={
                            Object {
                              "root": "MuiCard-root",
                            }
                          }
                          elevation={0}
                        >
                          <WithStyles(ForwardRef(Paper))
                            className="MuiCard-root makeStyles-root-694 makeStyles-root-695 makeStyles-root-693"
                            elevation={0}
                          >
                            <ForwardRef(Paper)
                              className="MuiCard-root makeStyles-root-694 makeStyles-root-695 makeStyles-root-693"
                              classes={
                                Object {
                                  "elevation0": "MuiPaper-elevation0",
                                  "elevation1": "MuiPaper-elevation1",
                                  "elevation10": "MuiPaper-elevation10",
                                  "elevation11": "MuiPaper-elevation11",
                                  "elevation12": "MuiPaper-elevation12",
                                  "elevation13": "MuiPaper-elevation13",
                                  "elevation14": "MuiPaper-elevation14",
                                  "elevation15": "MuiPaper-elevation15",
                                  "elevation16": "MuiPaper-elevation16",
                                  "elevation17": "MuiPaper-elevation17",
                                  "elevation18": "MuiPaper-elevation18",
                                  "elevation19": "MuiPaper-elevation19",
                                  "elevation2": "MuiPaper-elevation2",
                                  "elevation20": "MuiPaper-elevation20",
                                  "elevation21": "MuiPaper-elevation21",
                                  "elevation22": "MuiPaper-elevation22",
                                  "elevation23": "MuiPaper-elevation23",
                                  "elevation24": "MuiPaper-elevation24",
                                  "elevation3": "MuiPaper-elevation3",
                                  "elevation4": "MuiPaper-elevation4",
                                  "elevation5": "MuiPaper-elevation5",
                                  "elevation6": "MuiPaper-elevation6",
                                  "elevation7": "MuiPaper-elevation7",
                                  "elevation8": "MuiPaper-elevation8",
                                  "elevation9": "MuiPaper-elevation9",
                                  "outlined": "MuiPaper-outlined",
                                  "root": "MuiPaper-root",
                                  "rounded": "MuiPaper-rounded",
                                }
                              }
                              elevation={0}
                            >
                              <div
                                className="MuiPaper-root MuiCard-root makeStyles-root-694 makeStyles-root-695 makeStyles-root-693 MuiPaper-elevation0 MuiPaper-rounded"
                              >
                                <Description
                                  className="makeStyles-description-687"
                                >
                                  <WithStyles(ForwardRef(Typography))
                                    className="makeStyles-root-696 makeStyles-root-697 makeStyles-description-687"
                                    component="div"
                                  >
                                    <ForwardRef(Typography)
                                      className="makeStyles-root-696 makeStyles-root-697 makeStyles-description-687"
                                      classes={
                                        Object {
                                          "alignCenter": "MuiTypography-alignCenter",
                                          "alignJustify": "MuiTypography-alignJustify",
                                          "alignLeft": "MuiTypography-alignLeft",
                                          "alignRight": "MuiTypography-alignRight",
                                          "body1": "MuiTypography-body1",
                                          "body2": "MuiTypography-body2",
                                          "button": "MuiTypography-button",
                                          "caption": "MuiTypography-caption",
                                          "colorError": "MuiTypography-colorError",
                                          "colorInherit": "MuiTypography-colorInherit",
                                          "colorPrimary": "MuiTypography-colorPrimary",
                                          "colorSecondary": "MuiTypography-colorSecondary",
                                          "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                          "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                          "displayBlock": "MuiTypography-displayBlock",
                                          "displayInline": "MuiTypography-displayInline",
                                          "gutterBottom": "MuiTypography-gutterBottom",
                                          "h1": "MuiTypography-h1",
                                          "h2": "MuiTypography-h2",
                                          "h3": "MuiTypography-h3",
                                          "h4": "MuiTypography-h4",
                                          "h5": "MuiTypography-h5",
                                          "h6": "MuiTypography-h6",
                                          "noWrap": "MuiTypography-noWrap",
                                          "overline": "MuiTypography-overline",
                                          "paragraph": "MuiTypography-paragraph",
                                          "root": "MuiTypography-root",
                                          "srOnly": "MuiTypography-srOnly",
                                          "subtitle1": "MuiTypography-subtitle1",
                                          "subtitle2": "MuiTypography-subtitle2",
                                        }
                                      }
                                      component="div"
                                      variantMapping={
                                        Object {
                                          "body1": "p",
                                          "body2": "p",
                                          "h1": "h1",
                                          "h2": "h2",
                                          "h3": "h3",
                                          "h4": "h4",
                                          "h5": "h5",
                                          "h6": "h6",
                                          "subtitle1": "h2",
                                          "subtitle2": "h2",
                                        }
                                      }
                                    >
                                      <div
                                        className="MuiTypography-root makeStyles-root-696 makeStyles-root-697 makeStyles-description-687 MuiTypography-body1"
                                      >
                                        Don't have an account? 
                                        <WithStyles(ForwardRef(Link))
                                          href="/"
                                        >
                                          <ForwardRef(Link)
                                            classes={
                                              Object {
                                                "button": "MuiLink-button",
                                                "focusVisible": "Mui-focusVisible",
                                                "root": "MuiLink-root",
                                                "underlineAlways": "MuiLink-underlineAlways",
                                                "underlineHover": "MuiLink-underlineHover",
                                                "underlineNone": "MuiLink-underlineNone",
                                              }
                                            }
                                            href="/"
                                          >
                                            <WithStyles(ForwardRef(Typography))
                                              className="MuiLink-root MuiLink-underlineHover"
                                              color="primary"
                                              component="a"
                                              href="/"
                                              onBlur={[Function]}
                                              onFocus={[Function]}
                                              variant="inherit"
                                            >
                                              <ForwardRef(Typography)
                                                className="MuiLink-root MuiLink-underlineHover"
                                                classes={
                                                  Object {
                                                    "alignCenter": "MuiTypography-alignCenter",
                                                    "alignJustify": "MuiTypography-alignJustify",
                                                    "alignLeft": "MuiTypography-alignLeft",
                                                    "alignRight": "MuiTypography-alignRight",
                                                    "body1": "MuiTypography-body1",
                                                    "body2": "MuiTypography-body2",
                                                    "button": "MuiTypography-button",
                                                    "caption": "MuiTypography-caption",
                                                    "colorError": "MuiTypography-colorError",
                                                    "colorInherit": "MuiTypography-colorInherit",
                                                    "colorPrimary": "MuiTypography-colorPrimary",
                                                    "colorSecondary": "MuiTypography-colorSecondary",
                                                    "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                                    "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                                    "displayBlock": "MuiTypography-displayBlock",
                                                    "displayInline": "MuiTypography-displayInline",
                                                    "gutterBottom": "MuiTypography-gutterBottom",
                                                    "h1": "MuiTypography-h1",
                                                    "h2": "MuiTypography-h2",
                                                    "h3": "MuiTypography-h3",
                                                    "h4": "MuiTypography-h4",
                                                    "h5": "MuiTypography-h5",
                                                    "h6": "MuiTypography-h6",
                                                    "noWrap": "MuiTypography-noWrap",
                                                    "overline": "MuiTypography-overline",
                                                    "paragraph": "MuiTypography-paragraph",
                                                    "root": "MuiTypography-root",
                                                    "srOnly": "MuiTypography-srOnly",
                                                    "subtitle1": "MuiTypography-subtitle1",
                                                    "subtitle2": "MuiTypography-subtitle2",
                                                  }
                                                }
                                                color="primary"
                                                component="a"
                                                href="/"
                                                onBlur={[Function]}
                                                onFocus={[Function]}
                                                variant="inherit"
                                                variantMapping={
                                                  Object {
                                                    "body1": "p",
                                                    "body2": "p",
                                                    "h1": "h1",
                                                    "h2": "h2",
                                                    "h3": "h3",
                                                    "h4": "h4",
                                                    "h5": "h5",
                                                    "h6": "h6",
                                                    "subtitle1": "h2",
                                                    "subtitle2": "h2",
                                                  }
                                                }
                                              >
                                                <a
                                                  className="MuiTypography-root MuiLink-root MuiLink-underlineHover MuiTypography-colorPrimary"
                                                  href="/"
                                                  onBlur={[Function]}
                                                  onFocus={[Function]}
                                                >
                                                  Sign up
                                                </a>
                                              </ForwardRef(Typography)>
                                            </WithStyles(ForwardRef(Typography))>
                                          </ForwardRef(Link)>
                                        </WithStyles(ForwardRef(Link))>
                                        .
                                      </div>
                                    </ForwardRef(Typography)>
                                  </WithStyles(ForwardRef(Typography))>
                                </Description>
                                <Field
                                  component={[Function]}
                                  label="Email address"
                                  name="email"
                                  type="email"
                                >
                                  <RegenTextField
                                    field={
                                      Object {
                                        "name": "email",
                                        "onBlur": [Function],
                                        "onChange": [Function],
                                        "value": "",
                                      }
                                    }
                                    form={
                                      Object {
                                        "dirty": false,
                                        "errors": Object {},
                                        "getFieldHelpers": [Function],
                                        "getFieldMeta": [Function],
                                        "getFieldProps": [Function],
                                        "handleBlur": [Function],
                                        "handleChange": [Function],
                                        "handleReset": [Function],
                                        "handleSubmit": [Function],
                                        "initialErrors": Object {},
                                        "initialStatus": undefined,
                                        "initialTouched": Object {},
                                        "initialValues": Object {
                                          "email": "",
                                          "password": "",
                                          "privacy": false,
                                          "recaptcha": undefined,
                                          "staySigned": false,
                                          "updates": false,
                                        },
                                        "isSubmitting": false,
                                        "isValid": true,
                                        "isValidating": false,
                                        "registerField": [Function],
                                        "resetForm": [Function],
                                        "setErrors": [Function],
                                        "setFieldError": [Function],
                                        "setFieldTouched": [Function],
                                        "setFieldValue": [Function],
                                        "setFormikState": [Function],
                                        "setStatus": [Function],
                                        "setSubmitting": [Function],
                                        "setTouched": [Function],
                                        "setValues": [Function],
                                        "status": undefined,
                                        "submitCount": 0,
                                        "submitForm": [Function],
                                        "touched": Object {},
                                        "unregisterField": [Function],
                                        "validateField": [Function],
                                        "validateForm": [Function],
                                        "validateOnBlur": true,
                                        "validateOnChange": true,
                                        "validateOnMount": false,
                                        "values": Object {
                                          "email": "",
                                          "password": "",
                                          "privacy": false,
                                          "recaptcha": undefined,
                                          "staySigned": false,
                                          "updates": false,
                                        },
                                      }
                                    }
                                    label="Email address"
                                    type="email"
                                  >
                                    <TriggerTextField
                                      InputLabelProps={
                                        Object {
                                          "focused": false,
                                          "required": false,
                                        }
                                      }
                                      InputProps={
                                        Object {
                                          "disableUnderline": true,
                                          "endAdornment": null,
                                          "startAdornment": null,
                                        }
                                      }
                                      className="makeStyles-root-698 makeStyles-root-699"
                                      field={
                                        Object {
                                          "name": "email",
                                          "onBlur": [Function],
                                          "onChange": [Function],
                                          "value": "",
                                        }
                                      }
                                      form={
                                        Object {
                                          "dirty": false,
                                          "errors": Object {},
                                          "getFieldHelpers": [Function],
                                          "getFieldMeta": [Function],
                                          "getFieldProps": [Function],
                                          "handleBlur": [Function],
                                          "handleChange": [Function],
                                          "handleReset": [Function],
                                          "handleSubmit": [Function],
                                          "initialErrors": Object {},
                                          "initialStatus": undefined,
                                          "initialTouched": Object {},
                                          "initialValues": Object {
                                            "email": "",
                                            "password": "",
                                            "privacy": false,
                                            "recaptcha": undefined,
                                            "staySigned": false,
                                            "updates": false,
                                          },
                                          "isSubmitting": false,
                                          "isValid": true,
                                          "isValidating": false,
                                          "registerField": [Function],
                                          "resetForm": [Function],
                                          "setErrors": [Function],
                                          "setFieldError": [Function],
                                          "setFieldTouched": [Function],
                                          "setFieldValue": [Function],
                                          "setFormikState": [Function],
                                          "setStatus": [Function],
                                          "setSubmitting": [Function],
                                          "setTouched": [Function],
                                          "setValues": [Function],
                                          "status": undefined,
                                          "submitCount": 0,
                                          "submitForm": [Function],
                                          "touched": Object {},
                                          "unregisterField": [Function],
                                          "validateField": [Function],
                                          "validateForm": [Function],
                                          "validateOnBlur": true,
                                          "validateOnChange": true,
                                          "validateOnMount": false,
                                          "values": Object {
                                            "email": "",
                                            "password": "",
                                            "privacy": false,
                                            "recaptcha": undefined,
                                            "staySigned": false,
                                            "updates": false,
                                          },
                                        }
                                      }
                                      fullWidth={true}
                                      label="Email address"
                                      type="email"
                                    >
                                      <WithStyles(ForwardRef(TextField))
                                        InputLabelProps={
                                          Object {
                                            "focused": false,
                                            "required": false,
                                          }
                                        }
                                        InputProps={
                                          Object {
                                            "disableUnderline": true,
                                            "endAdornment": null,
                                            "startAdornment": null,
                                          }
                                        }
                                        className="makeStyles-root-698 makeStyles-root-699"
                                        disabled={false}
                                        fullWidth={true}
                                        label="Email address"
                                        name="email"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        type="email"
                                        value=""
                                      >
                                        <ForwardRef(TextField)
                                          InputLabelProps={
                                            Object {
                                              "focused": false,
                                              "required": false,
                                            }
                                          }
                                          InputProps={
                                            Object {
                                              "disableUnderline": true,
                                              "endAdornment": null,
                                              "startAdornment": null,
                                            }
                                          }
                                          className="makeStyles-root-698 makeStyles-root-699"
                                          classes={
                                            Object {
                                              "root": "MuiTextField-root",
                                            }
                                          }
                                          disabled={false}
                                          fullWidth={true}
                                          label="Email address"
                                          name="email"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          type="email"
                                          value=""
                                        >
                                          <WithStyles(ForwardRef(FormControl))
                                            className="MuiTextField-root makeStyles-root-698 makeStyles-root-699"
                                            color="primary"
                                            disabled={false}
                                            error={false}
                                            fullWidth={true}
                                            required={false}
                                            variant="standard"
                                          >
                                            <ForwardRef(FormControl)
                                              className="MuiTextField-root makeStyles-root-698 makeStyles-root-699"
                                              classes={
                                                Object {
                                                  "fullWidth": "MuiFormControl-fullWidth",
                                                  "marginDense": "MuiFormControl-marginDense",
                                                  "marginNormal": "MuiFormControl-marginNormal",
                                                  "root": "MuiFormControl-root",
                                                }
                                              }
                                              color="primary"
                                              disabled={false}
                                              error={false}
                                              fullWidth={true}
                                              required={false}
                                              variant="standard"
                                            >
                                              <div
                                                className="MuiFormControl-root MuiTextField-root makeStyles-root-698 makeStyles-root-699 MuiFormControl-fullWidth"
                                              >
                                                <WithStyles(ForwardRef(InputLabel))
                                                  focused={false}
                                                  required={false}
                                                >
                                                  <ForwardRef(InputLabel)
                                                    classes={
                                                      Object {
                                                        "animated": "MuiInputLabel-animated",
                                                        "asterisk": "MuiInputLabel-asterisk",
                                                        "disabled": "Mui-disabled",
                                                        "error": "Mui-error",
                                                        "filled": "MuiInputLabel-filled",
                                                        "focused": "Mui-focused",
                                                        "formControl": "MuiInputLabel-formControl",
                                                        "marginDense": "MuiInputLabel-marginDense",
                                                        "outlined": "MuiInputLabel-outlined",
                                                        "required": "Mui-required",
                                                        "root": "MuiInputLabel-root",
                                                        "shrink": "MuiInputLabel-shrink",
                                                      }
                                                    }
                                                    focused={false}
                                                    required={false}
                                                  >
                                                    <WithStyles(ForwardRef(FormLabel))
                                                      className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                                      classes={
                                                        Object {
                                                          "asterisk": "MuiInputLabel-asterisk",
                                                          "disabled": "Mui-disabled",
                                                          "error": "Mui-error",
                                                          "focused": "Mui-focused",
                                                          "required": "Mui-required",
                                                        }
                                                      }
                                                      data-shrink={false}
                                                      focused={false}
                                                      required={false}
                                                    >
                                                      <ForwardRef(FormLabel)
                                                        className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                                        classes={
                                                          Object {
                                                            "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                                            "colorSecondary": "MuiFormLabel-colorSecondary",
                                                            "disabled": "Mui-disabled Mui-disabled",
                                                            "error": "Mui-error Mui-error",
                                                            "filled": "MuiFormLabel-filled",
                                                            "focused": "Mui-focused Mui-focused",
                                                            "required": "Mui-required Mui-required",
                                                            "root": "MuiFormLabel-root",
                                                          }
                                                        }
                                                        data-shrink={false}
                                                        focused={false}
                                                        required={false}
                                                      >
                                                        <label
                                                          className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                                          data-shrink={false}
                                                        >
                                                          Email address
                                                        </label>
                                                      </ForwardRef(FormLabel)>
                                                    </WithStyles(ForwardRef(FormLabel))>
                                                  </ForwardRef(InputLabel)>
                                                </WithStyles(ForwardRef(InputLabel))>
                                                <WithStyles(ForwardRef(Input))
                                                  autoFocus={false}
                                                  disableUnderline={true}
                                                  endAdornment={null}
                                                  fullWidth={true}
                                                  multiline={false}
                                                  name="email"
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  startAdornment={null}
                                                  type="email"
                                                  value=""
                                                >
                                                  <ForwardRef(Input)
                                                    autoFocus={false}
                                                    classes={
                                                      Object {
                                                        "colorSecondary": "MuiInput-colorSecondary",
                                                        "disabled": "Mui-disabled",
                                                        "error": "Mui-error",
                                                        "focused": "Mui-focused",
                                                        "formControl": "MuiInput-formControl",
                                                        "fullWidth": "MuiInput-fullWidth",
                                                        "input": "MuiInput-input",
                                                        "inputMarginDense": "MuiInput-inputMarginDense",
                                                        "inputMultiline": "MuiInput-inputMultiline",
                                                        "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                        "marginDense": "MuiInput-marginDense",
                                                        "multiline": "MuiInput-multiline",
                                                        "root": "MuiInput-root",
                                                        "underline": "MuiInput-underline",
                                                      }
                                                    }
                                                    disableUnderline={true}
                                                    endAdornment={null}
                                                    fullWidth={true}
                                                    multiline={false}
                                                    name="email"
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    startAdornment={null}
                                                    type="email"
                                                    value=""
                                                  >
                                                    <WithStyles(ForwardRef(InputBase))
                                                      autoFocus={false}
                                                      classes={
                                                        Object {
                                                          "colorSecondary": "MuiInput-colorSecondary",
                                                          "disabled": "Mui-disabled",
                                                          "error": "Mui-error",
                                                          "focused": "Mui-focused",
                                                          "formControl": "MuiInput-formControl",
                                                          "fullWidth": "MuiInput-fullWidth",
                                                          "input": "MuiInput-input",
                                                          "inputMarginDense": "MuiInput-inputMarginDense",
                                                          "inputMultiline": "MuiInput-inputMultiline",
                                                          "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                          "marginDense": "MuiInput-marginDense",
                                                          "multiline": "MuiInput-multiline",
                                                          "root": "MuiInput-root",
                                                          "underline": null,
                                                        }
                                                      }
                                                      endAdornment={null}
                                                      fullWidth={true}
                                                      inputComponent="input"
                                                      multiline={false}
                                                      name="email"
                                                      onBlur={[Function]}
                                                      onChange={[Function]}
                                                      startAdornment={null}
                                                      type="email"
                                                      value=""
                                                    >
                                                      <ForwardRef(InputBase)
                                                        autoFocus={false}
                                                        classes={
                                                          Object {
                                                            "adornedEnd": "MuiInputBase-adornedEnd",
                                                            "adornedStart": "MuiInputBase-adornedStart",
                                                            "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                                                            "disabled": "Mui-disabled Mui-disabled",
                                                            "error": "Mui-error Mui-error",
                                                            "focused": "Mui-focused Mui-focused",
                                                            "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                                            "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                                            "input": "MuiInputBase-input MuiInput-input",
                                                            "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                                            "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                                            "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                                            "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                                            "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                                            "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                                            "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                                                            "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                                            "root": "MuiInputBase-root MuiInput-root",
                                                          }
                                                        }
                                                        endAdornment={null}
                                                        fullWidth={true}
                                                        inputComponent="input"
                                                        multiline={false}
                                                        name="email"
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        startAdornment={null}
                                                        type="email"
                                                        value=""
                                                      >
                                                        <div
                                                          className="MuiInputBase-root MuiInput-root MuiInputBase-fullWidth MuiInput-fullWidth MuiInputBase-formControl MuiInput-formControl"
                                                          onClick={[Function]}
                                                        >
                                                          <input
                                                            aria-invalid={false}
                                                            autoFocus={false}
                                                            className="MuiInputBase-input MuiInput-input"
                                                            disabled={false}
                                                            name="email"
                                                            onAnimationStart={[Function]}
                                                            onBlur={[Function]}
                                                            onChange={[Function]}
                                                            onFocus={[Function]}
                                                            required={false}
                                                            type="email"
                                                            value=""
                                                          />
                                                        </div>
                                                      </ForwardRef(InputBase)>
                                                    </WithStyles(ForwardRef(InputBase))>
                                                  </ForwardRef(Input)>
                                                </WithStyles(ForwardRef(Input))>
                                              </div>
                                            </ForwardRef(FormControl)>
                                          </WithStyles(ForwardRef(FormControl))>
                                        </ForwardRef(TextField)>
                                      </WithStyles(ForwardRef(TextField))>
                                    </TriggerTextField>
                                  </RegenTextField>
                                </Field>
                                <Field
                                  className="makeStyles-textField-686"
                                  component={[Function]}
                                  name="password"
                                  signup={false}
                                >
                                  <PasswordField
                                    className="makeStyles-textField-686"
                                    field={
                                      Object {
                                        "name": "password",
                                        "onBlur": [Function],
                                        "onChange": [Function],
                                        "value": "",
                                      }
                                    }
                                    form={
                                      Object {
                                        "dirty": false,
                                        "errors": Object {},
                                        "getFieldHelpers": [Function],
                                        "getFieldMeta": [Function],
                                        "getFieldProps": [Function],
                                        "handleBlur": [Function],
                                        "handleChange": [Function],
                                        "handleReset": [Function],
                                        "handleSubmit": [Function],
                                        "initialErrors": Object {},
                                        "initialStatus": undefined,
                                        "initialTouched": Object {},
                                        "initialValues": Object {
                                          "email": "",
                                          "password": "",
                                          "privacy": false,
                                          "recaptcha": undefined,
                                          "staySigned": false,
                                          "updates": false,
                                        },
                                        "isSubmitting": false,
                                        "isValid": true,
                                        "isValidating": false,
                                        "registerField": [Function],
                                        "resetForm": [Function],
                                        "setErrors": [Function],
                                        "setFieldError": [Function],
                                        "setFieldTouched": [Function],
                                        "setFieldValue": [Function],
                                        "setFormikState": [Function],
                                        "setStatus": [Function],
                                        "setSubmitting": [Function],
                                        "setTouched": [Function],
                                        "setValues": [Function],
                                        "status": undefined,
                                        "submitCount": 0,
                                        "submitForm": [Function],
                                        "touched": Object {},
                                        "unregisterField": [Function],
                                        "validateField": [Function],
                                        "validateForm": [Function],
                                        "validateOnBlur": true,
                                        "validateOnChange": true,
                                        "validateOnMount": false,
                                        "values": Object {
                                          "email": "",
                                          "password": "",
                                          "privacy": false,
                                          "recaptcha": undefined,
                                          "staySigned": false,
                                          "updates": false,
                                        },
                                      }
                                    }
                                    signup={false}
                                  >
                                    <RegenTextField
                                      FormHelperTextProps={
                                        Object {
                                          "filled": false,
                                        }
                                      }
                                      className="makeStyles-textField-686"
                                      endAdornment={
                                        <ForwardRef(WithStyles)
                                          aria-label="toggle password visibility"
                                          onClick={[Function]}
                                          onMouseDown={[Function]}
                                        >
                                          <EyeIcon
                                            className="makeStyles-eyeIcon-700"
                                            color="#7BC796"
                                            visible={true}
                                          />
                                        </ForwardRef(WithStyles)>
                                      }
                                      field={
                                        Object {
                                          "name": "password",
                                          "onBlur": [Function],
                                          "onChange": [Function],
                                          "value": "",
                                        }
                                      }
                                      form={
                                        Object {
                                          "dirty": false,
                                          "errors": Object {},
                                          "getFieldHelpers": [Function],
                                          "getFieldMeta": [Function],
                                          "getFieldProps": [Function],
                                          "handleBlur": [Function],
                                          "handleChange": [Function],
                                          "handleReset": [Function],
                                          "handleSubmit": [Function],
                                          "initialErrors": Object {},
                                          "initialStatus": undefined,
                                          "initialTouched": Object {},
                                          "initialValues": Object {
                                            "email": "",
                                            "password": "",
                                            "privacy": false,
                                            "recaptcha": undefined,
                                            "staySigned": false,
                                            "updates": false,
                                          },
                                          "isSubmitting": false,
                                          "isValid": true,
                                          "isValidating": false,
                                          "registerField": [Function],
                                          "resetForm": [Function],
                                          "setErrors": [Function],
                                          "setFieldError": [Function],
                                          "setFieldTouched": [Function],
                                          "setFieldValue": [Function],
                                          "setFormikState": [Function],
                                          "setStatus": [Function],
                                          "setSubmitting": [Function],
                                          "setTouched": [Function],
                                          "setValues": [Function],
                                          "status": undefined,
                                          "submitCount": 0,
                                          "submitForm": [Function],
                                          "touched": Object {},
                                          "unregisterField": [Function],
                                          "validateField": [Function],
                                          "validateForm": [Function],
                                          "validateOnBlur": true,
                                          "validateOnChange": true,
                                          "validateOnMount": false,
                                          "values": Object {
                                            "email": "",
                                            "password": "",
                                            "privacy": false,
                                            "recaptcha": undefined,
                                            "staySigned": false,
                                            "updates": false,
                                          },
                                        }
                                      }
                                      label="Password"
                                      type="text"
                                    >
                                      <TriggerTextField
                                        FormHelperTextProps={
                                          Object {
                                            "filled": false,
                                          }
                                        }
                                        InputLabelProps={
                                          Object {
                                            "focused": false,
                                            "required": false,
                                          }
                                        }
                                        InputProps={
                                          Object {
                                            "disableUnderline": true,
                                            "endAdornment": <ForwardRef(WithStyles)
                                              position="end"
                                            >
                                              <ForwardRef(WithStyles)
                                                aria-label="toggle password visibility"
                                                onClick={[Function]}
                                                onMouseDown={[Function]}
                                              >
                                                <EyeIcon
                                                  className="makeStyles-eyeIcon-700"
                                                  color="#7BC796"
                                                  visible={true}
                                                />
                                              </ForwardRef(WithStyles)>
                                            </ForwardRef(WithStyles)>,
                                            "startAdornment": null,
                                          }
                                        }
                                        className="makeStyles-root-698 makeStyles-root-701 makeStyles-textField-686"
                                        field={
                                          Object {
                                            "name": "password",
                                            "onBlur": [Function],
                                            "onChange": [Function],
                                            "value": "",
                                          }
                                        }
                                        form={
                                          Object {
                                            "dirty": false,
                                            "errors": Object {},
                                            "getFieldHelpers": [Function],
                                            "getFieldMeta": [Function],
                                            "getFieldProps": [Function],
                                            "handleBlur": [Function],
                                            "handleChange": [Function],
                                            "handleReset": [Function],
                                            "handleSubmit": [Function],
                                            "initialErrors": Object {},
                                            "initialStatus": undefined,
                                            "initialTouched": Object {},
                                            "initialValues": Object {
                                              "email": "",
                                              "password": "",
                                              "privacy": false,
                                              "recaptcha": undefined,
                                              "staySigned": false,
                                              "updates": false,
                                            },
                                            "isSubmitting": false,
                                            "isValid": true,
                                            "isValidating": false,
                                            "registerField": [Function],
                                            "resetForm": [Function],
                                            "setErrors": [Function],
                                            "setFieldError": [Function],
                                            "setFieldTouched": [Function],
                                            "setFieldValue": [Function],
                                            "setFormikState": [Function],
                                            "setStatus": [Function],
                                            "setSubmitting": [Function],
                                            "setTouched": [Function],
                                            "setValues": [Function],
                                            "status": undefined,
                                            "submitCount": 0,
                                            "submitForm": [Function],
                                            "touched": Object {},
                                            "unregisterField": [Function],
                                            "validateField": [Function],
                                            "validateForm": [Function],
                                            "validateOnBlur": true,
                                            "validateOnChange": true,
                                            "validateOnMount": false,
                                            "values": Object {
                                              "email": "",
                                              "password": "",
                                              "privacy": false,
                                              "recaptcha": undefined,
                                              "staySigned": false,
                                              "updates": false,
                                            },
                                          }
                                        }
                                        fullWidth={true}
                                        label="Password"
                                        type="text"
                                      >
                                        <WithStyles(ForwardRef(TextField))
                                          FormHelperTextProps={
                                            Object {
                                              "filled": false,
                                            }
                                          }
                                          InputLabelProps={
                                            Object {
                                              "focused": false,
                                              "required": false,
                                            }
                                          }
                                          InputProps={
                                            Object {
                                              "disableUnderline": true,
                                              "endAdornment": <ForwardRef(WithStyles)
                                                position="end"
                                              >
                                                <ForwardRef(WithStyles)
                                                  aria-label="toggle password visibility"
                                                  onClick={[Function]}
                                                  onMouseDown={[Function]}
                                                >
                                                  <EyeIcon
                                                    className="makeStyles-eyeIcon-700"
                                                    color="#7BC796"
                                                    visible={true}
                                                  />
                                                </ForwardRef(WithStyles)>
                                              </ForwardRef(WithStyles)>,
                                              "startAdornment": null,
                                            }
                                          }
                                          className="makeStyles-root-698 makeStyles-root-701 makeStyles-textField-686"
                                          disabled={false}
                                          fullWidth={true}
                                          label="Password"
                                          name="password"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          type="text"
                                          value=""
                                        >
                                          <ForwardRef(TextField)
                                            FormHelperTextProps={
                                              Object {
                                                "filled": false,
                                              }
                                            }
                                            InputLabelProps={
                                              Object {
                                                "focused": false,
                                                "required": false,
                                              }
                                            }
                                            InputProps={
                                              Object {
                                                "disableUnderline": true,
                                                "endAdornment": <ForwardRef(WithStyles)
                                                  position="end"
                                                >
                                                  <ForwardRef(WithStyles)
                                                    aria-label="toggle password visibility"
                                                    onClick={[Function]}
                                                    onMouseDown={[Function]}
                                                  >
                                                    <EyeIcon
                                                      className="makeStyles-eyeIcon-700"
                                                      color="#7BC796"
                                                      visible={true}
                                                    />
                                                  </ForwardRef(WithStyles)>
                                                </ForwardRef(WithStyles)>,
                                                "startAdornment": null,
                                              }
                                            }
                                            className="makeStyles-root-698 makeStyles-root-701 makeStyles-textField-686"
                                            classes={
                                              Object {
                                                "root": "MuiTextField-root",
                                              }
                                            }
                                            disabled={false}
                                            fullWidth={true}
                                            label="Password"
                                            name="password"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            type="text"
                                            value=""
                                          >
                                            <WithStyles(ForwardRef(FormControl))
                                              className="MuiTextField-root makeStyles-root-698 makeStyles-root-701 makeStyles-textField-686"
                                              color="primary"
                                              disabled={false}
                                              error={false}
                                              fullWidth={true}
                                              required={false}
                                              variant="standard"
                                            >
                                              <ForwardRef(FormControl)
                                                className="MuiTextField-root makeStyles-root-698 makeStyles-root-701 makeStyles-textField-686"
                                                classes={
                                                  Object {
                                                    "fullWidth": "MuiFormControl-fullWidth",
                                                    "marginDense": "MuiFormControl-marginDense",
                                                    "marginNormal": "MuiFormControl-marginNormal",
                                                    "root": "MuiFormControl-root",
                                                  }
                                                }
                                                color="primary"
                                                disabled={false}
                                                error={false}
                                                fullWidth={true}
                                                required={false}
                                                variant="standard"
                                              >
                                                <div
                                                  className="MuiFormControl-root MuiTextField-root makeStyles-root-698 makeStyles-root-701 makeStyles-textField-686 MuiFormControl-fullWidth"
                                                >
                                                  <WithStyles(ForwardRef(InputLabel))
                                                    focused={false}
                                                    required={false}
                                                  >
                                                    <ForwardRef(InputLabel)
                                                      classes={
                                                        Object {
                                                          "animated": "MuiInputLabel-animated",
                                                          "asterisk": "MuiInputLabel-asterisk",
                                                          "disabled": "Mui-disabled",
                                                          "error": "Mui-error",
                                                          "filled": "MuiInputLabel-filled",
                                                          "focused": "Mui-focused",
                                                          "formControl": "MuiInputLabel-formControl",
                                                          "marginDense": "MuiInputLabel-marginDense",
                                                          "outlined": "MuiInputLabel-outlined",
                                                          "required": "Mui-required",
                                                          "root": "MuiInputLabel-root",
                                                          "shrink": "MuiInputLabel-shrink",
                                                        }
                                                      }
                                                      focused={false}
                                                      required={false}
                                                    >
                                                      <WithStyles(ForwardRef(FormLabel))
                                                        className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                                        classes={
                                                          Object {
                                                            "asterisk": "MuiInputLabel-asterisk",
                                                            "disabled": "Mui-disabled",
                                                            "error": "Mui-error",
                                                            "focused": "Mui-focused",
                                                            "required": "Mui-required",
                                                          }
                                                        }
                                                        data-shrink={false}
                                                        focused={false}
                                                        required={false}
                                                      >
                                                        <ForwardRef(FormLabel)
                                                          className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                                          classes={
                                                            Object {
                                                              "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                                              "colorSecondary": "MuiFormLabel-colorSecondary",
                                                              "disabled": "Mui-disabled Mui-disabled",
                                                              "error": "Mui-error Mui-error",
                                                              "filled": "MuiFormLabel-filled",
                                                              "focused": "Mui-focused Mui-focused",
                                                              "required": "Mui-required Mui-required",
                                                              "root": "MuiFormLabel-root",
                                                            }
                                                          }
                                                          data-shrink={false}
                                                          focused={false}
                                                          required={false}
                                                        >
                                                          <label
                                                            className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                                            data-shrink={false}
                                                          >
                                                            Password
                                                          </label>
                                                        </ForwardRef(FormLabel)>
                                                      </WithStyles(ForwardRef(FormLabel))>
                                                    </ForwardRef(InputLabel)>
                                                  </WithStyles(ForwardRef(InputLabel))>
                                                  <WithStyles(ForwardRef(Input))
                                                    autoFocus={false}
                                                    disableUnderline={true}
                                                    endAdornment={
                                                      <ForwardRef(WithStyles)
                                                        position="end"
                                                      >
                                                        <ForwardRef(WithStyles)
                                                          aria-label="toggle password visibility"
                                                          onClick={[Function]}
                                                          onMouseDown={[Function]}
                                                        >
                                                          <EyeIcon
                                                            className="makeStyles-eyeIcon-700"
                                                            color="#7BC796"
                                                            visible={true}
                                                          />
                                                        </ForwardRef(WithStyles)>
                                                      </ForwardRef(WithStyles)>
                                                    }
                                                    fullWidth={true}
                                                    multiline={false}
                                                    name="password"
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    startAdornment={null}
                                                    type="text"
                                                    value=""
                                                  >
                                                    <ForwardRef(Input)
                                                      autoFocus={false}
                                                      classes={
                                                        Object {
                                                          "colorSecondary": "MuiInput-colorSecondary",
                                                          "disabled": "Mui-disabled",
                                                          "error": "Mui-error",
                                                          "focused": "Mui-focused",
                                                          "formControl": "MuiInput-formControl",
                                                          "fullWidth": "MuiInput-fullWidth",
                                                          "input": "MuiInput-input",
                                                          "inputMarginDense": "MuiInput-inputMarginDense",
                                                          "inputMultiline": "MuiInput-inputMultiline",
                                                          "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                          "marginDense": "MuiInput-marginDense",
                                                          "multiline": "MuiInput-multiline",
                                                          "root": "MuiInput-root",
                                                          "underline": "MuiInput-underline",
                                                        }
                                                      }
                                                      disableUnderline={true}
                                                      endAdornment={
                                                        <ForwardRef(WithStyles)
                                                          position="end"
                                                        >
                                                          <ForwardRef(WithStyles)
                                                            aria-label="toggle password visibility"
                                                            onClick={[Function]}
                                                            onMouseDown={[Function]}
                                                          >
                                                            <EyeIcon
                                                              className="makeStyles-eyeIcon-700"
                                                              color="#7BC796"
                                                              visible={true}
                                                            />
                                                          </ForwardRef(WithStyles)>
                                                        </ForwardRef(WithStyles)>
                                                      }
                                                      fullWidth={true}
                                                      multiline={false}
                                                      name="password"
                                                      onBlur={[Function]}
                                                      onChange={[Function]}
                                                      startAdornment={null}
                                                      type="text"
                                                      value=""
                                                    >
                                                      <WithStyles(ForwardRef(InputBase))
                                                        autoFocus={false}
                                                        classes={
                                                          Object {
                                                            "colorSecondary": "MuiInput-colorSecondary",
                                                            "disabled": "Mui-disabled",
                                                            "error": "Mui-error",
                                                            "focused": "Mui-focused",
                                                            "formControl": "MuiInput-formControl",
                                                            "fullWidth": "MuiInput-fullWidth",
                                                            "input": "MuiInput-input",
                                                            "inputMarginDense": "MuiInput-inputMarginDense",
                                                            "inputMultiline": "MuiInput-inputMultiline",
                                                            "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                            "marginDense": "MuiInput-marginDense",
                                                            "multiline": "MuiInput-multiline",
                                                            "root": "MuiInput-root",
                                                            "underline": null,
                                                          }
                                                        }
                                                        endAdornment={
                                                          <ForwardRef(WithStyles)
                                                            position="end"
                                                          >
                                                            <ForwardRef(WithStyles)
                                                              aria-label="toggle password visibility"
                                                              onClick={[Function]}
                                                              onMouseDown={[Function]}
                                                            >
                                                              <EyeIcon
                                                                className="makeStyles-eyeIcon-700"
                                                                color="#7BC796"
                                                                visible={true}
                                                              />
                                                            </ForwardRef(WithStyles)>
                                                          </ForwardRef(WithStyles)>
                                                        }
                                                        fullWidth={true}
                                                        inputComponent="input"
                                                        multiline={false}
                                                        name="password"
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        startAdornment={null}
                                                        type="text"
                                                        value=""
                                                      >
                                                        <ForwardRef(InputBase)
                                                          autoFocus={false}
                                                          classes={
                                                            Object {
                                                              "adornedEnd": "MuiInputBase-adornedEnd",
                                                              "adornedStart": "MuiInputBase-adornedStart",
                                                              "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                                                              "disabled": "Mui-disabled Mui-disabled",
                                                              "error": "Mui-error Mui-error",
                                                              "focused": "Mui-focused Mui-focused",
                                                              "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                                              "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                                              "input": "MuiInputBase-input MuiInput-input",
                                                              "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                                              "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                                              "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                                              "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                                              "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                                              "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                                              "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                                                              "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                                              "root": "MuiInputBase-root MuiInput-root",
                                                            }
                                                          }
                                                          endAdornment={
                                                            <ForwardRef(WithStyles)
                                                              position="end"
                                                            >
                                                              <ForwardRef(WithStyles)
                                                                aria-label="toggle password visibility"
                                                                onClick={[Function]}
                                                                onMouseDown={[Function]}
                                                              >
                                                                <EyeIcon
                                                                  className="makeStyles-eyeIcon-700"
                                                                  color="#7BC796"
                                                                  visible={true}
                                                                />
                                                              </ForwardRef(WithStyles)>
                                                            </ForwardRef(WithStyles)>
                                                          }
                                                          fullWidth={true}
                                                          inputComponent="input"
                                                          multiline={false}
                                                          name="password"
                                                          onBlur={[Function]}
                                                          onChange={[Function]}
                                                          startAdornment={null}
                                                          type="text"
                                                          value=""
                                                        >
                                                          <div
                                                            className="MuiInputBase-root MuiInput-root MuiInputBase-fullWidth MuiInput-fullWidth MuiInputBase-formControl MuiInput-formControl MuiInputBase-adornedEnd"
                                                            onClick={[Function]}
                                                          >
                                                            <input
                                                              aria-invalid={false}
                                                              autoFocus={false}
                                                              className="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedEnd"
                                                              disabled={false}
                                                              name="password"
                                                              onAnimationStart={[Function]}
                                                              onBlur={[Function]}
                                                              onChange={[Function]}
                                                              onFocus={[Function]}
                                                              required={false}
                                                              type="text"
                                                              value=""
                                                            />
                                                            <WithStyles(ForwardRef(InputAdornment))
                                                              position="end"
                                                            >
                                                              <ForwardRef(InputAdornment)
                                                                classes={
                                                                  Object {
                                                                    "disablePointerEvents": "MuiInputAdornment-disablePointerEvents",
                                                                    "filled": "MuiInputAdornment-filled",
                                                                    "hiddenLabel": "MuiInputAdornment-hiddenLabel",
                                                                    "marginDense": "MuiInputAdornment-marginDense",
                                                                    "positionEnd": "MuiInputAdornment-positionEnd",
                                                                    "positionStart": "MuiInputAdornment-positionStart",
                                                                    "root": "MuiInputAdornment-root",
                                                                  }
                                                                }
                                                                position="end"
                                                              >
                                                                <div
                                                                  className="MuiInputAdornment-root MuiInputAdornment-positionEnd"
                                                                >
                                                                  <WithStyles(ForwardRef(IconButton))
                                                                    aria-label="toggle password visibility"
                                                                    onClick={[Function]}
                                                                    onMouseDown={[Function]}
                                                                  >
                                                                    <ForwardRef(IconButton)
                                                                      aria-label="toggle password visibility"
                                                                      classes={
                                                                        Object {
                                                                          "colorInherit": "MuiIconButton-colorInherit",
                                                                          "colorPrimary": "MuiIconButton-colorPrimary",
                                                                          "colorSecondary": "MuiIconButton-colorSecondary",
                                                                          "disabled": "Mui-disabled",
                                                                          "edgeEnd": "MuiIconButton-edgeEnd",
                                                                          "edgeStart": "MuiIconButton-edgeStart",
                                                                          "label": "MuiIconButton-label",
                                                                          "root": "MuiIconButton-root",
                                                                          "sizeSmall": "MuiIconButton-sizeSmall",
                                                                        }
                                                                      }
                                                                      onClick={[Function]}
                                                                      onMouseDown={[Function]}
                                                                    >
                                                                      <WithStyles(ForwardRef(ButtonBase))
                                                                        aria-label="toggle password visibility"
                                                                        centerRipple={true}
                                                                        className="MuiIconButton-root"
                                                                        disabled={false}
                                                                        focusRipple={true}
                                                                        onClick={[Function]}
                                                                        onMouseDown={[Function]}
                                                                      >
                                                                        <ForwardRef(ButtonBase)
                                                                          aria-label="toggle password visibility"
                                                                          centerRipple={true}
                                                                          className="MuiIconButton-root"
                                                                          classes={
                                                                            Object {
                                                                              "disabled": "Mui-disabled",
                                                                              "focusVisible": "Mui-focusVisible",
                                                                              "root": "MuiButtonBase-root",
                                                                            }
                                                                          }
                                                                          disabled={false}
                                                                          focusRipple={true}
                                                                          onClick={[Function]}
                                                                          onMouseDown={[Function]}
                                                                        >
                                                                          <button
                                                                            aria-label="toggle password visibility"
                                                                            className="MuiButtonBase-root MuiIconButton-root"
                                                                            disabled={false}
                                                                            onBlur={[Function]}
                                                                            onClick={[Function]}
                                                                            onDragLeave={[Function]}
                                                                            onFocus={[Function]}
                                                                            onKeyDown={[Function]}
                                                                            onKeyUp={[Function]}
                                                                            onMouseDown={[Function]}
                                                                            onMouseLeave={[Function]}
                                                                            onMouseUp={[Function]}
                                                                            onTouchEnd={[Function]}
                                                                            onTouchMove={[Function]}
                                                                            onTouchStart={[Function]}
                                                                            tabIndex={0}
                                                                            type="button"
                                                                          >
                                                                            <span
                                                                              className="MuiIconButton-label"
                                                                            >
                                                                              <EyeIcon
                                                                                className="makeStyles-eyeIcon-700"
                                                                                color="#7BC796"
                                                                                visible={true}
                                                                              >
                                                                                <WithStyles(ForwardRef(SvgIcon))
                                                                                  className="makeStyles-eyeIcon-700 makeStyles-root-702"
                                                                                  viewBox="0 0 19 14"
                                                                                >
                                                                                  <ForwardRef(SvgIcon)
                                                                                    className="makeStyles-eyeIcon-700 makeStyles-root-702"
                                                                                    classes={
                                                                                      Object {
                                                                                        "colorAction": "MuiSvgIcon-colorAction",
                                                                                        "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                                                        "colorError": "MuiSvgIcon-colorError",
                                                                                        "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                                                        "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                                                        "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                                                        "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                                                        "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                                                        "root": "MuiSvgIcon-root",
                                                                                      }
                                                                                    }
                                                                                    viewBox="0 0 19 14"
                                                                                  >
                                                                                    <svg
                                                                                      aria-hidden={true}
                                                                                      className="MuiSvgIcon-root makeStyles-eyeIcon-700 makeStyles-root-702"
                                                                                      focusable="false"
                                                                                      viewBox="0 0 19 14"
                                                                                    >
                                                                                      <svg
                                                                                        fill="none"
                                                                                        height="14"
                                                                                        viewBox="0 0 19 14"
                                                                                        width="19"
                                                                                        xmlns="http://www.w3.org/2000/svg"
                                                                                      >
                                                                                        <path
                                                                                          clipRule="evenodd"
                                                                                          d="M0 6.91021C1.29537 2.90035 5.05898 0 9.5 0C13.941 0 17.7046 2.90035 19 6.91021C17.7046 10.9201 13.941 13.8204 9.5 13.8204C5.05898 13.8204 1.29537 10.9201 0 6.91021Z"
                                                                                          fill="#7BC796"
                                                                                          fillRule="evenodd"
                                                                                        />
                                                                                        <circle
                                                                                          cx="9.81977"
                                                                                          cy="6.91022"
                                                                                          fill="#7BC796"
                                                                                          r="3.29587"
                                                                                          stroke="white"
                                                                                          strokeWidth="1.5"
                                                                                        />
                                                                                      </svg>
                                                                                    </svg>
                                                                                  </ForwardRef(SvgIcon)>
                                                                                </WithStyles(ForwardRef(SvgIcon))>
                                                                              </EyeIcon>
                                                                            </span>
                                                                            <WithStyles(memo)
                                                                              center={true}
                                                                            >
                                                                              <ForwardRef(TouchRipple)
                                                                                center={true}
                                                                                classes={
                                                                                  Object {
                                                                                    "child": "MuiTouchRipple-child",
                                                                                    "childLeaving": "MuiTouchRipple-childLeaving",
                                                                                    "childPulsate": "MuiTouchRipple-childPulsate",
                                                                                    "ripple": "MuiTouchRipple-ripple",
                                                                                    "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                                                    "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                                                    "root": "MuiTouchRipple-root",
                                                                                  }
                                                                                }
                                                                              >
                                                                                <span
                                                                                  className="MuiTouchRipple-root"
                                                                                >
                                                                                  <TransitionGroup
                                                                                    childFactory={[Function]}
                                                                                    component={null}
                                                                                    exit={true}
                                                                                  />
                                                                                </span>
                                                                              </ForwardRef(TouchRipple)>
                                                                            </WithStyles(memo)>
                                                                          </button>
                                                                        </ForwardRef(ButtonBase)>
                                                                      </WithStyles(ForwardRef(ButtonBase))>
                                                                    </ForwardRef(IconButton)>
                                                                  </WithStyles(ForwardRef(IconButton))>
                                                                </div>
                                                              </ForwardRef(InputAdornment)>
                                                            </WithStyles(ForwardRef(InputAdornment))>
                                                          </div>
                                                        </ForwardRef(InputBase)>
                                                      </WithStyles(ForwardRef(InputBase))>
                                                    </ForwardRef(Input)>
                                                  </WithStyles(ForwardRef(Input))>
                                                </div>
                                              </ForwardRef(FormControl)>
                                            </WithStyles(ForwardRef(FormControl))>
                                          </ForwardRef(TextField)>
                                        </WithStyles(ForwardRef(TextField))>
                                      </TriggerTextField>
                                    </RegenTextField>
                                  </PasswordField>
                                </Field>
                                <Description
                                  className="makeStyles-forgotPassword-689"
                                >
                                  <WithStyles(ForwardRef(Typography))
                                    className="makeStyles-root-696 makeStyles-root-703 makeStyles-forgotPassword-689"
                                    component="div"
                                  >
                                    <ForwardRef(Typography)
                                      className="makeStyles-root-696 makeStyles-root-703 makeStyles-forgotPassword-689"
                                      classes={
                                        Object {
                                          "alignCenter": "MuiTypography-alignCenter",
                                          "alignJustify": "MuiTypography-alignJustify",
                                          "alignLeft": "MuiTypography-alignLeft",
                                          "alignRight": "MuiTypography-alignRight",
                                          "body1": "MuiTypography-body1",
                                          "body2": "MuiTypography-body2",
                                          "button": "MuiTypography-button",
                                          "caption": "MuiTypography-caption",
                                          "colorError": "MuiTypography-colorError",
                                          "colorInherit": "MuiTypography-colorInherit",
                                          "colorPrimary": "MuiTypography-colorPrimary",
                                          "colorSecondary": "MuiTypography-colorSecondary",
                                          "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                          "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                          "displayBlock": "MuiTypography-displayBlock",
                                          "displayInline": "MuiTypography-displayInline",
                                          "gutterBottom": "MuiTypography-gutterBottom",
                                          "h1": "MuiTypography-h1",
                                          "h2": "MuiTypography-h2",
                                          "h3": "MuiTypography-h3",
                                          "h4": "MuiTypography-h4",
                                          "h5": "MuiTypography-h5",
                                          "h6": "MuiTypography-h6",
                                          "noWrap": "MuiTypography-noWrap",
                                          "overline": "MuiTypography-overline",
                                          "paragraph": "MuiTypography-paragraph",
                                          "root": "MuiTypography-root",
                                          "srOnly": "MuiTypography-srOnly",
                                          "subtitle1": "MuiTypography-subtitle1",
                                          "subtitle2": "MuiTypography-subtitle2",
                                        }
                                      }
                                      component="div"
                                      variantMapping={
                                        Object {
                                          "body1": "p",
                                          "body2": "p",
                                          "h1": "h1",
                                          "h2": "h2",
                                          "h3": "h3",
                                          "h4": "h4",
                                          "h5": "h5",
                                          "h6": "h6",
                                          "subtitle1": "h2",
                                          "subtitle2": "h2",
                                        }
                                      }
                                    >
                                      <div
                                        className="MuiTypography-root makeStyles-root-696 makeStyles-root-703 makeStyles-forgotPassword-689 MuiTypography-body1"
                                      >
                                        Forgot password
                                      </div>
                                    </ForwardRef(Typography)>
                                  </WithStyles(ForwardRef(Typography))>
                                </Description>
                              </div>
                            </ForwardRef(Paper)>
                          </WithStyles(ForwardRef(Paper))>
                        </ForwardRef(Card)>
                      </WithStyles(ForwardRef(Card))>
                    </RegenCard>
                  </OnBoardingCard>
                  <div
                    className="makeStyles-checkboxes-692"
                  >
                    <Field
                      component={[Function]}
                      label={
                        <Description
                          className="makeStyles-checkboxLabel-688"
                        >
                          Stay signed in
                        </Description>
                      }
                      name="staySigned"
                      type="checkbox"
                    >
                      <CheckboxLabel
                        field={
                          Object {
                            "checked": false,
                            "name": "staySigned",
                            "onBlur": [Function],
                            "onChange": [Function],
                            "value": false,
                          }
                        }
                        form={
                          Object {
                            "dirty": false,
                            "errors": Object {},
                            "getFieldHelpers": [Function],
                            "getFieldMeta": [Function],
                            "getFieldProps": [Function],
                            "handleBlur": [Function],
                            "handleChange": [Function],
                            "handleReset": [Function],
                            "handleSubmit": [Function],
                            "initialErrors": Object {},
                            "initialStatus": undefined,
                            "initialTouched": Object {},
                            "initialValues": Object {
                              "email": "",
                              "password": "",
                              "privacy": false,
                              "recaptcha": undefined,
                              "staySigned": false,
                              "updates": false,
                            },
                            "isSubmitting": false,
                            "isValid": true,
                            "isValidating": false,
                            "registerField": [Function],
                            "resetForm": [Function],
                            "setErrors": [Function],
                            "setFieldError": [Function],
                            "setFieldTouched": [Function],
                            "setFieldValue": [Function],
                            "setFormikState": [Function],
                            "setStatus": [Function],
                            "setSubmitting": [Function],
                            "setTouched": [Function],
                            "setValues": [Function],
                            "status": undefined,
                            "submitCount": 0,
                            "submitForm": [Function],
                            "touched": Object {},
                            "unregisterField": [Function],
                            "validateField": [Function],
                            "validateForm": [Function],
                            "validateOnBlur": true,
                            "validateOnChange": true,
                            "validateOnMount": false,
                            "values": Object {
                              "email": "",
                              "password": "",
                              "privacy": false,
                              "recaptcha": undefined,
                              "staySigned": false,
                              "updates": false,
                            },
                          }
                        }
                        label={
                          <Description
                            className="makeStyles-checkboxLabel-688"
                          >
                            Stay signed in
                          </Description>
                        }
                        type="checkbox"
                      >
                        <div
                          className="makeStyles-root-704"
                        >
                          <WithStyles(ForwardRef(FormControlLabel))
                            control={
                              <ForwardRef(WithStyles)
                                checked={false}
                                checkedIcon={<CheckedIcon />}
                                color="secondary"
                                disabled={false}
                                icon={<UncheckedIcon />}
                                indeterminate={false}
                                name="staySigned"
                                onBlur={[Function]}
                                onChange={[Function]}
                                value={false}
                              />
                            }
                            label={
                              <Description
                                className="makeStyles-checkboxLabel-688"
                              >
                                Stay signed in
                              </Description>
                            }
                          >
                            <ForwardRef(FormControlLabel)
                              classes={
                                Object {
                                  "disabled": "Mui-disabled",
                                  "label": "MuiFormControlLabel-label",
                                  "labelPlacementBottom": "MuiFormControlLabel-labelPlacementBottom",
                                  "labelPlacementStart": "MuiFormControlLabel-labelPlacementStart",
                                  "labelPlacementTop": "MuiFormControlLabel-labelPlacementTop",
                                  "root": "MuiFormControlLabel-root",
                                }
                              }
                              control={
                                <ForwardRef(WithStyles)
                                  checked={false}
                                  checkedIcon={<CheckedIcon />}
                                  color="secondary"
                                  disabled={false}
                                  icon={<UncheckedIcon />}
                                  indeterminate={false}
                                  name="staySigned"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  value={false}
                                />
                              }
                              label={
                                <Description
                                  className="makeStyles-checkboxLabel-688"
                                >
                                  Stay signed in
                                </Description>
                              }
                            >
                              <label
                                className="MuiFormControlLabel-root"
                              >
                                <WithStyles(ForwardRef(Checkbox))
                                  checked={false}
                                  checkedIcon={<CheckedIcon />}
                                  color="secondary"
                                  disabled={false}
                                  icon={<UncheckedIcon />}
                                  indeterminate={false}
                                  name="staySigned"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  value={false}
                                >
                                  <ForwardRef(Checkbox)
                                    checked={false}
                                    checkedIcon={<CheckedIcon />}
                                    classes={
                                      Object {
                                        "checked": "Mui-checked",
                                        "colorPrimary": "MuiCheckbox-colorPrimary",
                                        "colorSecondary": "MuiCheckbox-colorSecondary",
                                        "disabled": "Mui-disabled",
                                        "indeterminate": "MuiCheckbox-indeterminate",
                                        "root": "MuiCheckbox-root",
                                      }
                                    }
                                    color="secondary"
                                    disabled={false}
                                    icon={<UncheckedIcon />}
                                    indeterminate={false}
                                    name="staySigned"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    value={false}
                                  >
                                    <WithStyles(ForwardRef(SwitchBase))
                                      checked={false}
                                      checkedIcon={<CheckedIcon />}
                                      classes={
                                        Object {
                                          "checked": "Mui-checked",
                                          "disabled": "Mui-disabled",
                                          "root": "MuiCheckbox-root MuiCheckbox-colorSecondary",
                                        }
                                      }
                                      color="secondary"
                                      disabled={false}
                                      icon={<UncheckedIcon />}
                                      inputProps={
                                        Object {
                                          "data-indeterminate": false,
                                        }
                                      }
                                      name="staySigned"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      type="checkbox"
                                      value={false}
                                    >
                                      <ForwardRef(SwitchBase)
                                        checked={false}
                                        checkedIcon={<CheckedIcon />}
                                        classes={
                                          Object {
                                            "checked": "PrivateSwitchBase-checked-706 Mui-checked",
                                            "disabled": "PrivateSwitchBase-disabled-707 Mui-disabled",
                                            "input": "PrivateSwitchBase-input-708",
                                            "root": "PrivateSwitchBase-root-705 MuiCheckbox-root MuiCheckbox-colorSecondary",
                                          }
                                        }
                                        color="secondary"
                                        disabled={false}
                                        icon={<UncheckedIcon />}
                                        inputProps={
                                          Object {
                                            "data-indeterminate": false,
                                          }
                                        }
                                        name="staySigned"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        type="checkbox"
                                        value={false}
                                      >
                                        <WithStyles(ForwardRef(IconButton))
                                          className="PrivateSwitchBase-root-705 MuiCheckbox-root MuiCheckbox-colorSecondary"
                                          color="secondary"
                                          component="span"
                                          disabled={false}
                                          onBlur={[Function]}
                                          onFocus={[Function]}
                                          tabIndex={null}
                                        >
                                          <ForwardRef(IconButton)
                                            className="PrivateSwitchBase-root-705 MuiCheckbox-root MuiCheckbox-colorSecondary"
                                            classes={
                                              Object {
                                                "colorInherit": "MuiIconButton-colorInherit",
                                                "colorPrimary": "MuiIconButton-colorPrimary",
                                                "colorSecondary": "MuiIconButton-colorSecondary",
                                                "disabled": "Mui-disabled",
                                                "edgeEnd": "MuiIconButton-edgeEnd",
                                                "edgeStart": "MuiIconButton-edgeStart",
                                                "label": "MuiIconButton-label",
                                                "root": "MuiIconButton-root",
                                                "sizeSmall": "MuiIconButton-sizeSmall",
                                              }
                                            }
                                            color="secondary"
                                            component="span"
                                            disabled={false}
                                            onBlur={[Function]}
                                            onFocus={[Function]}
                                            tabIndex={null}
                                          >
                                            <WithStyles(ForwardRef(ButtonBase))
                                              centerRipple={true}
                                              className="MuiIconButton-root PrivateSwitchBase-root-705 MuiCheckbox-root MuiCheckbox-colorSecondary MuiIconButton-colorSecondary"
                                              component="span"
                                              disabled={false}
                                              focusRipple={true}
                                              onBlur={[Function]}
                                              onFocus={[Function]}
                                              tabIndex={null}
                                            >
                                              <ForwardRef(ButtonBase)
                                                centerRipple={true}
                                                className="MuiIconButton-root PrivateSwitchBase-root-705 MuiCheckbox-root MuiCheckbox-colorSecondary MuiIconButton-colorSecondary"
                                                classes={
                                                  Object {
                                                    "disabled": "Mui-disabled",
                                                    "focusVisible": "Mui-focusVisible",
                                                    "root": "MuiButtonBase-root",
                                                  }
                                                }
                                                component="span"
                                                disabled={false}
                                                focusRipple={true}
                                                onBlur={[Function]}
                                                onFocus={[Function]}
                                                tabIndex={null}
                                              >
                                                <span
                                                  aria-disabled={false}
                                                  className="MuiButtonBase-root MuiIconButton-root PrivateSwitchBase-root-705 MuiCheckbox-root MuiCheckbox-colorSecondary MuiIconButton-colorSecondary"
                                                  onBlur={[Function]}
                                                  onDragLeave={[Function]}
                                                  onFocus={[Function]}
                                                  onKeyDown={[Function]}
                                                  onKeyUp={[Function]}
                                                  onMouseDown={[Function]}
                                                  onMouseLeave={[Function]}
                                                  onMouseUp={[Function]}
                                                  onTouchEnd={[Function]}
                                                  onTouchMove={[Function]}
                                                  onTouchStart={[Function]}
                                                  tabIndex={null}
                                                >
                                                  <span
                                                    className="MuiIconButton-label"
                                                  >
                                                    <input
                                                      checked={false}
                                                      className="PrivateSwitchBase-input-708"
                                                      data-indeterminate={false}
                                                      disabled={false}
                                                      name="staySigned"
                                                      onChange={[Function]}
                                                      type="checkbox"
                                                      value={false}
                                                    />
                                                    <UncheckedIcon>
                                                      <WithStyles(ForwardRef(SvgIcon))
                                                        viewBox="0 0 20 20"
                                                      >
                                                        <ForwardRef(SvgIcon)
                                                          classes={
                                                            Object {
                                                              "colorAction": "MuiSvgIcon-colorAction",
                                                              "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                              "colorError": "MuiSvgIcon-colorError",
                                                              "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                              "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                              "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                              "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                              "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                              "root": "MuiSvgIcon-root",
                                                            }
                                                          }
                                                          viewBox="0 0 20 20"
                                                        >
                                                          <svg
                                                            aria-hidden={true}
                                                            className="MuiSvgIcon-root"
                                                            focusable="false"
                                                            viewBox="0 0 20 20"
                                                          >
                                                            <rect
                                                              fill="white"
                                                              height="19"
                                                              rx="0.5"
                                                              stroke="#D2D5D9"
                                                              width="19"
                                                              x="0.5"
                                                              y="0.5"
                                                            />
                                                          </svg>
                                                        </ForwardRef(SvgIcon)>
                                                      </WithStyles(ForwardRef(SvgIcon))>
                                                    </UncheckedIcon>
                                                  </span>
                                                  <WithStyles(memo)
                                                    center={true}
                                                  >
                                                    <ForwardRef(TouchRipple)
                                                      center={true}
                                                      classes={
                                                        Object {
                                                          "child": "MuiTouchRipple-child",
                                                          "childLeaving": "MuiTouchRipple-childLeaving",
                                                          "childPulsate": "MuiTouchRipple-childPulsate",
                                                          "ripple": "MuiTouchRipple-ripple",
                                                          "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                          "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                          "root": "MuiTouchRipple-root",
                                                        }
                                                      }
                                                    >
                                                      <span
                                                        className="MuiTouchRipple-root"
                                                      >
                                                        <TransitionGroup
                                                          childFactory={[Function]}
                                                          component={null}
                                                          exit={true}
                                                        />
                                                      </span>
                                                    </ForwardRef(TouchRipple)>
                                                  </WithStyles(memo)>
                                                </span>
                                              </ForwardRef(ButtonBase)>
                                            </WithStyles(ForwardRef(ButtonBase))>
                                          </ForwardRef(IconButton)>
                                        </WithStyles(ForwardRef(IconButton))>
                                      </ForwardRef(SwitchBase)>
                                    </WithStyles(ForwardRef(SwitchBase))>
                                  </ForwardRef(Checkbox)>
                                </WithStyles(ForwardRef(Checkbox))>
                                <WithStyles(ForwardRef(Typography))
                                  className="MuiFormControlLabel-label"
                                  component="span"
                                >
                                  <ForwardRef(Typography)
                                    className="MuiFormControlLabel-label"
                                    classes={
                                      Object {
                                        "alignCenter": "MuiTypography-alignCenter",
                                        "alignJustify": "MuiTypography-alignJustify",
                                        "alignLeft": "MuiTypography-alignLeft",
                                        "alignRight": "MuiTypography-alignRight",
                                        "body1": "MuiTypography-body1",
                                        "body2": "MuiTypography-body2",
                                        "button": "MuiTypography-button",
                                        "caption": "MuiTypography-caption",
                                        "colorError": "MuiTypography-colorError",
                                        "colorInherit": "MuiTypography-colorInherit",
                                        "colorPrimary": "MuiTypography-colorPrimary",
                                        "colorSecondary": "MuiTypography-colorSecondary",
                                        "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                        "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                        "displayBlock": "MuiTypography-displayBlock",
                                        "displayInline": "MuiTypography-displayInline",
                                        "gutterBottom": "MuiTypography-gutterBottom",
                                        "h1": "MuiTypography-h1",
                                        "h2": "MuiTypography-h2",
                                        "h3": "MuiTypography-h3",
                                        "h4": "MuiTypography-h4",
                                        "h5": "MuiTypography-h5",
                                        "h6": "MuiTypography-h6",
                                        "noWrap": "MuiTypography-noWrap",
                                        "overline": "MuiTypography-overline",
                                        "paragraph": "MuiTypography-paragraph",
                                        "root": "MuiTypography-root",
                                        "srOnly": "MuiTypography-srOnly",
                                        "subtitle1": "MuiTypography-subtitle1",
                                        "subtitle2": "MuiTypography-subtitle2",
                                      }
                                    }
                                    component="span"
                                    variantMapping={
                                      Object {
                                        "body1": "p",
                                        "body2": "p",
                                        "h1": "h1",
                                        "h2": "h2",
                                        "h3": "h3",
                                        "h4": "h4",
                                        "h5": "h5",
                                        "h6": "h6",
                                        "subtitle1": "h2",
                                        "subtitle2": "h2",
                                      }
                                    }
                                  >
                                    <span
                                      className="MuiTypography-root MuiFormControlLabel-label MuiTypography-body1"
                                    >
                                      <Description
                                        className="makeStyles-checkboxLabel-688"
                                      >
                                        <WithStyles(ForwardRef(Typography))
                                          className="makeStyles-root-696 makeStyles-root-709 makeStyles-checkboxLabel-688"
                                          component="div"
                                        >
                                          <ForwardRef(Typography)
                                            className="makeStyles-root-696 makeStyles-root-709 makeStyles-checkboxLabel-688"
                                            classes={
                                              Object {
                                                "alignCenter": "MuiTypography-alignCenter",
                                                "alignJustify": "MuiTypography-alignJustify",
                                                "alignLeft": "MuiTypography-alignLeft",
                                                "alignRight": "MuiTypography-alignRight",
                                                "body1": "MuiTypography-body1",
                                                "body2": "MuiTypography-body2",
                                                "button": "MuiTypography-button",
                                                "caption": "MuiTypography-caption",
                                                "colorError": "MuiTypography-colorError",
                                                "colorInherit": "MuiTypography-colorInherit",
                                                "colorPrimary": "MuiTypography-colorPrimary",
                                                "colorSecondary": "MuiTypography-colorSecondary",
                                                "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                                "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                                "displayBlock": "MuiTypography-displayBlock",
                                                "displayInline": "MuiTypography-displayInline",
                                                "gutterBottom": "MuiTypography-gutterBottom",
                                                "h1": "MuiTypography-h1",
                                                "h2": "MuiTypography-h2",
                                                "h3": "MuiTypography-h3",
                                                "h4": "MuiTypography-h4",
                                                "h5": "MuiTypography-h5",
                                                "h6": "MuiTypography-h6",
                                                "noWrap": "MuiTypography-noWrap",
                                                "overline": "MuiTypography-overline",
                                                "paragraph": "MuiTypography-paragraph",
                                                "root": "MuiTypography-root",
                                                "srOnly": "MuiTypography-srOnly",
                                                "subtitle1": "MuiTypography-subtitle1",
                                                "subtitle2": "MuiTypography-subtitle2",
                                              }
                                            }
                                            component="div"
                                            variantMapping={
                                              Object {
                                                "body1": "p",
                                                "body2": "p",
                                                "h1": "h1",
                                                "h2": "h2",
                                                "h3": "h3",
                                                "h4": "h4",
                                                "h5": "h5",
                                                "h6": "h6",
                                                "subtitle1": "h2",
                                                "subtitle2": "h2",
                                              }
                                            }
                                          >
                                            <div
                                              className="MuiTypography-root makeStyles-root-696 makeStyles-root-709 makeStyles-checkboxLabel-688 MuiTypography-body1"
                                            >
                                              Stay signed in
                                            </div>
                                          </ForwardRef(Typography)>
                                        </WithStyles(ForwardRef(Typography))>
                                      </Description>
                                    </span>
                                  </ForwardRef(Typography)>
                                </WithStyles(ForwardRef(Typography))>
                              </label>
                            </ForwardRef(FormControlLabel)>
                          </WithStyles(ForwardRef(FormControlLabel))>
                        </div>
                      </CheckboxLabel>
                    </Field>
                  </div>
                  <WithStyles(ForwardRef(Grid))
                    container={true}
                    justify="flex-end"
                  >
                    <ForwardRef(Grid)
                      classes={
                        Object {
                          "align-content-xs-center": "MuiGrid-align-content-xs-center",
                          "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                          "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                          "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                          "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                          "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                          "align-items-xs-center": "MuiGrid-align-items-xs-center",
                          "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                          "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                          "container": "MuiGrid-container",
                          "direction-xs-column": "MuiGrid-direction-xs-column",
                          "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                          "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                          "grid-lg-1": "MuiGrid-grid-lg-1",
                          "grid-lg-10": "MuiGrid-grid-lg-10",
                          "grid-lg-11": "MuiGrid-grid-lg-11",
                          "grid-lg-12": "MuiGrid-grid-lg-12",
                          "grid-lg-2": "MuiGrid-grid-lg-2",
                          "grid-lg-3": "MuiGrid-grid-lg-3",
                          "grid-lg-4": "MuiGrid-grid-lg-4",
                          "grid-lg-5": "MuiGrid-grid-lg-5",
                          "grid-lg-6": "MuiGrid-grid-lg-6",
                          "grid-lg-7": "MuiGrid-grid-lg-7",
                          "grid-lg-8": "MuiGrid-grid-lg-8",
                          "grid-lg-9": "MuiGrid-grid-lg-9",
                          "grid-lg-auto": "MuiGrid-grid-lg-auto",
                          "grid-lg-true": "MuiGrid-grid-lg-true",
                          "grid-md-1": "MuiGrid-grid-md-1",
                          "grid-md-10": "MuiGrid-grid-md-10",
                          "grid-md-11": "MuiGrid-grid-md-11",
                          "grid-md-12": "MuiGrid-grid-md-12",
                          "grid-md-2": "MuiGrid-grid-md-2",
                          "grid-md-3": "MuiGrid-grid-md-3",
                          "grid-md-4": "MuiGrid-grid-md-4",
                          "grid-md-5": "MuiGrid-grid-md-5",
                          "grid-md-6": "MuiGrid-grid-md-6",
                          "grid-md-7": "MuiGrid-grid-md-7",
                          "grid-md-8": "MuiGrid-grid-md-8",
                          "grid-md-9": "MuiGrid-grid-md-9",
                          "grid-md-auto": "MuiGrid-grid-md-auto",
                          "grid-md-true": "MuiGrid-grid-md-true",
                          "grid-sm-1": "MuiGrid-grid-sm-1",
                          "grid-sm-10": "MuiGrid-grid-sm-10",
                          "grid-sm-11": "MuiGrid-grid-sm-11",
                          "grid-sm-12": "MuiGrid-grid-sm-12",
                          "grid-sm-2": "MuiGrid-grid-sm-2",
                          "grid-sm-3": "MuiGrid-grid-sm-3",
                          "grid-sm-4": "MuiGrid-grid-sm-4",
                          "grid-sm-5": "MuiGrid-grid-sm-5",
                          "grid-sm-6": "MuiGrid-grid-sm-6",
                          "grid-sm-7": "MuiGrid-grid-sm-7",
                          "grid-sm-8": "MuiGrid-grid-sm-8",
                          "grid-sm-9": "MuiGrid-grid-sm-9",
                          "grid-sm-auto": "MuiGrid-grid-sm-auto",
                          "grid-sm-true": "MuiGrid-grid-sm-true",
                          "grid-xl-1": "MuiGrid-grid-xl-1",
                          "grid-xl-10": "MuiGrid-grid-xl-10",
                          "grid-xl-11": "MuiGrid-grid-xl-11",
                          "grid-xl-12": "MuiGrid-grid-xl-12",
                          "grid-xl-2": "MuiGrid-grid-xl-2",
                          "grid-xl-3": "MuiGrid-grid-xl-3",
                          "grid-xl-4": "MuiGrid-grid-xl-4",
                          "grid-xl-5": "MuiGrid-grid-xl-5",
                          "grid-xl-6": "MuiGrid-grid-xl-6",
                          "grid-xl-7": "MuiGrid-grid-xl-7",
                          "grid-xl-8": "MuiGrid-grid-xl-8",
                          "grid-xl-9": "MuiGrid-grid-xl-9",
                          "grid-xl-auto": "MuiGrid-grid-xl-auto",
                          "grid-xl-true": "MuiGrid-grid-xl-true",
                          "grid-xs-1": "MuiGrid-grid-xs-1",
                          "grid-xs-10": "MuiGrid-grid-xs-10",
                          "grid-xs-11": "MuiGrid-grid-xs-11",
                          "grid-xs-12": "MuiGrid-grid-xs-12",
                          "grid-xs-2": "MuiGrid-grid-xs-2",
                          "grid-xs-3": "MuiGrid-grid-xs-3",
                          "grid-xs-4": "MuiGrid-grid-xs-4",
                          "grid-xs-5": "MuiGrid-grid-xs-5",
                          "grid-xs-6": "MuiGrid-grid-xs-6",
                          "grid-xs-7": "MuiGrid-grid-xs-7",
                          "grid-xs-8": "MuiGrid-grid-xs-8",
                          "grid-xs-9": "MuiGrid-grid-xs-9",
                          "grid-xs-auto": "MuiGrid-grid-xs-auto",
                          "grid-xs-true": "MuiGrid-grid-xs-true",
                          "item": "MuiGrid-item",
                          "justify-xs-center": "MuiGrid-justify-xs-center",
                          "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
                          "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
                          "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
                          "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
                          "root": "MuiGrid-root",
                          "spacing-xs-0": "MuiGrid-spacing-xs-0",
                          "spacing-xs-1": "MuiGrid-spacing-xs-1",
                          "spacing-xs-10": "MuiGrid-spacing-xs-10",
                          "spacing-xs-2": "MuiGrid-spacing-xs-2",
                          "spacing-xs-3": "MuiGrid-spacing-xs-3",
                          "spacing-xs-4": "MuiGrid-spacing-xs-4",
                          "spacing-xs-5": "MuiGrid-spacing-xs-5",
                          "spacing-xs-6": "MuiGrid-spacing-xs-6",
                          "spacing-xs-7": "MuiGrid-spacing-xs-7",
                          "spacing-xs-8": "MuiGrid-spacing-xs-8",
                          "spacing-xs-9": "MuiGrid-spacing-xs-9",
                          "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                          "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                          "zeroMinWidth": "MuiGrid-zeroMinWidth",
                        }
                      }
                      container={true}
                      justify="flex-end"
                    >
                      <div
                        className="MuiGrid-root MuiGrid-container MuiGrid-justify-xs-flex-end"
                      >
                        <ContainedButton
                          className="makeStyles-button-690"
                          disabled={false}
                          onClick={[Function]}
                        >
                          <WithStyles(WithStyles(ForwardRef(Button)))
                            className="makeStyles-button-690"
                            color="secondary"
                            disabled={false}
                            onClick={[Function]}
                            variant="contained"
                          >
                            <WithStyles(ForwardRef(Button))
                              className="makeStyles-button-690"
                              classes={
                                Object {
                                  "root": "WithStyles(ForwardRef(Button))-root-710",
                                }
                              }
                              color="secondary"
                              disabled={false}
                              onClick={[Function]}
                              variant="contained"
                            >
                              <ForwardRef(Button)
                                className="makeStyles-button-690"
                                classes={
                                  Object {
                                    "colorInherit": "MuiButton-colorInherit",
                                    "contained": "MuiButton-contained",
                                    "containedPrimary": "MuiButton-containedPrimary",
                                    "containedSecondary": "MuiButton-containedSecondary",
                                    "containedSizeLarge": "MuiButton-containedSizeLarge",
                                    "containedSizeSmall": "MuiButton-containedSizeSmall",
                                    "disableElevation": "MuiButton-disableElevation",
                                    "disabled": "Mui-disabled",
                                    "endIcon": "MuiButton-endIcon",
                                    "focusVisible": "Mui-focusVisible",
                                    "fullWidth": "MuiButton-fullWidth",
                                    "iconSizeLarge": "MuiButton-iconSizeLarge",
                                    "iconSizeMedium": "MuiButton-iconSizeMedium",
                                    "iconSizeSmall": "MuiButton-iconSizeSmall",
                                    "label": "MuiButton-label",
                                    "outlined": "MuiButton-outlined",
                                    "outlinedPrimary": "MuiButton-outlinedPrimary",
                                    "outlinedSecondary": "MuiButton-outlinedSecondary",
                                    "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                                    "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                                    "root": "MuiButton-root WithStyles(ForwardRef(Button))-root-710",
                                    "sizeLarge": "MuiButton-sizeLarge",
                                    "sizeSmall": "MuiButton-sizeSmall",
                                    "startIcon": "MuiButton-startIcon",
                                    "text": "MuiButton-text",
                                    "textPrimary": "MuiButton-textPrimary",
                                    "textSecondary": "MuiButton-textSecondary",
                                    "textSizeLarge": "MuiButton-textSizeLarge",
                                    "textSizeSmall": "MuiButton-textSizeSmall",
                                  }
                                }
                                color="secondary"
                                disabled={false}
                                onClick={[Function]}
                                variant="contained"
                              >
                                <WithStyles(ForwardRef(ButtonBase))
                                  className="MuiButton-root WithStyles(ForwardRef(Button))-root-710 MuiButton-contained makeStyles-button-690 MuiButton-containedSecondary"
                                  component="button"
                                  disabled={false}
                                  focusRipple={true}
                                  focusVisibleClassName="Mui-focusVisible"
                                  onClick={[Function]}
                                  type="button"
                                >
                                  <ForwardRef(ButtonBase)
                                    className="MuiButton-root WithStyles(ForwardRef(Button))-root-710 MuiButton-contained makeStyles-button-690 MuiButton-containedSecondary"
                                    classes={
                                      Object {
                                        "disabled": "Mui-disabled",
                                        "focusVisible": "Mui-focusVisible",
                                        "root": "MuiButtonBase-root",
                                      }
                                    }
                                    component="button"
                                    disabled={false}
                                    focusRipple={true}
                                    focusVisibleClassName="Mui-focusVisible"
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <button
                                      className="MuiButtonBase-root MuiButton-root WithStyles(ForwardRef(Button))-root-710 MuiButton-contained makeStyles-button-690 MuiButton-containedSecondary"
                                      disabled={false}
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onDragLeave={[Function]}
                                      onFocus={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      onMouseDown={[Function]}
                                      onMouseLeave={[Function]}
                                      onMouseUp={[Function]}
                                      onTouchEnd={[Function]}
                                      onTouchMove={[Function]}
                                      onTouchStart={[Function]}
                                      tabIndex={0}
                                      type="button"
                                    >
                                      <span
                                        className="MuiButton-label"
                                      >
                                        Log in
                                      </span>
                                      <WithStyles(memo)
                                        center={false}
                                      >
                                        <ForwardRef(TouchRipple)
                                          center={false}
                                          classes={
                                            Object {
                                              "child": "MuiTouchRipple-child",
                                              "childLeaving": "MuiTouchRipple-childLeaving",
                                              "childPulsate": "MuiTouchRipple-childPulsate",
                                              "ripple": "MuiTouchRipple-ripple",
                                              "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                              "rippleVisible": "MuiTouchRipple-rippleVisible",
                                              "root": "MuiTouchRipple-root",
                                            }
                                          }
                                        >
                                          <span
                                            className="MuiTouchRipple-root"
                                          >
                                            <TransitionGroup
                                              childFactory={[Function]}
                                              component={null}
                                              exit={true}
                                            />
                                          </span>
                                        </ForwardRef(TouchRipple)>
                                      </WithStyles(memo)>
                                    </button>
                                  </ForwardRef(ButtonBase)>
                                </WithStyles(ForwardRef(ButtonBase))>
                              </ForwardRef(Button)>
                            </WithStyles(ForwardRef(Button))>
                          </WithStyles(WithStyles(ForwardRef(Button)))>
                        </ContainedButton>
                      </div>
                    </ForwardRef(Grid)>
                  </WithStyles(ForwardRef(Grid))>
                </form>
              </Form>
            </div>
          </Formik>
        </LoginForm>
      </div>
    </ThemeProvider>
  </MuiDecorator>
</WithChannel(MuiDecorator)>
`;

exports[`Storyshots Components|Forms Sign Up Form 1`] = `
<WithChannel(MuiDecorator)
  initData={
    Object {
      "themeInd": 0,
      "themes": Array [
        Object {
          "breakpoints": Object {
            "between": [Function],
            "down": [Function],
            "keys": Array [
              "xs",
              "sm",
              "md",
              "lg",
              "xl",
            ],
            "only": [Function],
            "up": [Function],
            "values": Object {
              "lg": 1280,
              "md": 1064,
              "sm": 600,
              "tablet": 834,
              "xl": 1400,
              "xs": 0,
            },
            "width": [Function],
          },
          "direction": "ltr",
          "mixins": Object {
            "gutters": [Function],
            "toolbar": Object {
              "@media (min-width:0px) and (orientation: landscape)": Object {
                "minHeight": 48,
              },
              "@media (min-width:600px)": Object {
                "minHeight": 64,
              },
              "minHeight": 56,
            },
          },
          "overrides": Object {},
          "palette": Object {
            "action": Object {
              "activatedOpacity": 0.12,
              "active": "rgba(0, 0, 0, 0.54)",
              "disabled": "rgba(0, 0, 0, 0.26)",
              "disabledBackground": "rgba(0, 0, 0, 0.12)",
              "disabledOpacity": 0.38,
              "focus": "rgba(0, 0, 0, 0.12)",
              "focusOpacity": 0.12,
              "hover": "rgba(0, 0, 0, 0.04)",
              "hoverOpacity": 0.04,
              "selected": "rgba(0, 0, 0, 0.08)",
              "selectedOpacity": 0.08,
            },
            "augmentColor": [Function],
            "background": Object {
              "default": "#fafafa",
              "paper": "#fff",
            },
            "common": Object {
              "black": "#000",
              "white": "#fff",
            },
            "contrastThreshold": 3,
            "divider": "rgba(0, 0, 0, 0.12)",
            "error": Object {
              "contrastText": "#fff",
              "dark": "rgb(155, 48, 26)",
              "light": "#E6735C",
              "main": "#DE4526",
            },
            "getContrastText": [Function],
            "grey": Object {
              "100": "#D2D5D9",
              "200": "#F9F9F9",
              "300": "#cccfd4",
              "400": "#C0C5C4",
              "50": "#FAFAFA",
              "500": "#848484",
              "600": "#C4C4C4",
              "700": "#616161",
              "800": "#424242",
              "900": "#212121",
              "A100": "#d5d5d5",
              "A200": "#aaaaaa",
              "A400": "#303030",
              "A700": "#616161",
            },
            "info": Object {
              "contrastText": "#b0ddc0",
              "dark": "#545555",
              "light": "#EFEFEF",
              "main": "#8f8f8f",
            },
            "primary": Object {
              "contrastText": "#000",
              "dark": "rgb(178, 178, 178)",
              "light": "#202020",
              "main": "#fff",
            },
            "secondary": Object {
              "contrastText": "#B9E1C7",
              "dark": "#7BC796",
              "light": "#DCF0E3",
              "main": "#4FB573",
            },
            "success": Object {
              "contrastText": "rgba(0, 0, 0, 0.87)",
              "dark": "#388e3c",
              "light": "#81c784",
              "main": "#4caf50",
            },
            "text": Object {
              "disabled": "rgba(0, 0, 0, 0.38)",
              "hint": "rgba(0, 0, 0, 0.38)",
              "primary": "rgba(0, 0, 0, 0.87)",
              "secondary": "rgba(0, 0, 0, 0.54)",
            },
            "tonalOffset": 0.2,
            "type": "light",
            "warning": Object {
              "contrastText": "rgba(0, 0, 0, 0.87)",
              "dark": "#f57c00",
              "light": "#ffb74d",
              "main": "#ff9800",
            },
          },
          "props": Object {
            "MuiTypography": Object {
              "variantMapping": Object {
                "body1": "p",
                "body2": "p",
                "h1": "h1",
                "h2": "h2",
                "h3": "h3",
                "h4": "h4",
                "h5": "h5",
                "h6": "h6",
                "subtitle1": "h2",
                "subtitle2": "h2",
              },
            },
          },
          "shadows": Array [
            "none",
            "0px 4px 10px rgba(0, 0, 0, 0.05)",
            "-4px 0px 10px rgba(0, 0, 0, 0.25)",
            "0px 0px 20px rgba(0, 0, 0, 0.25)",
            "0px 4px 10px rgba(0, 0, 0, 0.1)",
            "0px 0px 4px rgba(0, 0, 0, 0.05)",
            "0px 4px 10px rgba(0, 0, 0, 0.1)",
            "0px -4px 10px rgba(0, 0, 0, 0.1)",
            "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
            "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
            "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
            "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
            "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
            "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
            "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
            "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
            "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
            "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
            "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
            "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
            "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
          ],
          "shape": Object {
            "borderRadius": 4,
          },
          "spacing": [Function],
          "transitions": Object {
            "create": [Function],
            "duration": Object {
              "complex": 375,
              "enteringScreen": 225,
              "leavingScreen": 195,
              "short": 250,
              "shorter": 200,
              "shortest": 150,
              "standard": 300,
            },
            "easing": Object {
              "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
              "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
              "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
              "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
            },
            "getAutoHeightDuration": [Function],
          },
          "typography": Object {
            "body1": Object {
              "@media (max-width:599.95px)": Object {
                "fontSize": "0.875rem",
              },
              "@media (min-width:600px)": Object {
                "fontSize": "1rem",
              },
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "1rem",
              "fontWeight": 400,
              "lineHeight": 1.5,
            },
            "body2": Object {
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 400,
              "lineHeight": 1.43,
            },
            "button": Object {
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 500,
              "lineHeight": 1.75,
              "textTransform": "uppercase",
            },
            "caption": Object {
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "0.75rem",
              "fontWeight": 400,
              "lineHeight": 1.66,
            },
            "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
            "fontSize": 14,
            "fontWeightBold": 700,
            "fontWeightLight": 300,
            "fontWeightMedium": 500,
            "fontWeightRegular": 400,
            "h1": Object {
              "@media (max-width:599.95px)": Object {
                "fontSize": "2rem",
              },
              "@media (min-width:600px)": Object {
                "fontSize": "3rem",
              },
              "fontFamily": "\\"Muli\\",-apple-system,sans-serif",
              "fontSize": "6rem",
              "fontWeight": 300,
              "lineHeight": 1.167,
            },
            "h2": Object {
              "@media (max-width:599.95px)": Object {
                "fontSize": "1.5rem",
              },
              "@media (min-width:600px)": Object {
                "fontSize": "2.375rem",
              },
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "3.75rem",
              "fontWeight": 300,
              "lineHeight": 1.2,
            },
            "h3": Object {
              "@media (max-width:599.95px)": Object {
                "fontSize": "1.5rem",
              },
              "@media (min-width:600px)": Object {
                "fontSize": "2rem",
              },
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "3rem",
              "fontWeight": 400,
              "lineHeight": 1.167,
            },
            "h4": Object {
              "@media (max-width:599.95px)": Object {
                "fontSize": "1.3125rem",
              },
              "@media (min-width:600px)": Object {
                "fontSize": "1.5rem",
              },
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "2.125rem",
              "fontWeight": 400,
              "lineHeight": 1.235,
            },
            "h5": Object {
              "@media (max-width:599.95px)": Object {
                "fontSize": "1.125rem",
              },
              "@media (min-width:600px)": Object {
                "fontSize": "1.3125rem",
              },
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "1.5rem",
              "fontWeight": 400,
              "lineHeight": 1.334,
            },
            "h6": Object {
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "1.125rem",
              "fontWeight": 500,
              "lineHeight": 1.6,
            },
            "htmlFontSize": 16,
            "overline": Object {
              "fontFamily": "PT Mono,\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "0.75rem",
              "fontWeight": 400,
              "lineHeight": 2.66,
              "textTransform": "uppercase",
            },
            "pxToRem": [Function],
            "round": [Function],
            "subtitle1": Object {
              "@media (max-width:599.95px)": Object {
                "fontSize": "2rem",
              },
              "@media (min-width:600px)": Object {
                "fontSize": "2.375rem",
              },
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "1rem",
              "fontWeight": 400,
              "lineHeight": 1.75,
            },
            "subtitle2": Object {
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 500,
              "lineHeight": 1.57,
            },
          },
          "zIndex": Object {
            "appBar": 1100,
            "drawer": 1200,
            "mobileStepper": 1000,
            "modal": 1300,
            "snackbar": 1400,
            "speedDial": 1050,
            "tooltip": 1500,
          },
        },
      ],
    }
  }
  story={
    <LoginForm
      link="/"
      privacyLink="https://www.regen.network/privacy-policy/"
      signup={true}
      submit={[Function]}
      termsLink="https://www.regen.network/terms-service/"
    />
  }
>
  <MuiDecorator
    data={
      Object {
        "themeInd": 0,
        "themes": Array [
          Object {
            "breakpoints": Object {
              "between": [Function],
              "down": [Function],
              "keys": Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ],
              "only": [Function],
              "up": [Function],
              "values": Object {
                "lg": 1280,
                "md": 1064,
                "sm": 600,
                "tablet": 834,
                "xl": 1400,
                "xs": 0,
              },
              "width": [Function],
            },
            "direction": "ltr",
            "mixins": Object {
              "gutters": [Function],
              "toolbar": Object {
                "@media (min-width:0px) and (orientation: landscape)": Object {
                  "minHeight": 48,
                },
                "@media (min-width:600px)": Object {
                  "minHeight": 64,
                },
                "minHeight": 56,
              },
            },
            "overrides": Object {},
            "palette": Object {
              "action": Object {
                "activatedOpacity": 0.12,
                "active": "rgba(0, 0, 0, 0.54)",
                "disabled": "rgba(0, 0, 0, 0.26)",
                "disabledBackground": "rgba(0, 0, 0, 0.12)",
                "disabledOpacity": 0.38,
                "focus": "rgba(0, 0, 0, 0.12)",
                "focusOpacity": 0.12,
                "hover": "rgba(0, 0, 0, 0.04)",
                "hoverOpacity": 0.04,
                "selected": "rgba(0, 0, 0, 0.08)",
                "selectedOpacity": 0.08,
              },
              "augmentColor": [Function],
              "background": Object {
                "default": "#fafafa",
                "paper": "#fff",
              },
              "common": Object {
                "black": "#000",
                "white": "#fff",
              },
              "contrastThreshold": 3,
              "divider": "rgba(0, 0, 0, 0.12)",
              "error": Object {
                "contrastText": "#fff",
                "dark": "rgb(155, 48, 26)",
                "light": "#E6735C",
                "main": "#DE4526",
              },
              "getContrastText": [Function],
              "grey": Object {
                "100": "#D2D5D9",
                "200": "#F9F9F9",
                "300": "#cccfd4",
                "400": "#C0C5C4",
                "50": "#FAFAFA",
                "500": "#848484",
                "600": "#C4C4C4",
                "700": "#616161",
                "800": "#424242",
                "900": "#212121",
                "A100": "#d5d5d5",
                "A200": "#aaaaaa",
                "A400": "#303030",
                "A700": "#616161",
              },
              "info": Object {
                "contrastText": "#b0ddc0",
                "dark": "#545555",
                "light": "#EFEFEF",
                "main": "#8f8f8f",
              },
              "primary": Object {
                "contrastText": "#000",
                "dark": "rgb(178, 178, 178)",
                "light": "#202020",
                "main": "#fff",
              },
              "secondary": Object {
                "contrastText": "#B9E1C7",
                "dark": "#7BC796",
                "light": "#DCF0E3",
                "main": "#4FB573",
              },
              "success": Object {
                "contrastText": "rgba(0, 0, 0, 0.87)",
                "dark": "#388e3c",
                "light": "#81c784",
                "main": "#4caf50",
              },
              "text": Object {
                "disabled": "rgba(0, 0, 0, 0.38)",
                "hint": "rgba(0, 0, 0, 0.38)",
                "primary": "rgba(0, 0, 0, 0.87)",
                "secondary": "rgba(0, 0, 0, 0.54)",
              },
              "tonalOffset": 0.2,
              "type": "light",
              "warning": Object {
                "contrastText": "rgba(0, 0, 0, 0.87)",
                "dark": "#f57c00",
                "light": "#ffb74d",
                "main": "#ff9800",
              },
            },
            "props": Object {
              "MuiTypography": Object {
                "variantMapping": Object {
                  "body1": "p",
                  "body2": "p",
                  "h1": "h1",
                  "h2": "h2",
                  "h3": "h3",
                  "h4": "h4",
                  "h5": "h5",
                  "h6": "h6",
                  "subtitle1": "h2",
                  "subtitle2": "h2",
                },
              },
            },
            "shadows": Array [
              "none",
              "0px 4px 10px rgba(0, 0, 0, 0.05)",
              "-4px 0px 10px rgba(0, 0, 0, 0.25)",
              "0px 0px 20px rgba(0, 0, 0, 0.25)",
              "0px 4px 10px rgba(0, 0, 0, 0.1)",
              "0px 0px 4px rgba(0, 0, 0, 0.05)",
              "0px 4px 10px rgba(0, 0, 0, 0.1)",
              "0px -4px 10px rgba(0, 0, 0, 0.1)",
              "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
              "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
              "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
              "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
              "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
              "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
              "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
              "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
              "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
              "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
              "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
              "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
              "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
            ],
            "shape": Object {
              "borderRadius": 4,
            },
            "spacing": [Function],
            "transitions": Object {
              "create": [Function],
              "duration": Object {
                "complex": 375,
                "enteringScreen": 225,
                "leavingScreen": 195,
                "short": 250,
                "shorter": 200,
                "shortest": 150,
                "standard": 300,
              },
              "easing": Object {
                "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
              },
              "getAutoHeightDuration": [Function],
            },
            "typography": Object {
              "body1": Object {
                "@media (max-width:599.95px)": Object {
                  "fontSize": "0.875rem",
                },
                "@media (min-width:600px)": Object {
                  "fontSize": "1rem",
                },
                "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                "fontSize": "1rem",
                "fontWeight": 400,
                "lineHeight": 1.5,
              },
              "body2": Object {
                "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 400,
                "lineHeight": 1.43,
              },
              "button": Object {
                "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 500,
                "lineHeight": 1.75,
                "textTransform": "uppercase",
              },
              "caption": Object {
                "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                "fontSize": "0.75rem",
                "fontWeight": 400,
                "lineHeight": 1.66,
              },
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": 14,
              "fontWeightBold": 700,
              "fontWeightLight": 300,
              "fontWeightMedium": 500,
              "fontWeightRegular": 400,
              "h1": Object {
                "@media (max-width:599.95px)": Object {
                  "fontSize": "2rem",
                },
                "@media (min-width:600px)": Object {
                  "fontSize": "3rem",
                },
                "fontFamily": "\\"Muli\\",-apple-system,sans-serif",
                "fontSize": "6rem",
                "fontWeight": 300,
                "lineHeight": 1.167,
              },
              "h2": Object {
                "@media (max-width:599.95px)": Object {
                  "fontSize": "1.5rem",
                },
                "@media (min-width:600px)": Object {
                  "fontSize": "2.375rem",
                },
                "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                "fontSize": "3.75rem",
                "fontWeight": 300,
                "lineHeight": 1.2,
              },
              "h3": Object {
                "@media (max-width:599.95px)": Object {
                  "fontSize": "1.5rem",
                },
                "@media (min-width:600px)": Object {
                  "fontSize": "2rem",
                },
                "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                "fontSize": "3rem",
                "fontWeight": 400,
                "lineHeight": 1.167,
              },
              "h4": Object {
                "@media (max-width:599.95px)": Object {
                  "fontSize": "1.3125rem",
                },
                "@media (min-width:600px)": Object {
                  "fontSize": "1.5rem",
                },
                "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                "fontSize": "2.125rem",
                "fontWeight": 400,
                "lineHeight": 1.235,
              },
              "h5": Object {
                "@media (max-width:599.95px)": Object {
                  "fontSize": "1.125rem",
                },
                "@media (min-width:600px)": Object {
                  "fontSize": "1.3125rem",
                },
                "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                "fontSize": "1.5rem",
                "fontWeight": 400,
                "lineHeight": 1.334,
              },
              "h6": Object {
                "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                "fontSize": "1.125rem",
                "fontWeight": 500,
                "lineHeight": 1.6,
              },
              "htmlFontSize": 16,
              "overline": Object {
                "fontFamily": "PT Mono,\\"Lato\\",-apple-system,sans-serif",
                "fontSize": "0.75rem",
                "fontWeight": 400,
                "lineHeight": 2.66,
                "textTransform": "uppercase",
              },
              "pxToRem": [Function],
              "round": [Function],
              "subtitle1": Object {
                "@media (max-width:599.95px)": Object {
                  "fontSize": "2rem",
                },
                "@media (min-width:600px)": Object {
                  "fontSize": "2.375rem",
                },
                "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                "fontSize": "1rem",
                "fontWeight": 400,
                "lineHeight": 1.75,
              },
              "subtitle2": Object {
                "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 500,
                "lineHeight": 1.57,
              },
            },
            "zIndex": Object {
              "appBar": 1100,
              "drawer": 1200,
              "mobileStepper": 1000,
              "modal": 1300,
              "snackbar": 1400,
              "speedDial": 1050,
              "tooltip": 1500,
            },
          },
        ],
      }
    }
    sendData={[Function]}
    store={
      ChannelStore {
        "channel": Channel {
          "events": Object {
            "docsRendered": Array [
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
            ],
            "registerSubscription": Array [
              [Function],
            ],
            "sm/storybook-addon-material-ui/material-event/back": Array [
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
            ],
            "sm/storybook-addon-material-ui/material-event/init": Array [
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
            ],
            "storyRendered": Array [
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
            ],
          },
          "isAsync": false,
          "sender": "2795b43315214",
          "transport": Object {
            "send": [Function],
            "setHandler": [Function],
          },
        },
        "connect": [Function],
        "disconnect": [Function],
        "emit": [Function],
        "init": [Function],
        "name": "store",
        "onConnected": [Function],
        "onConnectedFn": [Function],
        "onData": [Function],
        "onDataChannel": [Function],
        "onInitChannel": [Function],
        "removeData": [Function],
        "removeInit": [Function],
        "send": [Function],
        "sendInit": [Function],
        "store": Object {
          "themeInd": 0,
          "themes": Array [
            Object {
              "breakpoints": Object {
                "between": [Function],
                "down": [Function],
                "keys": Array [
                  "xs",
                  "sm",
                  "md",
                  "lg",
                  "xl",
                ],
                "only": [Function],
                "up": [Function],
                "values": Object {
                  "lg": 1280,
                  "md": 1064,
                  "sm": 600,
                  "tablet": 834,
                  "xl": 1400,
                  "xs": 0,
                },
                "width": [Function],
              },
              "direction": "ltr",
              "mixins": Object {
                "gutters": [Function],
                "toolbar": Object {
                  "@media (min-width:0px) and (orientation: landscape)": Object {
                    "minHeight": 48,
                  },
                  "@media (min-width:600px)": Object {
                    "minHeight": 64,
                  },
                  "minHeight": 56,
                },
              },
              "overrides": Object {},
              "palette": Object {
                "action": Object {
                  "activatedOpacity": 0.12,
                  "active": "rgba(0, 0, 0, 0.54)",
                  "disabled": "rgba(0, 0, 0, 0.26)",
                  "disabledBackground": "rgba(0, 0, 0, 0.12)",
                  "disabledOpacity": 0.38,
                  "focus": "rgba(0, 0, 0, 0.12)",
                  "focusOpacity": 0.12,
                  "hover": "rgba(0, 0, 0, 0.04)",
                  "hoverOpacity": 0.04,
                  "selected": "rgba(0, 0, 0, 0.08)",
                  "selectedOpacity": 0.08,
                },
                "augmentColor": [Function],
                "background": Object {
                  "default": "#fafafa",
                  "paper": "#fff",
                },
                "common": Object {
                  "black": "#000",
                  "white": "#fff",
                },
                "contrastThreshold": 3,
                "divider": "rgba(0, 0, 0, 0.12)",
                "error": Object {
                  "contrastText": "#fff",
                  "dark": "rgb(155, 48, 26)",
                  "light": "#E6735C",
                  "main": "#DE4526",
                },
                "getContrastText": [Function],
                "grey": Object {
                  "100": "#D2D5D9",
                  "200": "#F9F9F9",
                  "300": "#cccfd4",
                  "400": "#C0C5C4",
                  "50": "#FAFAFA",
                  "500": "#848484",
                  "600": "#C4C4C4",
                  "700": "#616161",
                  "800": "#424242",
                  "900": "#212121",
                  "A100": "#d5d5d5",
                  "A200": "#aaaaaa",
                  "A400": "#303030",
                  "A700": "#616161",
                },
                "info": Object {
                  "contrastText": "#b0ddc0",
                  "dark": "#545555",
                  "light": "#EFEFEF",
                  "main": "#8f8f8f",
                },
                "primary": Object {
                  "contrastText": "#000",
                  "dark": "rgb(178, 178, 178)",
                  "light": "#202020",
                  "main": "#fff",
                },
                "secondary": Object {
                  "contrastText": "#B9E1C7",
                  "dark": "#7BC796",
                  "light": "#DCF0E3",
                  "main": "#4FB573",
                },
                "success": Object {
                  "contrastText": "rgba(0, 0, 0, 0.87)",
                  "dark": "#388e3c",
                  "light": "#81c784",
                  "main": "#4caf50",
                },
                "text": Object {
                  "disabled": "rgba(0, 0, 0, 0.38)",
                  "hint": "rgba(0, 0, 0, 0.38)",
                  "primary": "rgba(0, 0, 0, 0.87)",
                  "secondary": "rgba(0, 0, 0, 0.54)",
                },
                "tonalOffset": 0.2,
                "type": "light",
                "warning": Object {
                  "contrastText": "rgba(0, 0, 0, 0.87)",
                  "dark": "#f57c00",
                  "light": "#ffb74d",
                  "main": "#ff9800",
                },
              },
              "props": Object {
                "MuiTypography": Object {
                  "variantMapping": Object {
                    "body1": "p",
                    "body2": "p",
                    "h1": "h1",
                    "h2": "h2",
                    "h3": "h3",
                    "h4": "h4",
                    "h5": "h5",
                    "h6": "h6",
                    "subtitle1": "h2",
                    "subtitle2": "h2",
                  },
                },
              },
              "shadows": Array [
                "none",
                "0px 4px 10px rgba(0, 0, 0, 0.05)",
                "-4px 0px 10px rgba(0, 0, 0, 0.25)",
                "0px 0px 20px rgba(0, 0, 0, 0.25)",
                "0px 4px 10px rgba(0, 0, 0, 0.1)",
                "0px 0px 4px rgba(0, 0, 0, 0.05)",
                "0px 4px 10px rgba(0, 0, 0, 0.1)",
                "0px -4px 10px rgba(0, 0, 0, 0.1)",
                "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
              ],
              "shape": Object {
                "borderRadius": 4,
              },
              "spacing": [Function],
              "transitions": Object {
                "create": [Function],
                "duration": Object {
                  "complex": 375,
                  "enteringScreen": 225,
                  "leavingScreen": 195,
                  "short": 250,
                  "shorter": 200,
                  "shortest": 150,
                  "standard": 300,
                },
                "easing": Object {
                  "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                  "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                  "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                  "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                },
                "getAutoHeightDuration": [Function],
              },
              "typography": Object {
                "body1": Object {
                  "@media (max-width:599.95px)": Object {
                    "fontSize": "0.875rem",
                  },
                  "@media (min-width:600px)": Object {
                    "fontSize": "1rem",
                  },
                  "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                  "fontSize": "1rem",
                  "fontWeight": 400,
                  "lineHeight": 1.5,
                },
                "body2": Object {
                  "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                  "fontSize": "0.875rem",
                  "fontWeight": 400,
                  "lineHeight": 1.43,
                },
                "button": Object {
                  "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                  "fontSize": "0.875rem",
                  "fontWeight": 500,
                  "lineHeight": 1.75,
                  "textTransform": "uppercase",
                },
                "caption": Object {
                  "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                  "fontSize": "0.75rem",
                  "fontWeight": 400,
                  "lineHeight": 1.66,
                },
                "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                "fontSize": 14,
                "fontWeightBold": 700,
                "fontWeightLight": 300,
                "fontWeightMedium": 500,
                "fontWeightRegular": 400,
                "h1": Object {
                  "@media (max-width:599.95px)": Object {
                    "fontSize": "2rem",
                  },
                  "@media (min-width:600px)": Object {
                    "fontSize": "3rem",
                  },
                  "fontFamily": "\\"Muli\\",-apple-system,sans-serif",
                  "fontSize": "6rem",
                  "fontWeight": 300,
                  "lineHeight": 1.167,
                },
                "h2": Object {
                  "@media (max-width:599.95px)": Object {
                    "fontSize": "1.5rem",
                  },
                  "@media (min-width:600px)": Object {
                    "fontSize": "2.375rem",
                  },
                  "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                  "fontSize": "3.75rem",
                  "fontWeight": 300,
                  "lineHeight": 1.2,
                },
                "h3": Object {
                  "@media (max-width:599.95px)": Object {
                    "fontSize": "1.5rem",
                  },
                  "@media (min-width:600px)": Object {
                    "fontSize": "2rem",
                  },
                  "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                  "fontSize": "3rem",
                  "fontWeight": 400,
                  "lineHeight": 1.167,
                },
                "h4": Object {
                  "@media (max-width:599.95px)": Object {
                    "fontSize": "1.3125rem",
                  },
                  "@media (min-width:600px)": Object {
                    "fontSize": "1.5rem",
                  },
                  "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                  "fontSize": "2.125rem",
                  "fontWeight": 400,
                  "lineHeight": 1.235,
                },
                "h5": Object {
                  "@media (max-width:599.95px)": Object {
                    "fontSize": "1.125rem",
                  },
                  "@media (min-width:600px)": Object {
                    "fontSize": "1.3125rem",
                  },
                  "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                  "fontSize": "1.5rem",
                  "fontWeight": 400,
                  "lineHeight": 1.334,
                },
                "h6": Object {
                  "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                  "fontSize": "1.125rem",
                  "fontWeight": 500,
                  "lineHeight": 1.6,
                },
                "htmlFontSize": 16,
                "overline": Object {
                  "fontFamily": "PT Mono,\\"Lato\\",-apple-system,sans-serif",
                  "fontSize": "0.75rem",
                  "fontWeight": 400,
                  "lineHeight": 2.66,
                  "textTransform": "uppercase",
                },
                "pxToRem": [Function],
                "round": [Function],
                "subtitle1": Object {
                  "@media (max-width:599.95px)": Object {
                    "fontSize": "2rem",
                  },
                  "@media (min-width:600px)": Object {
                    "fontSize": "2.375rem",
                  },
                  "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                  "fontSize": "1rem",
                  "fontWeight": 400,
                  "lineHeight": 1.75,
                },
                "subtitle2": Object {
                  "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                  "fontSize": "0.875rem",
                  "fontWeight": 500,
                  "lineHeight": 1.57,
                },
              },
              "zIndex": Object {
                "appBar": 1100,
                "drawer": 1200,
                "mobileStepper": 1000,
                "modal": 1300,
                "snackbar": 1400,
                "speedDial": 1050,
                "tooltip": 1500,
              },
            },
          ],
        },
        "subscriber": [Function],
      }
    }
    story={
      <LoginForm
        link="/"
        privacyLink="https://www.regen.network/privacy-policy/"
        signup={true}
        submit={[Function]}
        termsLink="https://www.regen.network/terms-service/"
      />
    }
  >
    <ThemeProvider
      theme={
        Object {
          "breakpoints": Object {
            "between": [Function],
            "down": [Function],
            "keys": Array [
              "xs",
              "sm",
              "md",
              "lg",
              "xl",
            ],
            "only": [Function],
            "up": [Function],
            "values": Object {
              "lg": 1280,
              "md": 1064,
              "sm": 600,
              "tablet": 834,
              "xl": 1400,
              "xs": 0,
            },
            "width": [Function],
          },
          "direction": "ltr",
          "mixins": Object {
            "gutters": [Function],
            "toolbar": Object {
              "@media (min-width:0px) and (orientation: landscape)": Object {
                "minHeight": 48,
              },
              "@media (min-width:600px)": Object {
                "minHeight": 64,
              },
              "minHeight": 56,
            },
          },
          "overrides": Object {},
          "palette": Object {
            "action": Object {
              "activatedOpacity": 0.12,
              "active": "rgba(0, 0, 0, 0.54)",
              "disabled": "rgba(0, 0, 0, 0.26)",
              "disabledBackground": "rgba(0, 0, 0, 0.12)",
              "disabledOpacity": 0.38,
              "focus": "rgba(0, 0, 0, 0.12)",
              "focusOpacity": 0.12,
              "hover": "rgba(0, 0, 0, 0.04)",
              "hoverOpacity": 0.04,
              "selected": "rgba(0, 0, 0, 0.08)",
              "selectedOpacity": 0.08,
            },
            "augmentColor": [Function],
            "background": Object {
              "default": "#fafafa",
              "paper": "#fff",
            },
            "common": Object {
              "black": "#000",
              "white": "#fff",
            },
            "contrastThreshold": 3,
            "divider": "rgba(0, 0, 0, 0.12)",
            "error": Object {
              "contrastText": "#fff",
              "dark": "rgb(155, 48, 26)",
              "light": "#E6735C",
              "main": "#DE4526",
            },
            "getContrastText": [Function],
            "grey": Object {
              "100": "#D2D5D9",
              "200": "#F9F9F9",
              "300": "#cccfd4",
              "400": "#C0C5C4",
              "50": "#FAFAFA",
              "500": "#848484",
              "600": "#C4C4C4",
              "700": "#616161",
              "800": "#424242",
              "900": "#212121",
              "A100": "#d5d5d5",
              "A200": "#aaaaaa",
              "A400": "#303030",
              "A700": "#616161",
            },
            "info": Object {
              "contrastText": "#b0ddc0",
              "dark": "#545555",
              "light": "#EFEFEF",
              "main": "#8f8f8f",
            },
            "primary": Object {
              "contrastText": "#000",
              "dark": "rgb(178, 178, 178)",
              "light": "#202020",
              "main": "#fff",
            },
            "secondary": Object {
              "contrastText": "#B9E1C7",
              "dark": "#7BC796",
              "light": "#DCF0E3",
              "main": "#4FB573",
            },
            "success": Object {
              "contrastText": "rgba(0, 0, 0, 0.87)",
              "dark": "#388e3c",
              "light": "#81c784",
              "main": "#4caf50",
            },
            "text": Object {
              "disabled": "rgba(0, 0, 0, 0.38)",
              "hint": "rgba(0, 0, 0, 0.38)",
              "primary": "rgba(0, 0, 0, 0.87)",
              "secondary": "rgba(0, 0, 0, 0.54)",
            },
            "tonalOffset": 0.2,
            "type": "light",
            "warning": Object {
              "contrastText": "rgba(0, 0, 0, 0.87)",
              "dark": "#f57c00",
              "light": "#ffb74d",
              "main": "#ff9800",
            },
          },
          "props": Object {
            "MuiTypography": Object {
              "variantMapping": Object {
                "body1": "p",
                "body2": "p",
                "h1": "h1",
                "h2": "h2",
                "h3": "h3",
                "h4": "h4",
                "h5": "h5",
                "h6": "h6",
                "subtitle1": "h2",
                "subtitle2": "h2",
              },
            },
          },
          "shadows": Array [
            "none",
            "0px 4px 10px rgba(0, 0, 0, 0.05)",
            "-4px 0px 10px rgba(0, 0, 0, 0.25)",
            "0px 0px 20px rgba(0, 0, 0, 0.25)",
            "0px 4px 10px rgba(0, 0, 0, 0.1)",
            "0px 0px 4px rgba(0, 0, 0, 0.05)",
            "0px 4px 10px rgba(0, 0, 0, 0.1)",
            "0px -4px 10px rgba(0, 0, 0, 0.1)",
            "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
            "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
            "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
            "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
            "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
            "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
            "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
            "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
            "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
            "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
            "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
            "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
            "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
          ],
          "shape": Object {
            "borderRadius": 4,
          },
          "spacing": [Function],
          "transitions": Object {
            "create": [Function],
            "duration": Object {
              "complex": 375,
              "enteringScreen": 225,
              "leavingScreen": 195,
              "short": 250,
              "shorter": 200,
              "shortest": 150,
              "standard": 300,
            },
            "easing": Object {
              "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
              "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
              "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
              "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
            },
            "getAutoHeightDuration": [Function],
          },
          "typography": Object {
            "body1": Object {
              "@media (max-width:599.95px)": Object {
                "fontSize": "0.875rem",
              },
              "@media (min-width:600px)": Object {
                "fontSize": "1rem",
              },
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "1rem",
              "fontWeight": 400,
              "lineHeight": 1.5,
            },
            "body2": Object {
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 400,
              "lineHeight": 1.43,
            },
            "button": Object {
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 500,
              "lineHeight": 1.75,
              "textTransform": "uppercase",
            },
            "caption": Object {
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "0.75rem",
              "fontWeight": 400,
              "lineHeight": 1.66,
            },
            "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
            "fontSize": 14,
            "fontWeightBold": 700,
            "fontWeightLight": 300,
            "fontWeightMedium": 500,
            "fontWeightRegular": 400,
            "h1": Object {
              "@media (max-width:599.95px)": Object {
                "fontSize": "2rem",
              },
              "@media (min-width:600px)": Object {
                "fontSize": "3rem",
              },
              "fontFamily": "\\"Muli\\",-apple-system,sans-serif",
              "fontSize": "6rem",
              "fontWeight": 300,
              "lineHeight": 1.167,
            },
            "h2": Object {
              "@media (max-width:599.95px)": Object {
                "fontSize": "1.5rem",
              },
              "@media (min-width:600px)": Object {
                "fontSize": "2.375rem",
              },
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "3.75rem",
              "fontWeight": 300,
              "lineHeight": 1.2,
            },
            "h3": Object {
              "@media (max-width:599.95px)": Object {
                "fontSize": "1.5rem",
              },
              "@media (min-width:600px)": Object {
                "fontSize": "2rem",
              },
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "3rem",
              "fontWeight": 400,
              "lineHeight": 1.167,
            },
            "h4": Object {
              "@media (max-width:599.95px)": Object {
                "fontSize": "1.3125rem",
              },
              "@media (min-width:600px)": Object {
                "fontSize": "1.5rem",
              },
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "2.125rem",
              "fontWeight": 400,
              "lineHeight": 1.235,
            },
            "h5": Object {
              "@media (max-width:599.95px)": Object {
                "fontSize": "1.125rem",
              },
              "@media (min-width:600px)": Object {
                "fontSize": "1.3125rem",
              },
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "1.5rem",
              "fontWeight": 400,
              "lineHeight": 1.334,
            },
            "h6": Object {
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "1.125rem",
              "fontWeight": 500,
              "lineHeight": 1.6,
            },
            "htmlFontSize": 16,
            "overline": Object {
              "fontFamily": "PT Mono,\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "0.75rem",
              "fontWeight": 400,
              "lineHeight": 2.66,
              "textTransform": "uppercase",
            },
            "pxToRem": [Function],
            "round": [Function],
            "subtitle1": Object {
              "@media (max-width:599.95px)": Object {
                "fontSize": "2rem",
              },
              "@media (min-width:600px)": Object {
                "fontSize": "2.375rem",
              },
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "1rem",
              "fontWeight": 400,
              "lineHeight": 1.75,
            },
            "subtitle2": Object {
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 500,
              "lineHeight": 1.57,
            },
          },
          "zIndex": Object {
            "appBar": 1100,
            "drawer": 1200,
            "mobileStepper": 1000,
            "modal": 1300,
            "snackbar": 1400,
            "speedDial": 1050,
            "tooltip": 1500,
          },
          Symbol(mui.nested): false,
        }
      }
    >
      <div>
        <LoginForm
          link="/"
          privacyLink="https://www.regen.network/privacy-policy/"
          signup={true}
          submit={[Function]}
          termsLink="https://www.regen.network/terms-service/"
        >
          <Formik
            initialValues={
              Object {
                "email": "",
                "password": "",
                "privacy": false,
                "recaptcha": undefined,
                "staySigned": false,
                "updates": false,
              }
            }
            onSubmit={[Function]}
            validate={[Function]}
          >
            <div>
              <Form>
                <form
                  action="#"
                  onReset={[Function]}
                  onSubmit={[Function]}
                >
                  <OnBoardingCard>
                    <RegenCard
                      className="makeStyles-root-643"
                    >
                      <WithStyles(ForwardRef(Card))
                        className="makeStyles-root-644 makeStyles-root-645 makeStyles-root-643"
                        elevation={0}
                      >
                        <ForwardRef(Card)
                          className="makeStyles-root-644 makeStyles-root-645 makeStyles-root-643"
                          classes={
                            Object {
                              "root": "MuiCard-root",
                            }
                          }
                          elevation={0}
                        >
                          <WithStyles(ForwardRef(Paper))
                            className="MuiCard-root makeStyles-root-644 makeStyles-root-645 makeStyles-root-643"
                            elevation={0}
                          >
                            <ForwardRef(Paper)
                              className="MuiCard-root makeStyles-root-644 makeStyles-root-645 makeStyles-root-643"
                              classes={
                                Object {
                                  "elevation0": "MuiPaper-elevation0",
                                  "elevation1": "MuiPaper-elevation1",
                                  "elevation10": "MuiPaper-elevation10",
                                  "elevation11": "MuiPaper-elevation11",
                                  "elevation12": "MuiPaper-elevation12",
                                  "elevation13": "MuiPaper-elevation13",
                                  "elevation14": "MuiPaper-elevation14",
                                  "elevation15": "MuiPaper-elevation15",
                                  "elevation16": "MuiPaper-elevation16",
                                  "elevation17": "MuiPaper-elevation17",
                                  "elevation18": "MuiPaper-elevation18",
                                  "elevation19": "MuiPaper-elevation19",
                                  "elevation2": "MuiPaper-elevation2",
                                  "elevation20": "MuiPaper-elevation20",
                                  "elevation21": "MuiPaper-elevation21",
                                  "elevation22": "MuiPaper-elevation22",
                                  "elevation23": "MuiPaper-elevation23",
                                  "elevation24": "MuiPaper-elevation24",
                                  "elevation3": "MuiPaper-elevation3",
                                  "elevation4": "MuiPaper-elevation4",
                                  "elevation5": "MuiPaper-elevation5",
                                  "elevation6": "MuiPaper-elevation6",
                                  "elevation7": "MuiPaper-elevation7",
                                  "elevation8": "MuiPaper-elevation8",
                                  "elevation9": "MuiPaper-elevation9",
                                  "outlined": "MuiPaper-outlined",
                                  "root": "MuiPaper-root",
                                  "rounded": "MuiPaper-rounded",
                                }
                              }
                              elevation={0}
                            >
                              <div
                                className="MuiPaper-root MuiCard-root makeStyles-root-644 makeStyles-root-645 makeStyles-root-643 MuiPaper-elevation0 MuiPaper-rounded"
                              >
                                <Description
                                  className="makeStyles-description-637"
                                >
                                  <WithStyles(ForwardRef(Typography))
                                    className="makeStyles-root-646 makeStyles-root-647 makeStyles-description-637"
                                    component="div"
                                  >
                                    <ForwardRef(Typography)
                                      className="makeStyles-root-646 makeStyles-root-647 makeStyles-description-637"
                                      classes={
                                        Object {
                                          "alignCenter": "MuiTypography-alignCenter",
                                          "alignJustify": "MuiTypography-alignJustify",
                                          "alignLeft": "MuiTypography-alignLeft",
                                          "alignRight": "MuiTypography-alignRight",
                                          "body1": "MuiTypography-body1",
                                          "body2": "MuiTypography-body2",
                                          "button": "MuiTypography-button",
                                          "caption": "MuiTypography-caption",
                                          "colorError": "MuiTypography-colorError",
                                          "colorInherit": "MuiTypography-colorInherit",
                                          "colorPrimary": "MuiTypography-colorPrimary",
                                          "colorSecondary": "MuiTypography-colorSecondary",
                                          "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                          "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                          "displayBlock": "MuiTypography-displayBlock",
                                          "displayInline": "MuiTypography-displayInline",
                                          "gutterBottom": "MuiTypography-gutterBottom",
                                          "h1": "MuiTypography-h1",
                                          "h2": "MuiTypography-h2",
                                          "h3": "MuiTypography-h3",
                                          "h4": "MuiTypography-h4",
                                          "h5": "MuiTypography-h5",
                                          "h6": "MuiTypography-h6",
                                          "noWrap": "MuiTypography-noWrap",
                                          "overline": "MuiTypography-overline",
                                          "paragraph": "MuiTypography-paragraph",
                                          "root": "MuiTypography-root",
                                          "srOnly": "MuiTypography-srOnly",
                                          "subtitle1": "MuiTypography-subtitle1",
                                          "subtitle2": "MuiTypography-subtitle2",
                                        }
                                      }
                                      component="div"
                                      variantMapping={
                                        Object {
                                          "body1": "p",
                                          "body2": "p",
                                          "h1": "h1",
                                          "h2": "h2",
                                          "h3": "h3",
                                          "h4": "h4",
                                          "h5": "h5",
                                          "h6": "h6",
                                          "subtitle1": "h2",
                                          "subtitle2": "h2",
                                        }
                                      }
                                    >
                                      <div
                                        className="MuiTypography-root makeStyles-root-646 makeStyles-root-647 makeStyles-description-637 MuiTypography-body1"
                                      >
                                        If you've already signed up, 
                                        <WithStyles(ForwardRef(Link))
                                          href="/"
                                        >
                                          <ForwardRef(Link)
                                            classes={
                                              Object {
                                                "button": "MuiLink-button",
                                                "focusVisible": "Mui-focusVisible",
                                                "root": "MuiLink-root",
                                                "underlineAlways": "MuiLink-underlineAlways",
                                                "underlineHover": "MuiLink-underlineHover",
                                                "underlineNone": "MuiLink-underlineNone",
                                              }
                                            }
                                            href="/"
                                          >
                                            <WithStyles(ForwardRef(Typography))
                                              className="MuiLink-root MuiLink-underlineHover"
                                              color="primary"
                                              component="a"
                                              href="/"
                                              onBlur={[Function]}
                                              onFocus={[Function]}
                                              variant="inherit"
                                            >
                                              <ForwardRef(Typography)
                                                className="MuiLink-root MuiLink-underlineHover"
                                                classes={
                                                  Object {
                                                    "alignCenter": "MuiTypography-alignCenter",
                                                    "alignJustify": "MuiTypography-alignJustify",
                                                    "alignLeft": "MuiTypography-alignLeft",
                                                    "alignRight": "MuiTypography-alignRight",
                                                    "body1": "MuiTypography-body1",
                                                    "body2": "MuiTypography-body2",
                                                    "button": "MuiTypography-button",
                                                    "caption": "MuiTypography-caption",
                                                    "colorError": "MuiTypography-colorError",
                                                    "colorInherit": "MuiTypography-colorInherit",
                                                    "colorPrimary": "MuiTypography-colorPrimary",
                                                    "colorSecondary": "MuiTypography-colorSecondary",
                                                    "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                                    "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                                    "displayBlock": "MuiTypography-displayBlock",
                                                    "displayInline": "MuiTypography-displayInline",
                                                    "gutterBottom": "MuiTypography-gutterBottom",
                                                    "h1": "MuiTypography-h1",
                                                    "h2": "MuiTypography-h2",
                                                    "h3": "MuiTypography-h3",
                                                    "h4": "MuiTypography-h4",
                                                    "h5": "MuiTypography-h5",
                                                    "h6": "MuiTypography-h6",
                                                    "noWrap": "MuiTypography-noWrap",
                                                    "overline": "MuiTypography-overline",
                                                    "paragraph": "MuiTypography-paragraph",
                                                    "root": "MuiTypography-root",
                                                    "srOnly": "MuiTypography-srOnly",
                                                    "subtitle1": "MuiTypography-subtitle1",
                                                    "subtitle2": "MuiTypography-subtitle2",
                                                  }
                                                }
                                                color="primary"
                                                component="a"
                                                href="/"
                                                onBlur={[Function]}
                                                onFocus={[Function]}
                                                variant="inherit"
                                                variantMapping={
                                                  Object {
                                                    "body1": "p",
                                                    "body2": "p",
                                                    "h1": "h1",
                                                    "h2": "h2",
                                                    "h3": "h3",
                                                    "h4": "h4",
                                                    "h5": "h5",
                                                    "h6": "h6",
                                                    "subtitle1": "h2",
                                                    "subtitle2": "h2",
                                                  }
                                                }
                                              >
                                                <a
                                                  className="MuiTypography-root MuiLink-root MuiLink-underlineHover MuiTypography-colorPrimary"
                                                  href="/"
                                                  onBlur={[Function]}
                                                  onFocus={[Function]}
                                                >
                                                  log in here
                                                </a>
                                              </ForwardRef(Typography)>
                                            </WithStyles(ForwardRef(Typography))>
                                          </ForwardRef(Link)>
                                        </WithStyles(ForwardRef(Link))>
                                        .
                                      </div>
                                    </ForwardRef(Typography)>
                                  </WithStyles(ForwardRef(Typography))>
                                </Description>
                                <Field
                                  component={[Function]}
                                  label="Email address"
                                  name="email"
                                  type="email"
                                >
                                  <RegenTextField
                                    field={
                                      Object {
                                        "name": "email",
                                        "onBlur": [Function],
                                        "onChange": [Function],
                                        "value": "",
                                      }
                                    }
                                    form={
                                      Object {
                                        "dirty": false,
                                        "errors": Object {},
                                        "getFieldHelpers": [Function],
                                        "getFieldMeta": [Function],
                                        "getFieldProps": [Function],
                                        "handleBlur": [Function],
                                        "handleChange": [Function],
                                        "handleReset": [Function],
                                        "handleSubmit": [Function],
                                        "initialErrors": Object {},
                                        "initialStatus": undefined,
                                        "initialTouched": Object {},
                                        "initialValues": Object {
                                          "email": "",
                                          "password": "",
                                          "privacy": false,
                                          "recaptcha": undefined,
                                          "staySigned": false,
                                          "updates": false,
                                        },
                                        "isSubmitting": false,
                                        "isValid": true,
                                        "isValidating": false,
                                        "registerField": [Function],
                                        "resetForm": [Function],
                                        "setErrors": [Function],
                                        "setFieldError": [Function],
                                        "setFieldTouched": [Function],
                                        "setFieldValue": [Function],
                                        "setFormikState": [Function],
                                        "setStatus": [Function],
                                        "setSubmitting": [Function],
                                        "setTouched": [Function],
                                        "setValues": [Function],
                                        "status": undefined,
                                        "submitCount": 0,
                                        "submitForm": [Function],
                                        "touched": Object {},
                                        "unregisterField": [Function],
                                        "validateField": [Function],
                                        "validateForm": [Function],
                                        "validateOnBlur": true,
                                        "validateOnChange": true,
                                        "validateOnMount": false,
                                        "values": Object {
                                          "email": "",
                                          "password": "",
                                          "privacy": false,
                                          "recaptcha": undefined,
                                          "staySigned": false,
                                          "updates": false,
                                        },
                                      }
                                    }
                                    label="Email address"
                                    type="email"
                                  >
                                    <TriggerTextField
                                      InputLabelProps={
                                        Object {
                                          "focused": false,
                                          "required": false,
                                        }
                                      }
                                      InputProps={
                                        Object {
                                          "disableUnderline": true,
                                          "endAdornment": null,
                                          "startAdornment": null,
                                        }
                                      }
                                      className="makeStyles-root-648 makeStyles-root-649"
                                      field={
                                        Object {
                                          "name": "email",
                                          "onBlur": [Function],
                                          "onChange": [Function],
                                          "value": "",
                                        }
                                      }
                                      form={
                                        Object {
                                          "dirty": false,
                                          "errors": Object {},
                                          "getFieldHelpers": [Function],
                                          "getFieldMeta": [Function],
                                          "getFieldProps": [Function],
                                          "handleBlur": [Function],
                                          "handleChange": [Function],
                                          "handleReset": [Function],
                                          "handleSubmit": [Function],
                                          "initialErrors": Object {},
                                          "initialStatus": undefined,
                                          "initialTouched": Object {},
                                          "initialValues": Object {
                                            "email": "",
                                            "password": "",
                                            "privacy": false,
                                            "recaptcha": undefined,
                                            "staySigned": false,
                                            "updates": false,
                                          },
                                          "isSubmitting": false,
                                          "isValid": true,
                                          "isValidating": false,
                                          "registerField": [Function],
                                          "resetForm": [Function],
                                          "setErrors": [Function],
                                          "setFieldError": [Function],
                                          "setFieldTouched": [Function],
                                          "setFieldValue": [Function],
                                          "setFormikState": [Function],
                                          "setStatus": [Function],
                                          "setSubmitting": [Function],
                                          "setTouched": [Function],
                                          "setValues": [Function],
                                          "status": undefined,
                                          "submitCount": 0,
                                          "submitForm": [Function],
                                          "touched": Object {},
                                          "unregisterField": [Function],
                                          "validateField": [Function],
                                          "validateForm": [Function],
                                          "validateOnBlur": true,
                                          "validateOnChange": true,
                                          "validateOnMount": false,
                                          "values": Object {
                                            "email": "",
                                            "password": "",
                                            "privacy": false,
                                            "recaptcha": undefined,
                                            "staySigned": false,
                                            "updates": false,
                                          },
                                        }
                                      }
                                      fullWidth={true}
                                      label="Email address"
                                      type="email"
                                    >
                                      <WithStyles(ForwardRef(TextField))
                                        InputLabelProps={
                                          Object {
                                            "focused": false,
                                            "required": false,
                                          }
                                        }
                                        InputProps={
                                          Object {
                                            "disableUnderline": true,
                                            "endAdornment": null,
                                            "startAdornment": null,
                                          }
                                        }
                                        className="makeStyles-root-648 makeStyles-root-649"
                                        disabled={false}
                                        fullWidth={true}
                                        label="Email address"
                                        name="email"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        type="email"
                                        value=""
                                      >
                                        <ForwardRef(TextField)
                                          InputLabelProps={
                                            Object {
                                              "focused": false,
                                              "required": false,
                                            }
                                          }
                                          InputProps={
                                            Object {
                                              "disableUnderline": true,
                                              "endAdornment": null,
                                              "startAdornment": null,
                                            }
                                          }
                                          className="makeStyles-root-648 makeStyles-root-649"
                                          classes={
                                            Object {
                                              "root": "MuiTextField-root",
                                            }
                                          }
                                          disabled={false}
                                          fullWidth={true}
                                          label="Email address"
                                          name="email"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          type="email"
                                          value=""
                                        >
                                          <WithStyles(ForwardRef(FormControl))
                                            className="MuiTextField-root makeStyles-root-648 makeStyles-root-649"
                                            color="primary"
                                            disabled={false}
                                            error={false}
                                            fullWidth={true}
                                            required={false}
                                            variant="standard"
                                          >
                                            <ForwardRef(FormControl)
                                              className="MuiTextField-root makeStyles-root-648 makeStyles-root-649"
                                              classes={
                                                Object {
                                                  "fullWidth": "MuiFormControl-fullWidth",
                                                  "marginDense": "MuiFormControl-marginDense",
                                                  "marginNormal": "MuiFormControl-marginNormal",
                                                  "root": "MuiFormControl-root",
                                                }
                                              }
                                              color="primary"
                                              disabled={false}
                                              error={false}
                                              fullWidth={true}
                                              required={false}
                                              variant="standard"
                                            >
                                              <div
                                                className="MuiFormControl-root MuiTextField-root makeStyles-root-648 makeStyles-root-649 MuiFormControl-fullWidth"
                                              >
                                                <WithStyles(ForwardRef(InputLabel))
                                                  focused={false}
                                                  required={false}
                                                >
                                                  <ForwardRef(InputLabel)
                                                    classes={
                                                      Object {
                                                        "animated": "MuiInputLabel-animated",
                                                        "asterisk": "MuiInputLabel-asterisk",
                                                        "disabled": "Mui-disabled",
                                                        "error": "Mui-error",
                                                        "filled": "MuiInputLabel-filled",
                                                        "focused": "Mui-focused",
                                                        "formControl": "MuiInputLabel-formControl",
                                                        "marginDense": "MuiInputLabel-marginDense",
                                                        "outlined": "MuiInputLabel-outlined",
                                                        "required": "Mui-required",
                                                        "root": "MuiInputLabel-root",
                                                        "shrink": "MuiInputLabel-shrink",
                                                      }
                                                    }
                                                    focused={false}
                                                    required={false}
                                                  >
                                                    <WithStyles(ForwardRef(FormLabel))
                                                      className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                                      classes={
                                                        Object {
                                                          "asterisk": "MuiInputLabel-asterisk",
                                                          "disabled": "Mui-disabled",
                                                          "error": "Mui-error",
                                                          "focused": "Mui-focused",
                                                          "required": "Mui-required",
                                                        }
                                                      }
                                                      data-shrink={false}
                                                      focused={false}
                                                      required={false}
                                                    >
                                                      <ForwardRef(FormLabel)
                                                        className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                                        classes={
                                                          Object {
                                                            "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                                            "colorSecondary": "MuiFormLabel-colorSecondary",
                                                            "disabled": "Mui-disabled Mui-disabled",
                                                            "error": "Mui-error Mui-error",
                                                            "filled": "MuiFormLabel-filled",
                                                            "focused": "Mui-focused Mui-focused",
                                                            "required": "Mui-required Mui-required",
                                                            "root": "MuiFormLabel-root",
                                                          }
                                                        }
                                                        data-shrink={false}
                                                        focused={false}
                                                        required={false}
                                                      >
                                                        <label
                                                          className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                                          data-shrink={false}
                                                        >
                                                          Email address
                                                        </label>
                                                      </ForwardRef(FormLabel)>
                                                    </WithStyles(ForwardRef(FormLabel))>
                                                  </ForwardRef(InputLabel)>
                                                </WithStyles(ForwardRef(InputLabel))>
                                                <WithStyles(ForwardRef(Input))
                                                  autoFocus={false}
                                                  disableUnderline={true}
                                                  endAdornment={null}
                                                  fullWidth={true}
                                                  multiline={false}
                                                  name="email"
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  startAdornment={null}
                                                  type="email"
                                                  value=""
                                                >
                                                  <ForwardRef(Input)
                                                    autoFocus={false}
                                                    classes={
                                                      Object {
                                                        "colorSecondary": "MuiInput-colorSecondary",
                                                        "disabled": "Mui-disabled",
                                                        "error": "Mui-error",
                                                        "focused": "Mui-focused",
                                                        "formControl": "MuiInput-formControl",
                                                        "fullWidth": "MuiInput-fullWidth",
                                                        "input": "MuiInput-input",
                                                        "inputMarginDense": "MuiInput-inputMarginDense",
                                                        "inputMultiline": "MuiInput-inputMultiline",
                                                        "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                        "marginDense": "MuiInput-marginDense",
                                                        "multiline": "MuiInput-multiline",
                                                        "root": "MuiInput-root",
                                                        "underline": "MuiInput-underline",
                                                      }
                                                    }
                                                    disableUnderline={true}
                                                    endAdornment={null}
                                                    fullWidth={true}
                                                    multiline={false}
                                                    name="email"
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    startAdornment={null}
                                                    type="email"
                                                    value=""
                                                  >
                                                    <WithStyles(ForwardRef(InputBase))
                                                      autoFocus={false}
                                                      classes={
                                                        Object {
                                                          "colorSecondary": "MuiInput-colorSecondary",
                                                          "disabled": "Mui-disabled",
                                                          "error": "Mui-error",
                                                          "focused": "Mui-focused",
                                                          "formControl": "MuiInput-formControl",
                                                          "fullWidth": "MuiInput-fullWidth",
                                                          "input": "MuiInput-input",
                                                          "inputMarginDense": "MuiInput-inputMarginDense",
                                                          "inputMultiline": "MuiInput-inputMultiline",
                                                          "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                          "marginDense": "MuiInput-marginDense",
                                                          "multiline": "MuiInput-multiline",
                                                          "root": "MuiInput-root",
                                                          "underline": null,
                                                        }
                                                      }
                                                      endAdornment={null}
                                                      fullWidth={true}
                                                      inputComponent="input"
                                                      multiline={false}
                                                      name="email"
                                                      onBlur={[Function]}
                                                      onChange={[Function]}
                                                      startAdornment={null}
                                                      type="email"
                                                      value=""
                                                    >
                                                      <ForwardRef(InputBase)
                                                        autoFocus={false}
                                                        classes={
                                                          Object {
                                                            "adornedEnd": "MuiInputBase-adornedEnd",
                                                            "adornedStart": "MuiInputBase-adornedStart",
                                                            "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                                                            "disabled": "Mui-disabled Mui-disabled",
                                                            "error": "Mui-error Mui-error",
                                                            "focused": "Mui-focused Mui-focused",
                                                            "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                                            "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                                            "input": "MuiInputBase-input MuiInput-input",
                                                            "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                                            "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                                            "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                                            "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                                            "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                                            "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                                            "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                                                            "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                                            "root": "MuiInputBase-root MuiInput-root",
                                                          }
                                                        }
                                                        endAdornment={null}
                                                        fullWidth={true}
                                                        inputComponent="input"
                                                        multiline={false}
                                                        name="email"
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        startAdornment={null}
                                                        type="email"
                                                        value=""
                                                      >
                                                        <div
                                                          className="MuiInputBase-root MuiInput-root MuiInputBase-fullWidth MuiInput-fullWidth MuiInputBase-formControl MuiInput-formControl"
                                                          onClick={[Function]}
                                                        >
                                                          <input
                                                            aria-invalid={false}
                                                            autoFocus={false}
                                                            className="MuiInputBase-input MuiInput-input"
                                                            disabled={false}
                                                            name="email"
                                                            onAnimationStart={[Function]}
                                                            onBlur={[Function]}
                                                            onChange={[Function]}
                                                            onFocus={[Function]}
                                                            required={false}
                                                            type="email"
                                                            value=""
                                                          />
                                                        </div>
                                                      </ForwardRef(InputBase)>
                                                    </WithStyles(ForwardRef(InputBase))>
                                                  </ForwardRef(Input)>
                                                </WithStyles(ForwardRef(Input))>
                                              </div>
                                            </ForwardRef(FormControl)>
                                          </WithStyles(ForwardRef(FormControl))>
                                        </ForwardRef(TextField)>
                                      </WithStyles(ForwardRef(TextField))>
                                    </TriggerTextField>
                                  </RegenTextField>
                                </Field>
                                <Field
                                  className="makeStyles-textField-636"
                                  component={[Function]}
                                  name="password"
                                  signup={true}
                                >
                                  <PasswordField
                                    className="makeStyles-textField-636"
                                    field={
                                      Object {
                                        "name": "password",
                                        "onBlur": [Function],
                                        "onChange": [Function],
                                        "value": "",
                                      }
                                    }
                                    form={
                                      Object {
                                        "dirty": false,
                                        "errors": Object {},
                                        "getFieldHelpers": [Function],
                                        "getFieldMeta": [Function],
                                        "getFieldProps": [Function],
                                        "handleBlur": [Function],
                                        "handleChange": [Function],
                                        "handleReset": [Function],
                                        "handleSubmit": [Function],
                                        "initialErrors": Object {},
                                        "initialStatus": undefined,
                                        "initialTouched": Object {},
                                        "initialValues": Object {
                                          "email": "",
                                          "password": "",
                                          "privacy": false,
                                          "recaptcha": undefined,
                                          "staySigned": false,
                                          "updates": false,
                                        },
                                        "isSubmitting": false,
                                        "isValid": true,
                                        "isValidating": false,
                                        "registerField": [Function],
                                        "resetForm": [Function],
                                        "setErrors": [Function],
                                        "setFieldError": [Function],
                                        "setFieldTouched": [Function],
                                        "setFieldValue": [Function],
                                        "setFormikState": [Function],
                                        "setStatus": [Function],
                                        "setSubmitting": [Function],
                                        "setTouched": [Function],
                                        "setValues": [Function],
                                        "status": undefined,
                                        "submitCount": 0,
                                        "submitForm": [Function],
                                        "touched": Object {},
                                        "unregisterField": [Function],
                                        "validateField": [Function],
                                        "validateForm": [Function],
                                        "validateOnBlur": true,
                                        "validateOnChange": true,
                                        "validateOnMount": false,
                                        "values": Object {
                                          "email": "",
                                          "password": "",
                                          "privacy": false,
                                          "recaptcha": undefined,
                                          "staySigned": false,
                                          "updates": false,
                                        },
                                      }
                                    }
                                    signup={true}
                                  >
                                    <RegenTextField
                                      FormHelperTextProps={
                                        Object {
                                          "filled": false,
                                        }
                                      }
                                      className="makeStyles-textField-636"
                                      endAdornment={
                                        <ForwardRef(WithStyles)
                                          aria-label="toggle password visibility"
                                          onClick={[Function]}
                                          onMouseDown={[Function]}
                                        >
                                          <EyeIcon
                                            className="makeStyles-eyeIcon-650"
                                            color="#7BC796"
                                            visible={true}
                                          />
                                        </ForwardRef(WithStyles)>
                                      }
                                      field={
                                        Object {
                                          "name": "password",
                                          "onBlur": [Function],
                                          "onChange": [Function],
                                          "value": "",
                                        }
                                      }
                                      form={
                                        Object {
                                          "dirty": false,
                                          "errors": Object {},
                                          "getFieldHelpers": [Function],
                                          "getFieldMeta": [Function],
                                          "getFieldProps": [Function],
                                          "handleBlur": [Function],
                                          "handleChange": [Function],
                                          "handleReset": [Function],
                                          "handleSubmit": [Function],
                                          "initialErrors": Object {},
                                          "initialStatus": undefined,
                                          "initialTouched": Object {},
                                          "initialValues": Object {
                                            "email": "",
                                            "password": "",
                                            "privacy": false,
                                            "recaptcha": undefined,
                                            "staySigned": false,
                                            "updates": false,
                                          },
                                          "isSubmitting": false,
                                          "isValid": true,
                                          "isValidating": false,
                                          "registerField": [Function],
                                          "resetForm": [Function],
                                          "setErrors": [Function],
                                          "setFieldError": [Function],
                                          "setFieldTouched": [Function],
                                          "setFieldValue": [Function],
                                          "setFormikState": [Function],
                                          "setStatus": [Function],
                                          "setSubmitting": [Function],
                                          "setTouched": [Function],
                                          "setValues": [Function],
                                          "status": undefined,
                                          "submitCount": 0,
                                          "submitForm": [Function],
                                          "touched": Object {},
                                          "unregisterField": [Function],
                                          "validateField": [Function],
                                          "validateForm": [Function],
                                          "validateOnBlur": true,
                                          "validateOnChange": true,
                                          "validateOnMount": false,
                                          "values": Object {
                                            "email": "",
                                            "password": "",
                                            "privacy": false,
                                            "recaptcha": undefined,
                                            "staySigned": false,
                                            "updates": false,
                                          },
                                        }
                                      }
                                      label="Password"
                                      type="text"
                                    >
                                      <TriggerTextField
                                        FormHelperTextProps={
                                          Object {
                                            "filled": false,
                                          }
                                        }
                                        InputLabelProps={
                                          Object {
                                            "focused": false,
                                            "required": false,
                                          }
                                        }
                                        InputProps={
                                          Object {
                                            "disableUnderline": true,
                                            "endAdornment": <ForwardRef(WithStyles)
                                              position="end"
                                            >
                                              <ForwardRef(WithStyles)
                                                aria-label="toggle password visibility"
                                                onClick={[Function]}
                                                onMouseDown={[Function]}
                                              >
                                                <EyeIcon
                                                  className="makeStyles-eyeIcon-650"
                                                  color="#7BC796"
                                                  visible={true}
                                                />
                                              </ForwardRef(WithStyles)>
                                            </ForwardRef(WithStyles)>,
                                            "startAdornment": null,
                                          }
                                        }
                                        className="makeStyles-root-648 makeStyles-root-651 makeStyles-textField-636"
                                        field={
                                          Object {
                                            "name": "password",
                                            "onBlur": [Function],
                                            "onChange": [Function],
                                            "value": "",
                                          }
                                        }
                                        form={
                                          Object {
                                            "dirty": false,
                                            "errors": Object {},
                                            "getFieldHelpers": [Function],
                                            "getFieldMeta": [Function],
                                            "getFieldProps": [Function],
                                            "handleBlur": [Function],
                                            "handleChange": [Function],
                                            "handleReset": [Function],
                                            "handleSubmit": [Function],
                                            "initialErrors": Object {},
                                            "initialStatus": undefined,
                                            "initialTouched": Object {},
                                            "initialValues": Object {
                                              "email": "",
                                              "password": "",
                                              "privacy": false,
                                              "recaptcha": undefined,
                                              "staySigned": false,
                                              "updates": false,
                                            },
                                            "isSubmitting": false,
                                            "isValid": true,
                                            "isValidating": false,
                                            "registerField": [Function],
                                            "resetForm": [Function],
                                            "setErrors": [Function],
                                            "setFieldError": [Function],
                                            "setFieldTouched": [Function],
                                            "setFieldValue": [Function],
                                            "setFormikState": [Function],
                                            "setStatus": [Function],
                                            "setSubmitting": [Function],
                                            "setTouched": [Function],
                                            "setValues": [Function],
                                            "status": undefined,
                                            "submitCount": 0,
                                            "submitForm": [Function],
                                            "touched": Object {},
                                            "unregisterField": [Function],
                                            "validateField": [Function],
                                            "validateForm": [Function],
                                            "validateOnBlur": true,
                                            "validateOnChange": true,
                                            "validateOnMount": false,
                                            "values": Object {
                                              "email": "",
                                              "password": "",
                                              "privacy": false,
                                              "recaptcha": undefined,
                                              "staySigned": false,
                                              "updates": false,
                                            },
                                          }
                                        }
                                        fullWidth={true}
                                        label="Password"
                                        type="text"
                                      >
                                        <WithStyles(ForwardRef(TextField))
                                          FormHelperTextProps={
                                            Object {
                                              "filled": false,
                                            }
                                          }
                                          InputLabelProps={
                                            Object {
                                              "focused": false,
                                              "required": false,
                                            }
                                          }
                                          InputProps={
                                            Object {
                                              "disableUnderline": true,
                                              "endAdornment": <ForwardRef(WithStyles)
                                                position="end"
                                              >
                                                <ForwardRef(WithStyles)
                                                  aria-label="toggle password visibility"
                                                  onClick={[Function]}
                                                  onMouseDown={[Function]}
                                                >
                                                  <EyeIcon
                                                    className="makeStyles-eyeIcon-650"
                                                    color="#7BC796"
                                                    visible={true}
                                                  />
                                                </ForwardRef(WithStyles)>
                                              </ForwardRef(WithStyles)>,
                                              "startAdornment": null,
                                            }
                                          }
                                          className="makeStyles-root-648 makeStyles-root-651 makeStyles-textField-636"
                                          disabled={false}
                                          fullWidth={true}
                                          label="Password"
                                          name="password"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          type="text"
                                          value=""
                                        >
                                          <ForwardRef(TextField)
                                            FormHelperTextProps={
                                              Object {
                                                "filled": false,
                                              }
                                            }
                                            InputLabelProps={
                                              Object {
                                                "focused": false,
                                                "required": false,
                                              }
                                            }
                                            InputProps={
                                              Object {
                                                "disableUnderline": true,
                                                "endAdornment": <ForwardRef(WithStyles)
                                                  position="end"
                                                >
                                                  <ForwardRef(WithStyles)
                                                    aria-label="toggle password visibility"
                                                    onClick={[Function]}
                                                    onMouseDown={[Function]}
                                                  >
                                                    <EyeIcon
                                                      className="makeStyles-eyeIcon-650"
                                                      color="#7BC796"
                                                      visible={true}
                                                    />
                                                  </ForwardRef(WithStyles)>
                                                </ForwardRef(WithStyles)>,
                                                "startAdornment": null,
                                              }
                                            }
                                            className="makeStyles-root-648 makeStyles-root-651 makeStyles-textField-636"
                                            classes={
                                              Object {
                                                "root": "MuiTextField-root",
                                              }
                                            }
                                            disabled={false}
                                            fullWidth={true}
                                            label="Password"
                                            name="password"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            type="text"
                                            value=""
                                          >
                                            <WithStyles(ForwardRef(FormControl))
                                              className="MuiTextField-root makeStyles-root-648 makeStyles-root-651 makeStyles-textField-636"
                                              color="primary"
                                              disabled={false}
                                              error={false}
                                              fullWidth={true}
                                              required={false}
                                              variant="standard"
                                            >
                                              <ForwardRef(FormControl)
                                                className="MuiTextField-root makeStyles-root-648 makeStyles-root-651 makeStyles-textField-636"
                                                classes={
                                                  Object {
                                                    "fullWidth": "MuiFormControl-fullWidth",
                                                    "marginDense": "MuiFormControl-marginDense",
                                                    "marginNormal": "MuiFormControl-marginNormal",
                                                    "root": "MuiFormControl-root",
                                                  }
                                                }
                                                color="primary"
                                                disabled={false}
                                                error={false}
                                                fullWidth={true}
                                                required={false}
                                                variant="standard"
                                              >
                                                <div
                                                  className="MuiFormControl-root MuiTextField-root makeStyles-root-648 makeStyles-root-651 makeStyles-textField-636 MuiFormControl-fullWidth"
                                                >
                                                  <WithStyles(ForwardRef(InputLabel))
                                                    focused={false}
                                                    required={false}
                                                  >
                                                    <ForwardRef(InputLabel)
                                                      classes={
                                                        Object {
                                                          "animated": "MuiInputLabel-animated",
                                                          "asterisk": "MuiInputLabel-asterisk",
                                                          "disabled": "Mui-disabled",
                                                          "error": "Mui-error",
                                                          "filled": "MuiInputLabel-filled",
                                                          "focused": "Mui-focused",
                                                          "formControl": "MuiInputLabel-formControl",
                                                          "marginDense": "MuiInputLabel-marginDense",
                                                          "outlined": "MuiInputLabel-outlined",
                                                          "required": "Mui-required",
                                                          "root": "MuiInputLabel-root",
                                                          "shrink": "MuiInputLabel-shrink",
                                                        }
                                                      }
                                                      focused={false}
                                                      required={false}
                                                    >
                                                      <WithStyles(ForwardRef(FormLabel))
                                                        className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                                        classes={
                                                          Object {
                                                            "asterisk": "MuiInputLabel-asterisk",
                                                            "disabled": "Mui-disabled",
                                                            "error": "Mui-error",
                                                            "focused": "Mui-focused",
                                                            "required": "Mui-required",
                                                          }
                                                        }
                                                        data-shrink={false}
                                                        focused={false}
                                                        required={false}
                                                      >
                                                        <ForwardRef(FormLabel)
                                                          className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                                          classes={
                                                            Object {
                                                              "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                                              "colorSecondary": "MuiFormLabel-colorSecondary",
                                                              "disabled": "Mui-disabled Mui-disabled",
                                                              "error": "Mui-error Mui-error",
                                                              "filled": "MuiFormLabel-filled",
                                                              "focused": "Mui-focused Mui-focused",
                                                              "required": "Mui-required Mui-required",
                                                              "root": "MuiFormLabel-root",
                                                            }
                                                          }
                                                          data-shrink={false}
                                                          focused={false}
                                                          required={false}
                                                        >
                                                          <label
                                                            className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                                            data-shrink={false}
                                                          >
                                                            Password
                                                          </label>
                                                        </ForwardRef(FormLabel)>
                                                      </WithStyles(ForwardRef(FormLabel))>
                                                    </ForwardRef(InputLabel)>
                                                  </WithStyles(ForwardRef(InputLabel))>
                                                  <WithStyles(ForwardRef(Input))
                                                    autoFocus={false}
                                                    disableUnderline={true}
                                                    endAdornment={
                                                      <ForwardRef(WithStyles)
                                                        position="end"
                                                      >
                                                        <ForwardRef(WithStyles)
                                                          aria-label="toggle password visibility"
                                                          onClick={[Function]}
                                                          onMouseDown={[Function]}
                                                        >
                                                          <EyeIcon
                                                            className="makeStyles-eyeIcon-650"
                                                            color="#7BC796"
                                                            visible={true}
                                                          />
                                                        </ForwardRef(WithStyles)>
                                                      </ForwardRef(WithStyles)>
                                                    }
                                                    fullWidth={true}
                                                    multiline={false}
                                                    name="password"
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    startAdornment={null}
                                                    type="text"
                                                    value=""
                                                  >
                                                    <ForwardRef(Input)
                                                      autoFocus={false}
                                                      classes={
                                                        Object {
                                                          "colorSecondary": "MuiInput-colorSecondary",
                                                          "disabled": "Mui-disabled",
                                                          "error": "Mui-error",
                                                          "focused": "Mui-focused",
                                                          "formControl": "MuiInput-formControl",
                                                          "fullWidth": "MuiInput-fullWidth",
                                                          "input": "MuiInput-input",
                                                          "inputMarginDense": "MuiInput-inputMarginDense",
                                                          "inputMultiline": "MuiInput-inputMultiline",
                                                          "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                          "marginDense": "MuiInput-marginDense",
                                                          "multiline": "MuiInput-multiline",
                                                          "root": "MuiInput-root",
                                                          "underline": "MuiInput-underline",
                                                        }
                                                      }
                                                      disableUnderline={true}
                                                      endAdornment={
                                                        <ForwardRef(WithStyles)
                                                          position="end"
                                                        >
                                                          <ForwardRef(WithStyles)
                                                            aria-label="toggle password visibility"
                                                            onClick={[Function]}
                                                            onMouseDown={[Function]}
                                                          >
                                                            <EyeIcon
                                                              className="makeStyles-eyeIcon-650"
                                                              color="#7BC796"
                                                              visible={true}
                                                            />
                                                          </ForwardRef(WithStyles)>
                                                        </ForwardRef(WithStyles)>
                                                      }
                                                      fullWidth={true}
                                                      multiline={false}
                                                      name="password"
                                                      onBlur={[Function]}
                                                      onChange={[Function]}
                                                      startAdornment={null}
                                                      type="text"
                                                      value=""
                                                    >
                                                      <WithStyles(ForwardRef(InputBase))
                                                        autoFocus={false}
                                                        classes={
                                                          Object {
                                                            "colorSecondary": "MuiInput-colorSecondary",
                                                            "disabled": "Mui-disabled",
                                                            "error": "Mui-error",
                                                            "focused": "Mui-focused",
                                                            "formControl": "MuiInput-formControl",
                                                            "fullWidth": "MuiInput-fullWidth",
                                                            "input": "MuiInput-input",
                                                            "inputMarginDense": "MuiInput-inputMarginDense",
                                                            "inputMultiline": "MuiInput-inputMultiline",
                                                            "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                            "marginDense": "MuiInput-marginDense",
                                                            "multiline": "MuiInput-multiline",
                                                            "root": "MuiInput-root",
                                                            "underline": null,
                                                          }
                                                        }
                                                        endAdornment={
                                                          <ForwardRef(WithStyles)
                                                            position="end"
                                                          >
                                                            <ForwardRef(WithStyles)
                                                              aria-label="toggle password visibility"
                                                              onClick={[Function]}
                                                              onMouseDown={[Function]}
                                                            >
                                                              <EyeIcon
                                                                className="makeStyles-eyeIcon-650"
                                                                color="#7BC796"
                                                                visible={true}
                                                              />
                                                            </ForwardRef(WithStyles)>
                                                          </ForwardRef(WithStyles)>
                                                        }
                                                        fullWidth={true}
                                                        inputComponent="input"
                                                        multiline={false}
                                                        name="password"
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        startAdornment={null}
                                                        type="text"
                                                        value=""
                                                      >
                                                        <ForwardRef(InputBase)
                                                          autoFocus={false}
                                                          classes={
                                                            Object {
                                                              "adornedEnd": "MuiInputBase-adornedEnd",
                                                              "adornedStart": "MuiInputBase-adornedStart",
                                                              "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                                                              "disabled": "Mui-disabled Mui-disabled",
                                                              "error": "Mui-error Mui-error",
                                                              "focused": "Mui-focused Mui-focused",
                                                              "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                                              "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                                              "input": "MuiInputBase-input MuiInput-input",
                                                              "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                                              "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                                              "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                                              "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                                              "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                                              "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                                              "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                                                              "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                                              "root": "MuiInputBase-root MuiInput-root",
                                                            }
                                                          }
                                                          endAdornment={
                                                            <ForwardRef(WithStyles)
                                                              position="end"
                                                            >
                                                              <ForwardRef(WithStyles)
                                                                aria-label="toggle password visibility"
                                                                onClick={[Function]}
                                                                onMouseDown={[Function]}
                                                              >
                                                                <EyeIcon
                                                                  className="makeStyles-eyeIcon-650"
                                                                  color="#7BC796"
                                                                  visible={true}
                                                                />
                                                              </ForwardRef(WithStyles)>
                                                            </ForwardRef(WithStyles)>
                                                          }
                                                          fullWidth={true}
                                                          inputComponent="input"
                                                          multiline={false}
                                                          name="password"
                                                          onBlur={[Function]}
                                                          onChange={[Function]}
                                                          startAdornment={null}
                                                          type="text"
                                                          value=""
                                                        >
                                                          <div
                                                            className="MuiInputBase-root MuiInput-root MuiInputBase-fullWidth MuiInput-fullWidth MuiInputBase-formControl MuiInput-formControl MuiInputBase-adornedEnd"
                                                            onClick={[Function]}
                                                          >
                                                            <input
                                                              aria-invalid={false}
                                                              autoFocus={false}
                                                              className="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedEnd"
                                                              disabled={false}
                                                              name="password"
                                                              onAnimationStart={[Function]}
                                                              onBlur={[Function]}
                                                              onChange={[Function]}
                                                              onFocus={[Function]}
                                                              required={false}
                                                              type="text"
                                                              value=""
                                                            />
                                                            <WithStyles(ForwardRef(InputAdornment))
                                                              position="end"
                                                            >
                                                              <ForwardRef(InputAdornment)
                                                                classes={
                                                                  Object {
                                                                    "disablePointerEvents": "MuiInputAdornment-disablePointerEvents",
                                                                    "filled": "MuiInputAdornment-filled",
                                                                    "hiddenLabel": "MuiInputAdornment-hiddenLabel",
                                                                    "marginDense": "MuiInputAdornment-marginDense",
                                                                    "positionEnd": "MuiInputAdornment-positionEnd",
                                                                    "positionStart": "MuiInputAdornment-positionStart",
                                                                    "root": "MuiInputAdornment-root",
                                                                  }
                                                                }
                                                                position="end"
                                                              >
                                                                <div
                                                                  className="MuiInputAdornment-root MuiInputAdornment-positionEnd"
                                                                >
                                                                  <WithStyles(ForwardRef(IconButton))
                                                                    aria-label="toggle password visibility"
                                                                    onClick={[Function]}
                                                                    onMouseDown={[Function]}
                                                                  >
                                                                    <ForwardRef(IconButton)
                                                                      aria-label="toggle password visibility"
                                                                      classes={
                                                                        Object {
                                                                          "colorInherit": "MuiIconButton-colorInherit",
                                                                          "colorPrimary": "MuiIconButton-colorPrimary",
                                                                          "colorSecondary": "MuiIconButton-colorSecondary",
                                                                          "disabled": "Mui-disabled",
                                                                          "edgeEnd": "MuiIconButton-edgeEnd",
                                                                          "edgeStart": "MuiIconButton-edgeStart",
                                                                          "label": "MuiIconButton-label",
                                                                          "root": "MuiIconButton-root",
                                                                          "sizeSmall": "MuiIconButton-sizeSmall",
                                                                        }
                                                                      }
                                                                      onClick={[Function]}
                                                                      onMouseDown={[Function]}
                                                                    >
                                                                      <WithStyles(ForwardRef(ButtonBase))
                                                                        aria-label="toggle password visibility"
                                                                        centerRipple={true}
                                                                        className="MuiIconButton-root"
                                                                        disabled={false}
                                                                        focusRipple={true}
                                                                        onClick={[Function]}
                                                                        onMouseDown={[Function]}
                                                                      >
                                                                        <ForwardRef(ButtonBase)
                                                                          aria-label="toggle password visibility"
                                                                          centerRipple={true}
                                                                          className="MuiIconButton-root"
                                                                          classes={
                                                                            Object {
                                                                              "disabled": "Mui-disabled",
                                                                              "focusVisible": "Mui-focusVisible",
                                                                              "root": "MuiButtonBase-root",
                                                                            }
                                                                          }
                                                                          disabled={false}
                                                                          focusRipple={true}
                                                                          onClick={[Function]}
                                                                          onMouseDown={[Function]}
                                                                        >
                                                                          <button
                                                                            aria-label="toggle password visibility"
                                                                            className="MuiButtonBase-root MuiIconButton-root"
                                                                            disabled={false}
                                                                            onBlur={[Function]}
                                                                            onClick={[Function]}
                                                                            onDragLeave={[Function]}
                                                                            onFocus={[Function]}
                                                                            onKeyDown={[Function]}
                                                                            onKeyUp={[Function]}
                                                                            onMouseDown={[Function]}
                                                                            onMouseLeave={[Function]}
                                                                            onMouseUp={[Function]}
                                                                            onTouchEnd={[Function]}
                                                                            onTouchMove={[Function]}
                                                                            onTouchStart={[Function]}
                                                                            tabIndex={0}
                                                                            type="button"
                                                                          >
                                                                            <span
                                                                              className="MuiIconButton-label"
                                                                            >
                                                                              <EyeIcon
                                                                                className="makeStyles-eyeIcon-650"
                                                                                color="#7BC796"
                                                                                visible={true}
                                                                              >
                                                                                <WithStyles(ForwardRef(SvgIcon))
                                                                                  className="makeStyles-eyeIcon-650 makeStyles-root-652"
                                                                                  viewBox="0 0 19 14"
                                                                                >
                                                                                  <ForwardRef(SvgIcon)
                                                                                    className="makeStyles-eyeIcon-650 makeStyles-root-652"
                                                                                    classes={
                                                                                      Object {
                                                                                        "colorAction": "MuiSvgIcon-colorAction",
                                                                                        "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                                                        "colorError": "MuiSvgIcon-colorError",
                                                                                        "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                                                        "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                                                        "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                                                        "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                                                        "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                                                        "root": "MuiSvgIcon-root",
                                                                                      }
                                                                                    }
                                                                                    viewBox="0 0 19 14"
                                                                                  >
                                                                                    <svg
                                                                                      aria-hidden={true}
                                                                                      className="MuiSvgIcon-root makeStyles-eyeIcon-650 makeStyles-root-652"
                                                                                      focusable="false"
                                                                                      viewBox="0 0 19 14"
                                                                                    >
                                                                                      <svg
                                                                                        fill="none"
                                                                                        height="14"
                                                                                        viewBox="0 0 19 14"
                                                                                        width="19"
                                                                                        xmlns="http://www.w3.org/2000/svg"
                                                                                      >
                                                                                        <path
                                                                                          clipRule="evenodd"
                                                                                          d="M0 6.91021C1.29537 2.90035 5.05898 0 9.5 0C13.941 0 17.7046 2.90035 19 6.91021C17.7046 10.9201 13.941 13.8204 9.5 13.8204C5.05898 13.8204 1.29537 10.9201 0 6.91021Z"
                                                                                          fill="#7BC796"
                                                                                          fillRule="evenodd"
                                                                                        />
                                                                                        <circle
                                                                                          cx="9.81977"
                                                                                          cy="6.91022"
                                                                                          fill="#7BC796"
                                                                                          r="3.29587"
                                                                                          stroke="white"
                                                                                          strokeWidth="1.5"
                                                                                        />
                                                                                      </svg>
                                                                                    </svg>
                                                                                  </ForwardRef(SvgIcon)>
                                                                                </WithStyles(ForwardRef(SvgIcon))>
                                                                              </EyeIcon>
                                                                            </span>
                                                                            <WithStyles(memo)
                                                                              center={true}
                                                                            >
                                                                              <ForwardRef(TouchRipple)
                                                                                center={true}
                                                                                classes={
                                                                                  Object {
                                                                                    "child": "MuiTouchRipple-child",
                                                                                    "childLeaving": "MuiTouchRipple-childLeaving",
                                                                                    "childPulsate": "MuiTouchRipple-childPulsate",
                                                                                    "ripple": "MuiTouchRipple-ripple",
                                                                                    "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                                                    "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                                                    "root": "MuiTouchRipple-root",
                                                                                  }
                                                                                }
                                                                              >
                                                                                <span
                                                                                  className="MuiTouchRipple-root"
                                                                                >
                                                                                  <TransitionGroup
                                                                                    childFactory={[Function]}
                                                                                    component={null}
                                                                                    exit={true}
                                                                                  />
                                                                                </span>
                                                                              </ForwardRef(TouchRipple)>
                                                                            </WithStyles(memo)>
                                                                          </button>
                                                                        </ForwardRef(ButtonBase)>
                                                                      </WithStyles(ForwardRef(ButtonBase))>
                                                                    </ForwardRef(IconButton)>
                                                                  </WithStyles(ForwardRef(IconButton))>
                                                                </div>
                                                              </ForwardRef(InputAdornment)>
                                                            </WithStyles(ForwardRef(InputAdornment))>
                                                          </div>
                                                        </ForwardRef(InputBase)>
                                                      </WithStyles(ForwardRef(InputBase))>
                                                    </ForwardRef(Input)>
                                                  </WithStyles(ForwardRef(Input))>
                                                </div>
                                              </ForwardRef(FormControl)>
                                            </WithStyles(ForwardRef(FormControl))>
                                          </ForwardRef(TextField)>
                                        </WithStyles(ForwardRef(TextField))>
                                      </TriggerTextField>
                                    </RegenTextField>
                                  </PasswordField>
                                </Field>
                              </div>
                            </ForwardRef(Paper)>
                          </WithStyles(ForwardRef(Paper))>
                        </ForwardRef(Card)>
                      </WithStyles(ForwardRef(Card))>
                    </RegenCard>
                  </OnBoardingCard>
                  <div
                    className="makeStyles-checkboxes-642"
                  >
                    <Field
                      component={[Function]}
                      label={
                        <Description
                          className="makeStyles-checkboxLabel-638"
                        >
                          Please sign me up for the Regen news and updates (unsubscribe anytime)
                        </Description>
                      }
                      name="updates"
                      type="checkbox"
                    >
                      <CheckboxLabel
                        field={
                          Object {
                            "checked": false,
                            "name": "updates",
                            "onBlur": [Function],
                            "onChange": [Function],
                            "value": false,
                          }
                        }
                        form={
                          Object {
                            "dirty": false,
                            "errors": Object {},
                            "getFieldHelpers": [Function],
                            "getFieldMeta": [Function],
                            "getFieldProps": [Function],
                            "handleBlur": [Function],
                            "handleChange": [Function],
                            "handleReset": [Function],
                            "handleSubmit": [Function],
                            "initialErrors": Object {},
                            "initialStatus": undefined,
                            "initialTouched": Object {},
                            "initialValues": Object {
                              "email": "",
                              "password": "",
                              "privacy": false,
                              "recaptcha": undefined,
                              "staySigned": false,
                              "updates": false,
                            },
                            "isSubmitting": false,
                            "isValid": true,
                            "isValidating": false,
                            "registerField": [Function],
                            "resetForm": [Function],
                            "setErrors": [Function],
                            "setFieldError": [Function],
                            "setFieldTouched": [Function],
                            "setFieldValue": [Function],
                            "setFormikState": [Function],
                            "setStatus": [Function],
                            "setSubmitting": [Function],
                            "setTouched": [Function],
                            "setValues": [Function],
                            "status": undefined,
                            "submitCount": 0,
                            "submitForm": [Function],
                            "touched": Object {},
                            "unregisterField": [Function],
                            "validateField": [Function],
                            "validateForm": [Function],
                            "validateOnBlur": true,
                            "validateOnChange": true,
                            "validateOnMount": false,
                            "values": Object {
                              "email": "",
                              "password": "",
                              "privacy": false,
                              "recaptcha": undefined,
                              "staySigned": false,
                              "updates": false,
                            },
                          }
                        }
                        label={
                          <Description
                            className="makeStyles-checkboxLabel-638"
                          >
                            Please sign me up for the Regen news and updates (unsubscribe anytime)
                          </Description>
                        }
                        type="checkbox"
                      >
                        <div
                          className="makeStyles-root-653"
                        >
                          <WithStyles(ForwardRef(FormControlLabel))
                            control={
                              <ForwardRef(WithStyles)
                                checked={false}
                                checkedIcon={<CheckedIcon />}
                                color="secondary"
                                disabled={false}
                                icon={<UncheckedIcon />}
                                indeterminate={false}
                                name="updates"
                                onBlur={[Function]}
                                onChange={[Function]}
                                value={false}
                              />
                            }
                            label={
                              <Description
                                className="makeStyles-checkboxLabel-638"
                              >
                                Please sign me up for the Regen news and updates (unsubscribe anytime)
                              </Description>
                            }
                          >
                            <ForwardRef(FormControlLabel)
                              classes={
                                Object {
                                  "disabled": "Mui-disabled",
                                  "label": "MuiFormControlLabel-label",
                                  "labelPlacementBottom": "MuiFormControlLabel-labelPlacementBottom",
                                  "labelPlacementStart": "MuiFormControlLabel-labelPlacementStart",
                                  "labelPlacementTop": "MuiFormControlLabel-labelPlacementTop",
                                  "root": "MuiFormControlLabel-root",
                                }
                              }
                              control={
                                <ForwardRef(WithStyles)
                                  checked={false}
                                  checkedIcon={<CheckedIcon />}
                                  color="secondary"
                                  disabled={false}
                                  icon={<UncheckedIcon />}
                                  indeterminate={false}
                                  name="updates"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  value={false}
                                />
                              }
                              label={
                                <Description
                                  className="makeStyles-checkboxLabel-638"
                                >
                                  Please sign me up for the Regen news and updates (unsubscribe anytime)
                                </Description>
                              }
                            >
                              <label
                                className="MuiFormControlLabel-root"
                              >
                                <WithStyles(ForwardRef(Checkbox))
                                  checked={false}
                                  checkedIcon={<CheckedIcon />}
                                  color="secondary"
                                  disabled={false}
                                  icon={<UncheckedIcon />}
                                  indeterminate={false}
                                  name="updates"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  value={false}
                                >
                                  <ForwardRef(Checkbox)
                                    checked={false}
                                    checkedIcon={<CheckedIcon />}
                                    classes={
                                      Object {
                                        "checked": "Mui-checked",
                                        "colorPrimary": "MuiCheckbox-colorPrimary",
                                        "colorSecondary": "MuiCheckbox-colorSecondary",
                                        "disabled": "Mui-disabled",
                                        "indeterminate": "MuiCheckbox-indeterminate",
                                        "root": "MuiCheckbox-root",
                                      }
                                    }
                                    color="secondary"
                                    disabled={false}
                                    icon={<UncheckedIcon />}
                                    indeterminate={false}
                                    name="updates"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    value={false}
                                  >
                                    <WithStyles(ForwardRef(SwitchBase))
                                      checked={false}
                                      checkedIcon={<CheckedIcon />}
                                      classes={
                                        Object {
                                          "checked": "Mui-checked",
                                          "disabled": "Mui-disabled",
                                          "root": "MuiCheckbox-root MuiCheckbox-colorSecondary",
                                        }
                                      }
                                      color="secondary"
                                      disabled={false}
                                      icon={<UncheckedIcon />}
                                      inputProps={
                                        Object {
                                          "data-indeterminate": false,
                                        }
                                      }
                                      name="updates"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      type="checkbox"
                                      value={false}
                                    >
                                      <ForwardRef(SwitchBase)
                                        checked={false}
                                        checkedIcon={<CheckedIcon />}
                                        classes={
                                          Object {
                                            "checked": "PrivateSwitchBase-checked-655 Mui-checked",
                                            "disabled": "PrivateSwitchBase-disabled-656 Mui-disabled",
                                            "input": "PrivateSwitchBase-input-657",
                                            "root": "PrivateSwitchBase-root-654 MuiCheckbox-root MuiCheckbox-colorSecondary",
                                          }
                                        }
                                        color="secondary"
                                        disabled={false}
                                        icon={<UncheckedIcon />}
                                        inputProps={
                                          Object {
                                            "data-indeterminate": false,
                                          }
                                        }
                                        name="updates"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        type="checkbox"
                                        value={false}
                                      >
                                        <WithStyles(ForwardRef(IconButton))
                                          className="PrivateSwitchBase-root-654 MuiCheckbox-root MuiCheckbox-colorSecondary"
                                          color="secondary"
                                          component="span"
                                          disabled={false}
                                          onBlur={[Function]}
                                          onFocus={[Function]}
                                          tabIndex={null}
                                        >
                                          <ForwardRef(IconButton)
                                            className="PrivateSwitchBase-root-654 MuiCheckbox-root MuiCheckbox-colorSecondary"
                                            classes={
                                              Object {
                                                "colorInherit": "MuiIconButton-colorInherit",
                                                "colorPrimary": "MuiIconButton-colorPrimary",
                                                "colorSecondary": "MuiIconButton-colorSecondary",
                                                "disabled": "Mui-disabled",
                                                "edgeEnd": "MuiIconButton-edgeEnd",
                                                "edgeStart": "MuiIconButton-edgeStart",
                                                "label": "MuiIconButton-label",
                                                "root": "MuiIconButton-root",
                                                "sizeSmall": "MuiIconButton-sizeSmall",
                                              }
                                            }
                                            color="secondary"
                                            component="span"
                                            disabled={false}
                                            onBlur={[Function]}
                                            onFocus={[Function]}
                                            tabIndex={null}
                                          >
                                            <WithStyles(ForwardRef(ButtonBase))
                                              centerRipple={true}
                                              className="MuiIconButton-root PrivateSwitchBase-root-654 MuiCheckbox-root MuiCheckbox-colorSecondary MuiIconButton-colorSecondary"
                                              component="span"
                                              disabled={false}
                                              focusRipple={true}
                                              onBlur={[Function]}
                                              onFocus={[Function]}
                                              tabIndex={null}
                                            >
                                              <ForwardRef(ButtonBase)
                                                centerRipple={true}
                                                className="MuiIconButton-root PrivateSwitchBase-root-654 MuiCheckbox-root MuiCheckbox-colorSecondary MuiIconButton-colorSecondary"
                                                classes={
                                                  Object {
                                                    "disabled": "Mui-disabled",
                                                    "focusVisible": "Mui-focusVisible",
                                                    "root": "MuiButtonBase-root",
                                                  }
                                                }
                                                component="span"
                                                disabled={false}
                                                focusRipple={true}
                                                onBlur={[Function]}
                                                onFocus={[Function]}
                                                tabIndex={null}
                                              >
                                                <span
                                                  aria-disabled={false}
                                                  className="MuiButtonBase-root MuiIconButton-root PrivateSwitchBase-root-654 MuiCheckbox-root MuiCheckbox-colorSecondary MuiIconButton-colorSecondary"
                                                  onBlur={[Function]}
                                                  onDragLeave={[Function]}
                                                  onFocus={[Function]}
                                                  onKeyDown={[Function]}
                                                  onKeyUp={[Function]}
                                                  onMouseDown={[Function]}
                                                  onMouseLeave={[Function]}
                                                  onMouseUp={[Function]}
                                                  onTouchEnd={[Function]}
                                                  onTouchMove={[Function]}
                                                  onTouchStart={[Function]}
                                                  tabIndex={null}
                                                >
                                                  <span
                                                    className="MuiIconButton-label"
                                                  >
                                                    <input
                                                      checked={false}
                                                      className="PrivateSwitchBase-input-657"
                                                      data-indeterminate={false}
                                                      disabled={false}
                                                      name="updates"
                                                      onChange={[Function]}
                                                      type="checkbox"
                                                      value={false}
                                                    />
                                                    <UncheckedIcon>
                                                      <WithStyles(ForwardRef(SvgIcon))
                                                        viewBox="0 0 20 20"
                                                      >
                                                        <ForwardRef(SvgIcon)
                                                          classes={
                                                            Object {
                                                              "colorAction": "MuiSvgIcon-colorAction",
                                                              "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                              "colorError": "MuiSvgIcon-colorError",
                                                              "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                              "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                              "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                              "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                              "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                              "root": "MuiSvgIcon-root",
                                                            }
                                                          }
                                                          viewBox="0 0 20 20"
                                                        >
                                                          <svg
                                                            aria-hidden={true}
                                                            className="MuiSvgIcon-root"
                                                            focusable="false"
                                                            viewBox="0 0 20 20"
                                                          >
                                                            <rect
                                                              fill="white"
                                                              height="19"
                                                              rx="0.5"
                                                              stroke="#D2D5D9"
                                                              width="19"
                                                              x="0.5"
                                                              y="0.5"
                                                            />
                                                          </svg>
                                                        </ForwardRef(SvgIcon)>
                                                      </WithStyles(ForwardRef(SvgIcon))>
                                                    </UncheckedIcon>
                                                  </span>
                                                  <WithStyles(memo)
                                                    center={true}
                                                  >
                                                    <ForwardRef(TouchRipple)
                                                      center={true}
                                                      classes={
                                                        Object {
                                                          "child": "MuiTouchRipple-child",
                                                          "childLeaving": "MuiTouchRipple-childLeaving",
                                                          "childPulsate": "MuiTouchRipple-childPulsate",
                                                          "ripple": "MuiTouchRipple-ripple",
                                                          "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                          "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                          "root": "MuiTouchRipple-root",
                                                        }
                                                      }
                                                    >
                                                      <span
                                                        className="MuiTouchRipple-root"
                                                      >
                                                        <TransitionGroup
                                                          childFactory={[Function]}
                                                          component={null}
                                                          exit={true}
                                                        />
                                                      </span>
                                                    </ForwardRef(TouchRipple)>
                                                  </WithStyles(memo)>
                                                </span>
                                              </ForwardRef(ButtonBase)>
                                            </WithStyles(ForwardRef(ButtonBase))>
                                          </ForwardRef(IconButton)>
                                        </WithStyles(ForwardRef(IconButton))>
                                      </ForwardRef(SwitchBase)>
                                    </WithStyles(ForwardRef(SwitchBase))>
                                  </ForwardRef(Checkbox)>
                                </WithStyles(ForwardRef(Checkbox))>
                                <WithStyles(ForwardRef(Typography))
                                  className="MuiFormControlLabel-label"
                                  component="span"
                                >
                                  <ForwardRef(Typography)
                                    className="MuiFormControlLabel-label"
                                    classes={
                                      Object {
                                        "alignCenter": "MuiTypography-alignCenter",
                                        "alignJustify": "MuiTypography-alignJustify",
                                        "alignLeft": "MuiTypography-alignLeft",
                                        "alignRight": "MuiTypography-alignRight",
                                        "body1": "MuiTypography-body1",
                                        "body2": "MuiTypography-body2",
                                        "button": "MuiTypography-button",
                                        "caption": "MuiTypography-caption",
                                        "colorError": "MuiTypography-colorError",
                                        "colorInherit": "MuiTypography-colorInherit",
                                        "colorPrimary": "MuiTypography-colorPrimary",
                                        "colorSecondary": "MuiTypography-colorSecondary",
                                        "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                        "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                        "displayBlock": "MuiTypography-displayBlock",
                                        "displayInline": "MuiTypography-displayInline",
                                        "gutterBottom": "MuiTypography-gutterBottom",
                                        "h1": "MuiTypography-h1",
                                        "h2": "MuiTypography-h2",
                                        "h3": "MuiTypography-h3",
                                        "h4": "MuiTypography-h4",
                                        "h5": "MuiTypography-h5",
                                        "h6": "MuiTypography-h6",
                                        "noWrap": "MuiTypography-noWrap",
                                        "overline": "MuiTypography-overline",
                                        "paragraph": "MuiTypography-paragraph",
                                        "root": "MuiTypography-root",
                                        "srOnly": "MuiTypography-srOnly",
                                        "subtitle1": "MuiTypography-subtitle1",
                                        "subtitle2": "MuiTypography-subtitle2",
                                      }
                                    }
                                    component="span"
                                    variantMapping={
                                      Object {
                                        "body1": "p",
                                        "body2": "p",
                                        "h1": "h1",
                                        "h2": "h2",
                                        "h3": "h3",
                                        "h4": "h4",
                                        "h5": "h5",
                                        "h6": "h6",
                                        "subtitle1": "h2",
                                        "subtitle2": "h2",
                                      }
                                    }
                                  >
                                    <span
                                      className="MuiTypography-root MuiFormControlLabel-label MuiTypography-body1"
                                    >
                                      <Description
                                        className="makeStyles-checkboxLabel-638"
                                      >
                                        <WithStyles(ForwardRef(Typography))
                                          className="makeStyles-root-646 makeStyles-root-658 makeStyles-checkboxLabel-638"
                                          component="div"
                                        >
                                          <ForwardRef(Typography)
                                            className="makeStyles-root-646 makeStyles-root-658 makeStyles-checkboxLabel-638"
                                            classes={
                                              Object {
                                                "alignCenter": "MuiTypography-alignCenter",
                                                "alignJustify": "MuiTypography-alignJustify",
                                                "alignLeft": "MuiTypography-alignLeft",
                                                "alignRight": "MuiTypography-alignRight",
                                                "body1": "MuiTypography-body1",
                                                "body2": "MuiTypography-body2",
                                                "button": "MuiTypography-button",
                                                "caption": "MuiTypography-caption",
                                                "colorError": "MuiTypography-colorError",
                                                "colorInherit": "MuiTypography-colorInherit",
                                                "colorPrimary": "MuiTypography-colorPrimary",
                                                "colorSecondary": "MuiTypography-colorSecondary",
                                                "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                                "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                                "displayBlock": "MuiTypography-displayBlock",
                                                "displayInline": "MuiTypography-displayInline",
                                                "gutterBottom": "MuiTypography-gutterBottom",
                                                "h1": "MuiTypography-h1",
                                                "h2": "MuiTypography-h2",
                                                "h3": "MuiTypography-h3",
                                                "h4": "MuiTypography-h4",
                                                "h5": "MuiTypography-h5",
                                                "h6": "MuiTypography-h6",
                                                "noWrap": "MuiTypography-noWrap",
                                                "overline": "MuiTypography-overline",
                                                "paragraph": "MuiTypography-paragraph",
                                                "root": "MuiTypography-root",
                                                "srOnly": "MuiTypography-srOnly",
                                                "subtitle1": "MuiTypography-subtitle1",
                                                "subtitle2": "MuiTypography-subtitle2",
                                              }
                                            }
                                            component="div"
                                            variantMapping={
                                              Object {
                                                "body1": "p",
                                                "body2": "p",
                                                "h1": "h1",
                                                "h2": "h2",
                                                "h3": "h3",
                                                "h4": "h4",
                                                "h5": "h5",
                                                "h6": "h6",
                                                "subtitle1": "h2",
                                                "subtitle2": "h2",
                                              }
                                            }
                                          >
                                            <div
                                              className="MuiTypography-root makeStyles-root-646 makeStyles-root-658 makeStyles-checkboxLabel-638 MuiTypography-body1"
                                            >
                                              Please sign me up for the Regen news and updates (unsubscribe anytime)
                                            </div>
                                          </ForwardRef(Typography)>
                                        </WithStyles(ForwardRef(Typography))>
                                      </Description>
                                    </span>
                                  </ForwardRef(Typography)>
                                </WithStyles(ForwardRef(Typography))>
                              </label>
                            </ForwardRef(FormControlLabel)>
                          </WithStyles(ForwardRef(FormControlLabel))>
                        </div>
                      </CheckboxLabel>
                    </Field>
                    <Field
                      component={[Function]}
                      label={
                        <Description
                          className="makeStyles-checkboxLabel-638"
                        >
                          I agree to the Regen Network 
                          <ForwardRef(WithStyles)
                            href="https://www.regen.network/privacy-policy/"
                          >
                            Privacy Policy
                          </ForwardRef(WithStyles)>
                           and
                           
                          <ForwardRef(WithStyles)
                            href="https://www.regen.network/terms-service/"
                          >
                            Terms of Service
                          </ForwardRef(WithStyles)>
                        </Description>
                      }
                      name="privacy"
                      type="checkbox"
                    >
                      <CheckboxLabel
                        field={
                          Object {
                            "checked": false,
                            "name": "privacy",
                            "onBlur": [Function],
                            "onChange": [Function],
                            "value": false,
                          }
                        }
                        form={
                          Object {
                            "dirty": false,
                            "errors": Object {},
                            "getFieldHelpers": [Function],
                            "getFieldMeta": [Function],
                            "getFieldProps": [Function],
                            "handleBlur": [Function],
                            "handleChange": [Function],
                            "handleReset": [Function],
                            "handleSubmit": [Function],
                            "initialErrors": Object {},
                            "initialStatus": undefined,
                            "initialTouched": Object {},
                            "initialValues": Object {
                              "email": "",
                              "password": "",
                              "privacy": false,
                              "recaptcha": undefined,
                              "staySigned": false,
                              "updates": false,
                            },
                            "isSubmitting": false,
                            "isValid": true,
                            "isValidating": false,
                            "registerField": [Function],
                            "resetForm": [Function],
                            "setErrors": [Function],
                            "setFieldError": [Function],
                            "setFieldTouched": [Function],
                            "setFieldValue": [Function],
                            "setFormikState": [Function],
                            "setStatus": [Function],
                            "setSubmitting": [Function],
                            "setTouched": [Function],
                            "setValues": [Function],
                            "status": undefined,
                            "submitCount": 0,
                            "submitForm": [Function],
                            "touched": Object {},
                            "unregisterField": [Function],
                            "validateField": [Function],
                            "validateForm": [Function],
                            "validateOnBlur": true,
                            "validateOnChange": true,
                            "validateOnMount": false,
                            "values": Object {
                              "email": "",
                              "password": "",
                              "privacy": false,
                              "recaptcha": undefined,
                              "staySigned": false,
                              "updates": false,
                            },
                          }
                        }
                        label={
                          <Description
                            className="makeStyles-checkboxLabel-638"
                          >
                            I agree to the Regen Network 
                            <ForwardRef(WithStyles)
                              href="https://www.regen.network/privacy-policy/"
                            >
                              Privacy Policy
                            </ForwardRef(WithStyles)>
                             and
                             
                            <ForwardRef(WithStyles)
                              href="https://www.regen.network/terms-service/"
                            >
                              Terms of Service
                            </ForwardRef(WithStyles)>
                          </Description>
                        }
                        type="checkbox"
                      >
                        <div
                          className="makeStyles-root-653"
                        >
                          <WithStyles(ForwardRef(FormControlLabel))
                            control={
                              <ForwardRef(WithStyles)
                                checked={false}
                                checkedIcon={<CheckedIcon />}
                                color="secondary"
                                disabled={false}
                                icon={<UncheckedIcon />}
                                indeterminate={false}
                                name="privacy"
                                onBlur={[Function]}
                                onChange={[Function]}
                                value={false}
                              />
                            }
                            label={
                              <Description
                                className="makeStyles-checkboxLabel-638"
                              >
                                I agree to the Regen Network 
                                <ForwardRef(WithStyles)
                                  href="https://www.regen.network/privacy-policy/"
                                >
                                  Privacy Policy
                                </ForwardRef(WithStyles)>
                                 and
                                 
                                <ForwardRef(WithStyles)
                                  href="https://www.regen.network/terms-service/"
                                >
                                  Terms of Service
                                </ForwardRef(WithStyles)>
                              </Description>
                            }
                          >
                            <ForwardRef(FormControlLabel)
                              classes={
                                Object {
                                  "disabled": "Mui-disabled",
                                  "label": "MuiFormControlLabel-label",
                                  "labelPlacementBottom": "MuiFormControlLabel-labelPlacementBottom",
                                  "labelPlacementStart": "MuiFormControlLabel-labelPlacementStart",
                                  "labelPlacementTop": "MuiFormControlLabel-labelPlacementTop",
                                  "root": "MuiFormControlLabel-root",
                                }
                              }
                              control={
                                <ForwardRef(WithStyles)
                                  checked={false}
                                  checkedIcon={<CheckedIcon />}
                                  color="secondary"
                                  disabled={false}
                                  icon={<UncheckedIcon />}
                                  indeterminate={false}
                                  name="privacy"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  value={false}
                                />
                              }
                              label={
                                <Description
                                  className="makeStyles-checkboxLabel-638"
                                >
                                  I agree to the Regen Network 
                                  <ForwardRef(WithStyles)
                                    href="https://www.regen.network/privacy-policy/"
                                  >
                                    Privacy Policy
                                  </ForwardRef(WithStyles)>
                                   and
                                   
                                  <ForwardRef(WithStyles)
                                    href="https://www.regen.network/terms-service/"
                                  >
                                    Terms of Service
                                  </ForwardRef(WithStyles)>
                                </Description>
                              }
                            >
                              <label
                                className="MuiFormControlLabel-root"
                              >
                                <WithStyles(ForwardRef(Checkbox))
                                  checked={false}
                                  checkedIcon={<CheckedIcon />}
                                  color="secondary"
                                  disabled={false}
                                  icon={<UncheckedIcon />}
                                  indeterminate={false}
                                  name="privacy"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  value={false}
                                >
                                  <ForwardRef(Checkbox)
                                    checked={false}
                                    checkedIcon={<CheckedIcon />}
                                    classes={
                                      Object {
                                        "checked": "Mui-checked",
                                        "colorPrimary": "MuiCheckbox-colorPrimary",
                                        "colorSecondary": "MuiCheckbox-colorSecondary",
                                        "disabled": "Mui-disabled",
                                        "indeterminate": "MuiCheckbox-indeterminate",
                                        "root": "MuiCheckbox-root",
                                      }
                                    }
                                    color="secondary"
                                    disabled={false}
                                    icon={<UncheckedIcon />}
                                    indeterminate={false}
                                    name="privacy"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    value={false}
                                  >
                                    <WithStyles(ForwardRef(SwitchBase))
                                      checked={false}
                                      checkedIcon={<CheckedIcon />}
                                      classes={
                                        Object {
                                          "checked": "Mui-checked",
                                          "disabled": "Mui-disabled",
                                          "root": "MuiCheckbox-root MuiCheckbox-colorSecondary",
                                        }
                                      }
                                      color="secondary"
                                      disabled={false}
                                      icon={<UncheckedIcon />}
                                      inputProps={
                                        Object {
                                          "data-indeterminate": false,
                                        }
                                      }
                                      name="privacy"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      type="checkbox"
                                      value={false}
                                    >
                                      <ForwardRef(SwitchBase)
                                        checked={false}
                                        checkedIcon={<CheckedIcon />}
                                        classes={
                                          Object {
                                            "checked": "PrivateSwitchBase-checked-655 Mui-checked",
                                            "disabled": "PrivateSwitchBase-disabled-656 Mui-disabled",
                                            "input": "PrivateSwitchBase-input-657",
                                            "root": "PrivateSwitchBase-root-654 MuiCheckbox-root MuiCheckbox-colorSecondary",
                                          }
                                        }
                                        color="secondary"
                                        disabled={false}
                                        icon={<UncheckedIcon />}
                                        inputProps={
                                          Object {
                                            "data-indeterminate": false,
                                          }
                                        }
                                        name="privacy"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        type="checkbox"
                                        value={false}
                                      >
                                        <WithStyles(ForwardRef(IconButton))
                                          className="PrivateSwitchBase-root-654 MuiCheckbox-root MuiCheckbox-colorSecondary"
                                          color="secondary"
                                          component="span"
                                          disabled={false}
                                          onBlur={[Function]}
                                          onFocus={[Function]}
                                          tabIndex={null}
                                        >
                                          <ForwardRef(IconButton)
                                            className="PrivateSwitchBase-root-654 MuiCheckbox-root MuiCheckbox-colorSecondary"
                                            classes={
                                              Object {
                                                "colorInherit": "MuiIconButton-colorInherit",
                                                "colorPrimary": "MuiIconButton-colorPrimary",
                                                "colorSecondary": "MuiIconButton-colorSecondary",
                                                "disabled": "Mui-disabled",
                                                "edgeEnd": "MuiIconButton-edgeEnd",
                                                "edgeStart": "MuiIconButton-edgeStart",
                                                "label": "MuiIconButton-label",
                                                "root": "MuiIconButton-root",
                                                "sizeSmall": "MuiIconButton-sizeSmall",
                                              }
                                            }
                                            color="secondary"
                                            component="span"
                                            disabled={false}
                                            onBlur={[Function]}
                                            onFocus={[Function]}
                                            tabIndex={null}
                                          >
                                            <WithStyles(ForwardRef(ButtonBase))
                                              centerRipple={true}
                                              className="MuiIconButton-root PrivateSwitchBase-root-654 MuiCheckbox-root MuiCheckbox-colorSecondary MuiIconButton-colorSecondary"
                                              component="span"
                                              disabled={false}
                                              focusRipple={true}
                                              onBlur={[Function]}
                                              onFocus={[Function]}
                                              tabIndex={null}
                                            >
                                              <ForwardRef(ButtonBase)
                                                centerRipple={true}
                                                className="MuiIconButton-root PrivateSwitchBase-root-654 MuiCheckbox-root MuiCheckbox-colorSecondary MuiIconButton-colorSecondary"
                                                classes={
                                                  Object {
                                                    "disabled": "Mui-disabled",
                                                    "focusVisible": "Mui-focusVisible",
                                                    "root": "MuiButtonBase-root",
                                                  }
                                                }
                                                component="span"
                                                disabled={false}
                                                focusRipple={true}
                                                onBlur={[Function]}
                                                onFocus={[Function]}
                                                tabIndex={null}
                                              >
                                                <span
                                                  aria-disabled={false}
                                                  className="MuiButtonBase-root MuiIconButton-root PrivateSwitchBase-root-654 MuiCheckbox-root MuiCheckbox-colorSecondary MuiIconButton-colorSecondary"
                                                  onBlur={[Function]}
                                                  onDragLeave={[Function]}
                                                  onFocus={[Function]}
                                                  onKeyDown={[Function]}
                                                  onKeyUp={[Function]}
                                                  onMouseDown={[Function]}
                                                  onMouseLeave={[Function]}
                                                  onMouseUp={[Function]}
                                                  onTouchEnd={[Function]}
                                                  onTouchMove={[Function]}
                                                  onTouchStart={[Function]}
                                                  tabIndex={null}
                                                >
                                                  <span
                                                    className="MuiIconButton-label"
                                                  >
                                                    <input
                                                      checked={false}
                                                      className="PrivateSwitchBase-input-657"
                                                      data-indeterminate={false}
                                                      disabled={false}
                                                      name="privacy"
                                                      onChange={[Function]}
                                                      type="checkbox"
                                                      value={false}
                                                    />
                                                    <UncheckedIcon>
                                                      <WithStyles(ForwardRef(SvgIcon))
                                                        viewBox="0 0 20 20"
                                                      >
                                                        <ForwardRef(SvgIcon)
                                                          classes={
                                                            Object {
                                                              "colorAction": "MuiSvgIcon-colorAction",
                                                              "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                              "colorError": "MuiSvgIcon-colorError",
                                                              "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                              "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                              "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                              "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                              "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                              "root": "MuiSvgIcon-root",
                                                            }
                                                          }
                                                          viewBox="0 0 20 20"
                                                        >
                                                          <svg
                                                            aria-hidden={true}
                                                            className="MuiSvgIcon-root"
                                                            focusable="false"
                                                            viewBox="0 0 20 20"
                                                          >
                                                            <rect
                                                              fill="white"
                                                              height="19"
                                                              rx="0.5"
                                                              stroke="#D2D5D9"
                                                              width="19"
                                                              x="0.5"
                                                              y="0.5"
                                                            />
                                                          </svg>
                                                        </ForwardRef(SvgIcon)>
                                                      </WithStyles(ForwardRef(SvgIcon))>
                                                    </UncheckedIcon>
                                                  </span>
                                                  <WithStyles(memo)
                                                    center={true}
                                                  >
                                                    <ForwardRef(TouchRipple)
                                                      center={true}
                                                      classes={
                                                        Object {
                                                          "child": "MuiTouchRipple-child",
                                                          "childLeaving": "MuiTouchRipple-childLeaving",
                                                          "childPulsate": "MuiTouchRipple-childPulsate",
                                                          "ripple": "MuiTouchRipple-ripple",
                                                          "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                          "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                          "root": "MuiTouchRipple-root",
                                                        }
                                                      }
                                                    >
                                                      <span
                                                        className="MuiTouchRipple-root"
                                                      >
                                                        <TransitionGroup
                                                          childFactory={[Function]}
                                                          component={null}
                                                          exit={true}
                                                        />
                                                      </span>
                                                    </ForwardRef(TouchRipple)>
                                                  </WithStyles(memo)>
                                                </span>
                                              </ForwardRef(ButtonBase)>
                                            </WithStyles(ForwardRef(ButtonBase))>
                                          </ForwardRef(IconButton)>
                                        </WithStyles(ForwardRef(IconButton))>
                                      </ForwardRef(SwitchBase)>
                                    </WithStyles(ForwardRef(SwitchBase))>
                                  </ForwardRef(Checkbox)>
                                </WithStyles(ForwardRef(Checkbox))>
                                <WithStyles(ForwardRef(Typography))
                                  className="MuiFormControlLabel-label"
                                  component="span"
                                >
                                  <ForwardRef(Typography)
                                    className="MuiFormControlLabel-label"
                                    classes={
                                      Object {
                                        "alignCenter": "MuiTypography-alignCenter",
                                        "alignJustify": "MuiTypography-alignJustify",
                                        "alignLeft": "MuiTypography-alignLeft",
                                        "alignRight": "MuiTypography-alignRight",
                                        "body1": "MuiTypography-body1",
                                        "body2": "MuiTypography-body2",
                                        "button": "MuiTypography-button",
                                        "caption": "MuiTypography-caption",
                                        "colorError": "MuiTypography-colorError",
                                        "colorInherit": "MuiTypography-colorInherit",
                                        "colorPrimary": "MuiTypography-colorPrimary",
                                        "colorSecondary": "MuiTypography-colorSecondary",
                                        "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                        "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                        "displayBlock": "MuiTypography-displayBlock",
                                        "displayInline": "MuiTypography-displayInline",
                                        "gutterBottom": "MuiTypography-gutterBottom",
                                        "h1": "MuiTypography-h1",
                                        "h2": "MuiTypography-h2",
                                        "h3": "MuiTypography-h3",
                                        "h4": "MuiTypography-h4",
                                        "h5": "MuiTypography-h5",
                                        "h6": "MuiTypography-h6",
                                        "noWrap": "MuiTypography-noWrap",
                                        "overline": "MuiTypography-overline",
                                        "paragraph": "MuiTypography-paragraph",
                                        "root": "MuiTypography-root",
                                        "srOnly": "MuiTypography-srOnly",
                                        "subtitle1": "MuiTypography-subtitle1",
                                        "subtitle2": "MuiTypography-subtitle2",
                                      }
                                    }
                                    component="span"
                                    variantMapping={
                                      Object {
                                        "body1": "p",
                                        "body2": "p",
                                        "h1": "h1",
                                        "h2": "h2",
                                        "h3": "h3",
                                        "h4": "h4",
                                        "h5": "h5",
                                        "h6": "h6",
                                        "subtitle1": "h2",
                                        "subtitle2": "h2",
                                      }
                                    }
                                  >
                                    <span
                                      className="MuiTypography-root MuiFormControlLabel-label MuiTypography-body1"
                                    >
                                      <Description
                                        className="makeStyles-checkboxLabel-638"
                                      >
                                        <WithStyles(ForwardRef(Typography))
                                          className="makeStyles-root-646 makeStyles-root-659 makeStyles-checkboxLabel-638"
                                          component="div"
                                        >
                                          <ForwardRef(Typography)
                                            className="makeStyles-root-646 makeStyles-root-659 makeStyles-checkboxLabel-638"
                                            classes={
                                              Object {
                                                "alignCenter": "MuiTypography-alignCenter",
                                                "alignJustify": "MuiTypography-alignJustify",
                                                "alignLeft": "MuiTypography-alignLeft",
                                                "alignRight": "MuiTypography-alignRight",
                                                "body1": "MuiTypography-body1",
                                                "body2": "MuiTypography-body2",
                                                "button": "MuiTypography-button",
                                                "caption": "MuiTypography-caption",
                                                "colorError": "MuiTypography-colorError",
                                                "colorInherit": "MuiTypography-colorInherit",
                                                "colorPrimary": "MuiTypography-colorPrimary",
                                                "colorSecondary": "MuiTypography-colorSecondary",
                                                "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                                "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                                "displayBlock": "MuiTypography-displayBlock",
                                                "displayInline": "MuiTypography-displayInline",
                                                "gutterBottom": "MuiTypography-gutterBottom",
                                                "h1": "MuiTypography-h1",
                                                "h2": "MuiTypography-h2",
                                                "h3": "MuiTypography-h3",
                                                "h4": "MuiTypography-h4",
                                                "h5": "MuiTypography-h5",
                                                "h6": "MuiTypography-h6",
                                                "noWrap": "MuiTypography-noWrap",
                                                "overline": "MuiTypography-overline",
                                                "paragraph": "MuiTypography-paragraph",
                                                "root": "MuiTypography-root",
                                                "srOnly": "MuiTypography-srOnly",
                                                "subtitle1": "MuiTypography-subtitle1",
                                                "subtitle2": "MuiTypography-subtitle2",
                                              }
                                            }
                                            component="div"
                                            variantMapping={
                                              Object {
                                                "body1": "p",
                                                "body2": "p",
                                                "h1": "h1",
                                                "h2": "h2",
                                                "h3": "h3",
                                                "h4": "h4",
                                                "h5": "h5",
                                                "h6": "h6",
                                                "subtitle1": "h2",
                                                "subtitle2": "h2",
                                              }
                                            }
                                          >
                                            <div
                                              className="MuiTypography-root makeStyles-root-646 makeStyles-root-659 makeStyles-checkboxLabel-638 MuiTypography-body1"
                                            >
                                              I agree to the Regen Network 
                                              <WithStyles(ForwardRef(Link))
                                                href="https://www.regen.network/privacy-policy/"
                                              >
                                                <ForwardRef(Link)
                                                  classes={
                                                    Object {
                                                      "button": "MuiLink-button",
                                                      "focusVisible": "Mui-focusVisible",
                                                      "root": "MuiLink-root",
                                                      "underlineAlways": "MuiLink-underlineAlways",
                                                      "underlineHover": "MuiLink-underlineHover",
                                                      "underlineNone": "MuiLink-underlineNone",
                                                    }
                                                  }
                                                  href="https://www.regen.network/privacy-policy/"
                                                >
                                                  <WithStyles(ForwardRef(Typography))
                                                    className="MuiLink-root MuiLink-underlineHover"
                                                    color="primary"
                                                    component="a"
                                                    href="https://www.regen.network/privacy-policy/"
                                                    onBlur={[Function]}
                                                    onFocus={[Function]}
                                                    variant="inherit"
                                                  >
                                                    <ForwardRef(Typography)
                                                      className="MuiLink-root MuiLink-underlineHover"
                                                      classes={
                                                        Object {
                                                          "alignCenter": "MuiTypography-alignCenter",
                                                          "alignJustify": "MuiTypography-alignJustify",
                                                          "alignLeft": "MuiTypography-alignLeft",
                                                          "alignRight": "MuiTypography-alignRight",
                                                          "body1": "MuiTypography-body1",
                                                          "body2": "MuiTypography-body2",
                                                          "button": "MuiTypography-button",
                                                          "caption": "MuiTypography-caption",
                                                          "colorError": "MuiTypography-colorError",
                                                          "colorInherit": "MuiTypography-colorInherit",
                                                          "colorPrimary": "MuiTypography-colorPrimary",
                                                          "colorSecondary": "MuiTypography-colorSecondary",
                                                          "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                                          "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                                          "displayBlock": "MuiTypography-displayBlock",
                                                          "displayInline": "MuiTypography-displayInline",
                                                          "gutterBottom": "MuiTypography-gutterBottom",
                                                          "h1": "MuiTypography-h1",
                                                          "h2": "MuiTypography-h2",
                                                          "h3": "MuiTypography-h3",
                                                          "h4": "MuiTypography-h4",
                                                          "h5": "MuiTypography-h5",
                                                          "h6": "MuiTypography-h6",
                                                          "noWrap": "MuiTypography-noWrap",
                                                          "overline": "MuiTypography-overline",
                                                          "paragraph": "MuiTypography-paragraph",
                                                          "root": "MuiTypography-root",
                                                          "srOnly": "MuiTypography-srOnly",
                                                          "subtitle1": "MuiTypography-subtitle1",
                                                          "subtitle2": "MuiTypography-subtitle2",
                                                        }
                                                      }
                                                      color="primary"
                                                      component="a"
                                                      href="https://www.regen.network/privacy-policy/"
                                                      onBlur={[Function]}
                                                      onFocus={[Function]}
                                                      variant="inherit"
                                                      variantMapping={
                                                        Object {
                                                          "body1": "p",
                                                          "body2": "p",
                                                          "h1": "h1",
                                                          "h2": "h2",
                                                          "h3": "h3",
                                                          "h4": "h4",
                                                          "h5": "h5",
                                                          "h6": "h6",
                                                          "subtitle1": "h2",
                                                          "subtitle2": "h2",
                                                        }
                                                      }
                                                    >
                                                      <a
                                                        className="MuiTypography-root MuiLink-root MuiLink-underlineHover MuiTypography-colorPrimary"
                                                        href="https://www.regen.network/privacy-policy/"
                                                        onBlur={[Function]}
                                                        onFocus={[Function]}
                                                      >
                                                        Privacy Policy
                                                      </a>
                                                    </ForwardRef(Typography)>
                                                  </WithStyles(ForwardRef(Typography))>
                                                </ForwardRef(Link)>
                                              </WithStyles(ForwardRef(Link))>
                                               and
                                               
                                              <WithStyles(ForwardRef(Link))
                                                href="https://www.regen.network/terms-service/"
                                              >
                                                <ForwardRef(Link)
                                                  classes={
                                                    Object {
                                                      "button": "MuiLink-button",
                                                      "focusVisible": "Mui-focusVisible",
                                                      "root": "MuiLink-root",
                                                      "underlineAlways": "MuiLink-underlineAlways",
                                                      "underlineHover": "MuiLink-underlineHover",
                                                      "underlineNone": "MuiLink-underlineNone",
                                                    }
                                                  }
                                                  href="https://www.regen.network/terms-service/"
                                                >
                                                  <WithStyles(ForwardRef(Typography))
                                                    className="MuiLink-root MuiLink-underlineHover"
                                                    color="primary"
                                                    component="a"
                                                    href="https://www.regen.network/terms-service/"
                                                    onBlur={[Function]}
                                                    onFocus={[Function]}
                                                    variant="inherit"
                                                  >
                                                    <ForwardRef(Typography)
                                                      className="MuiLink-root MuiLink-underlineHover"
                                                      classes={
                                                        Object {
                                                          "alignCenter": "MuiTypography-alignCenter",
                                                          "alignJustify": "MuiTypography-alignJustify",
                                                          "alignLeft": "MuiTypography-alignLeft",
                                                          "alignRight": "MuiTypography-alignRight",
                                                          "body1": "MuiTypography-body1",
                                                          "body2": "MuiTypography-body2",
                                                          "button": "MuiTypography-button",
                                                          "caption": "MuiTypography-caption",
                                                          "colorError": "MuiTypography-colorError",
                                                          "colorInherit": "MuiTypography-colorInherit",
                                                          "colorPrimary": "MuiTypography-colorPrimary",
                                                          "colorSecondary": "MuiTypography-colorSecondary",
                                                          "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                                          "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                                          "displayBlock": "MuiTypography-displayBlock",
                                                          "displayInline": "MuiTypography-displayInline",
                                                          "gutterBottom": "MuiTypography-gutterBottom",
                                                          "h1": "MuiTypography-h1",
                                                          "h2": "MuiTypography-h2",
                                                          "h3": "MuiTypography-h3",
                                                          "h4": "MuiTypography-h4",
                                                          "h5": "MuiTypography-h5",
                                                          "h6": "MuiTypography-h6",
                                                          "noWrap": "MuiTypography-noWrap",
                                                          "overline": "MuiTypography-overline",
                                                          "paragraph": "MuiTypography-paragraph",
                                                          "root": "MuiTypography-root",
                                                          "srOnly": "MuiTypography-srOnly",
                                                          "subtitle1": "MuiTypography-subtitle1",
                                                          "subtitle2": "MuiTypography-subtitle2",
                                                        }
                                                      }
                                                      color="primary"
                                                      component="a"
                                                      href="https://www.regen.network/terms-service/"
                                                      onBlur={[Function]}
                                                      onFocus={[Function]}
                                                      variant="inherit"
                                                      variantMapping={
                                                        Object {
                                                          "body1": "p",
                                                          "body2": "p",
                                                          "h1": "h1",
                                                          "h2": "h2",
                                                          "h3": "h3",
                                                          "h4": "h4",
                                                          "h5": "h5",
                                                          "h6": "h6",
                                                          "subtitle1": "h2",
                                                          "subtitle2": "h2",
                                                        }
                                                      }
                                                    >
                                                      <a
                                                        className="MuiTypography-root MuiLink-root MuiLink-underlineHover MuiTypography-colorPrimary"
                                                        href="https://www.regen.network/terms-service/"
                                                        onBlur={[Function]}
                                                        onFocus={[Function]}
                                                      >
                                                        Terms of Service
                                                      </a>
                                                    </ForwardRef(Typography)>
                                                  </WithStyles(ForwardRef(Typography))>
                                                </ForwardRef(Link)>
                                              </WithStyles(ForwardRef(Link))>
                                            </div>
                                          </ForwardRef(Typography)>
                                        </WithStyles(ForwardRef(Typography))>
                                      </Description>
                                    </span>
                                  </ForwardRef(Typography)>
                                </WithStyles(ForwardRef(Typography))>
                              </label>
                            </ForwardRef(FormControlLabel)>
                          </WithStyles(ForwardRef(FormControlLabel))>
                        </div>
                      </CheckboxLabel>
                    </Field>
                  </div>
                  <WithStyles(ForwardRef(Grid))
                    container={true}
                    justify="flex-end"
                  >
                    <ForwardRef(Grid)
                      classes={
                        Object {
                          "align-content-xs-center": "MuiGrid-align-content-xs-center",
                          "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                          "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                          "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                          "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                          "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                          "align-items-xs-center": "MuiGrid-align-items-xs-center",
                          "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                          "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                          "container": "MuiGrid-container",
                          "direction-xs-column": "MuiGrid-direction-xs-column",
                          "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                          "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                          "grid-lg-1": "MuiGrid-grid-lg-1",
                          "grid-lg-10": "MuiGrid-grid-lg-10",
                          "grid-lg-11": "MuiGrid-grid-lg-11",
                          "grid-lg-12": "MuiGrid-grid-lg-12",
                          "grid-lg-2": "MuiGrid-grid-lg-2",
                          "grid-lg-3": "MuiGrid-grid-lg-3",
                          "grid-lg-4": "MuiGrid-grid-lg-4",
                          "grid-lg-5": "MuiGrid-grid-lg-5",
                          "grid-lg-6": "MuiGrid-grid-lg-6",
                          "grid-lg-7": "MuiGrid-grid-lg-7",
                          "grid-lg-8": "MuiGrid-grid-lg-8",
                          "grid-lg-9": "MuiGrid-grid-lg-9",
                          "grid-lg-auto": "MuiGrid-grid-lg-auto",
                          "grid-lg-true": "MuiGrid-grid-lg-true",
                          "grid-md-1": "MuiGrid-grid-md-1",
                          "grid-md-10": "MuiGrid-grid-md-10",
                          "grid-md-11": "MuiGrid-grid-md-11",
                          "grid-md-12": "MuiGrid-grid-md-12",
                          "grid-md-2": "MuiGrid-grid-md-2",
                          "grid-md-3": "MuiGrid-grid-md-3",
                          "grid-md-4": "MuiGrid-grid-md-4",
                          "grid-md-5": "MuiGrid-grid-md-5",
                          "grid-md-6": "MuiGrid-grid-md-6",
                          "grid-md-7": "MuiGrid-grid-md-7",
                          "grid-md-8": "MuiGrid-grid-md-8",
                          "grid-md-9": "MuiGrid-grid-md-9",
                          "grid-md-auto": "MuiGrid-grid-md-auto",
                          "grid-md-true": "MuiGrid-grid-md-true",
                          "grid-sm-1": "MuiGrid-grid-sm-1",
                          "grid-sm-10": "MuiGrid-grid-sm-10",
                          "grid-sm-11": "MuiGrid-grid-sm-11",
                          "grid-sm-12": "MuiGrid-grid-sm-12",
                          "grid-sm-2": "MuiGrid-grid-sm-2",
                          "grid-sm-3": "MuiGrid-grid-sm-3",
                          "grid-sm-4": "MuiGrid-grid-sm-4",
                          "grid-sm-5": "MuiGrid-grid-sm-5",
                          "grid-sm-6": "MuiGrid-grid-sm-6",
                          "grid-sm-7": "MuiGrid-grid-sm-7",
                          "grid-sm-8": "MuiGrid-grid-sm-8",
                          "grid-sm-9": "MuiGrid-grid-sm-9",
                          "grid-sm-auto": "MuiGrid-grid-sm-auto",
                          "grid-sm-true": "MuiGrid-grid-sm-true",
                          "grid-xl-1": "MuiGrid-grid-xl-1",
                          "grid-xl-10": "MuiGrid-grid-xl-10",
                          "grid-xl-11": "MuiGrid-grid-xl-11",
                          "grid-xl-12": "MuiGrid-grid-xl-12",
                          "grid-xl-2": "MuiGrid-grid-xl-2",
                          "grid-xl-3": "MuiGrid-grid-xl-3",
                          "grid-xl-4": "MuiGrid-grid-xl-4",
                          "grid-xl-5": "MuiGrid-grid-xl-5",
                          "grid-xl-6": "MuiGrid-grid-xl-6",
                          "grid-xl-7": "MuiGrid-grid-xl-7",
                          "grid-xl-8": "MuiGrid-grid-xl-8",
                          "grid-xl-9": "MuiGrid-grid-xl-9",
                          "grid-xl-auto": "MuiGrid-grid-xl-auto",
                          "grid-xl-true": "MuiGrid-grid-xl-true",
                          "grid-xs-1": "MuiGrid-grid-xs-1",
                          "grid-xs-10": "MuiGrid-grid-xs-10",
                          "grid-xs-11": "MuiGrid-grid-xs-11",
                          "grid-xs-12": "MuiGrid-grid-xs-12",
                          "grid-xs-2": "MuiGrid-grid-xs-2",
                          "grid-xs-3": "MuiGrid-grid-xs-3",
                          "grid-xs-4": "MuiGrid-grid-xs-4",
                          "grid-xs-5": "MuiGrid-grid-xs-5",
                          "grid-xs-6": "MuiGrid-grid-xs-6",
                          "grid-xs-7": "MuiGrid-grid-xs-7",
                          "grid-xs-8": "MuiGrid-grid-xs-8",
                          "grid-xs-9": "MuiGrid-grid-xs-9",
                          "grid-xs-auto": "MuiGrid-grid-xs-auto",
                          "grid-xs-true": "MuiGrid-grid-xs-true",
                          "item": "MuiGrid-item",
                          "justify-xs-center": "MuiGrid-justify-xs-center",
                          "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
                          "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
                          "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
                          "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
                          "root": "MuiGrid-root",
                          "spacing-xs-0": "MuiGrid-spacing-xs-0",
                          "spacing-xs-1": "MuiGrid-spacing-xs-1",
                          "spacing-xs-10": "MuiGrid-spacing-xs-10",
                          "spacing-xs-2": "MuiGrid-spacing-xs-2",
                          "spacing-xs-3": "MuiGrid-spacing-xs-3",
                          "spacing-xs-4": "MuiGrid-spacing-xs-4",
                          "spacing-xs-5": "MuiGrid-spacing-xs-5",
                          "spacing-xs-6": "MuiGrid-spacing-xs-6",
                          "spacing-xs-7": "MuiGrid-spacing-xs-7",
                          "spacing-xs-8": "MuiGrid-spacing-xs-8",
                          "spacing-xs-9": "MuiGrid-spacing-xs-9",
                          "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                          "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                          "zeroMinWidth": "MuiGrid-zeroMinWidth",
                        }
                      }
                      container={true}
                      justify="flex-end"
                    >
                      <div
                        className="MuiGrid-root MuiGrid-container MuiGrid-justify-xs-flex-end"
                      >
                        <ContainedButton
                          className="makeStyles-button-640"
                          disabled={false}
                          onClick={[Function]}
                        >
                          <WithStyles(WithStyles(ForwardRef(Button)))
                            className="makeStyles-button-640"
                            color="secondary"
                            disabled={false}
                            onClick={[Function]}
                            variant="contained"
                          >
                            <WithStyles(ForwardRef(Button))
                              className="makeStyles-button-640"
                              classes={
                                Object {
                                  "root": "WithStyles(ForwardRef(Button))-root-660",
                                }
                              }
                              color="secondary"
                              disabled={false}
                              onClick={[Function]}
                              variant="contained"
                            >
                              <ForwardRef(Button)
                                className="makeStyles-button-640"
                                classes={
                                  Object {
                                    "colorInherit": "MuiButton-colorInherit",
                                    "contained": "MuiButton-contained",
                                    "containedPrimary": "MuiButton-containedPrimary",
                                    "containedSecondary": "MuiButton-containedSecondary",
                                    "containedSizeLarge": "MuiButton-containedSizeLarge",
                                    "containedSizeSmall": "MuiButton-containedSizeSmall",
                                    "disableElevation": "MuiButton-disableElevation",
                                    "disabled": "Mui-disabled",
                                    "endIcon": "MuiButton-endIcon",
                                    "focusVisible": "Mui-focusVisible",
                                    "fullWidth": "MuiButton-fullWidth",
                                    "iconSizeLarge": "MuiButton-iconSizeLarge",
                                    "iconSizeMedium": "MuiButton-iconSizeMedium",
                                    "iconSizeSmall": "MuiButton-iconSizeSmall",
                                    "label": "MuiButton-label",
                                    "outlined": "MuiButton-outlined",
                                    "outlinedPrimary": "MuiButton-outlinedPrimary",
                                    "outlinedSecondary": "MuiButton-outlinedSecondary",
                                    "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                                    "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                                    "root": "MuiButton-root WithStyles(ForwardRef(Button))-root-660",
                                    "sizeLarge": "MuiButton-sizeLarge",
                                    "sizeSmall": "MuiButton-sizeSmall",
                                    "startIcon": "MuiButton-startIcon",
                                    "text": "MuiButton-text",
                                    "textPrimary": "MuiButton-textPrimary",
                                    "textSecondary": "MuiButton-textSecondary",
                                    "textSizeLarge": "MuiButton-textSizeLarge",
                                    "textSizeSmall": "MuiButton-textSizeSmall",
                                  }
                                }
                                color="secondary"
                                disabled={false}
                                onClick={[Function]}
                                variant="contained"
                              >
                                <WithStyles(ForwardRef(ButtonBase))
                                  className="MuiButton-root WithStyles(ForwardRef(Button))-root-660 MuiButton-contained makeStyles-button-640 MuiButton-containedSecondary"
                                  component="button"
                                  disabled={false}
                                  focusRipple={true}
                                  focusVisibleClassName="Mui-focusVisible"
                                  onClick={[Function]}
                                  type="button"
                                >
                                  <ForwardRef(ButtonBase)
                                    className="MuiButton-root WithStyles(ForwardRef(Button))-root-660 MuiButton-contained makeStyles-button-640 MuiButton-containedSecondary"
                                    classes={
                                      Object {
                                        "disabled": "Mui-disabled",
                                        "focusVisible": "Mui-focusVisible",
                                        "root": "MuiButtonBase-root",
                                      }
                                    }
                                    component="button"
                                    disabled={false}
                                    focusRipple={true}
                                    focusVisibleClassName="Mui-focusVisible"
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <button
                                      className="MuiButtonBase-root MuiButton-root WithStyles(ForwardRef(Button))-root-660 MuiButton-contained makeStyles-button-640 MuiButton-containedSecondary"
                                      disabled={false}
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onDragLeave={[Function]}
                                      onFocus={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      onMouseDown={[Function]}
                                      onMouseLeave={[Function]}
                                      onMouseUp={[Function]}
                                      onTouchEnd={[Function]}
                                      onTouchMove={[Function]}
                                      onTouchStart={[Function]}
                                      tabIndex={0}
                                      type="button"
                                    >
                                      <span
                                        className="MuiButton-label"
                                      >
                                        Sign up
                                      </span>
                                      <WithStyles(memo)
                                        center={false}
                                      >
                                        <ForwardRef(TouchRipple)
                                          center={false}
                                          classes={
                                            Object {
                                              "child": "MuiTouchRipple-child",
                                              "childLeaving": "MuiTouchRipple-childLeaving",
                                              "childPulsate": "MuiTouchRipple-childPulsate",
                                              "ripple": "MuiTouchRipple-ripple",
                                              "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                              "rippleVisible": "MuiTouchRipple-rippleVisible",
                                              "root": "MuiTouchRipple-root",
                                            }
                                          }
                                        >
                                          <span
                                            className="MuiTouchRipple-root"
                                          >
                                            <TransitionGroup
                                              childFactory={[Function]}
                                              component={null}
                                              exit={true}
                                            />
                                          </span>
                                        </ForwardRef(TouchRipple)>
                                      </WithStyles(memo)>
                                    </button>
                                  </ForwardRef(ButtonBase)>
                                </WithStyles(ForwardRef(ButtonBase))>
                              </ForwardRef(Button)>
                            </WithStyles(ForwardRef(Button))>
                          </WithStyles(WithStyles(ForwardRef(Button)))>
                        </ContainedButton>
                      </div>
                    </ForwardRef(Grid)>
                  </WithStyles(ForwardRef(Grid))>
                </form>
              </Form>
            </div>
          </Formik>
        </LoginForm>
      </div>
    </ThemeProvider>
  </MuiDecorator>
</WithChannel(MuiDecorator)>
`;

exports[`Storyshots Components|Forms User Profile 1`] = `
<WithChannel(MuiDecorator)
  initData={
    Object {
      "themeInd": 0,
      "themes": Array [
        Object {
          "breakpoints": Object {
            "between": [Function],
            "down": [Function],
            "keys": Array [
              "xs",
              "sm",
              "md",
              "lg",
              "xl",
            ],
            "only": [Function],
            "up": [Function],
            "values": Object {
              "lg": 1280,
              "md": 1064,
              "sm": 600,
              "tablet": 834,
              "xl": 1400,
              "xs": 0,
            },
            "width": [Function],
          },
          "direction": "ltr",
          "mixins": Object {
            "gutters": [Function],
            "toolbar": Object {
              "@media (min-width:0px) and (orientation: landscape)": Object {
                "minHeight": 48,
              },
              "@media (min-width:600px)": Object {
                "minHeight": 64,
              },
              "minHeight": 56,
            },
          },
          "overrides": Object {},
          "palette": Object {
            "action": Object {
              "activatedOpacity": 0.12,
              "active": "rgba(0, 0, 0, 0.54)",
              "disabled": "rgba(0, 0, 0, 0.26)",
              "disabledBackground": "rgba(0, 0, 0, 0.12)",
              "disabledOpacity": 0.38,
              "focus": "rgba(0, 0, 0, 0.12)",
              "focusOpacity": 0.12,
              "hover": "rgba(0, 0, 0, 0.04)",
              "hoverOpacity": 0.04,
              "selected": "rgba(0, 0, 0, 0.08)",
              "selectedOpacity": 0.08,
            },
            "augmentColor": [Function],
            "background": Object {
              "default": "#fafafa",
              "paper": "#fff",
            },
            "common": Object {
              "black": "#000",
              "white": "#fff",
            },
            "contrastThreshold": 3,
            "divider": "rgba(0, 0, 0, 0.12)",
            "error": Object {
              "contrastText": "#fff",
              "dark": "rgb(155, 48, 26)",
              "light": "#E6735C",
              "main": "#DE4526",
            },
            "getContrastText": [Function],
            "grey": Object {
              "100": "#D2D5D9",
              "200": "#F9F9F9",
              "300": "#cccfd4",
              "400": "#C0C5C4",
              "50": "#FAFAFA",
              "500": "#848484",
              "600": "#C4C4C4",
              "700": "#616161",
              "800": "#424242",
              "900": "#212121",
              "A100": "#d5d5d5",
              "A200": "#aaaaaa",
              "A400": "#303030",
              "A700": "#616161",
            },
            "info": Object {
              "contrastText": "#b0ddc0",
              "dark": "#545555",
              "light": "#EFEFEF",
              "main": "#8f8f8f",
            },
            "primary": Object {
              "contrastText": "#000",
              "dark": "rgb(178, 178, 178)",
              "light": "#202020",
              "main": "#fff",
            },
            "secondary": Object {
              "contrastText": "#B9E1C7",
              "dark": "#7BC796",
              "light": "#DCF0E3",
              "main": "#4FB573",
            },
            "success": Object {
              "contrastText": "rgba(0, 0, 0, 0.87)",
              "dark": "#388e3c",
              "light": "#81c784",
              "main": "#4caf50",
            },
            "text": Object {
              "disabled": "rgba(0, 0, 0, 0.38)",
              "hint": "rgba(0, 0, 0, 0.38)",
              "primary": "rgba(0, 0, 0, 0.87)",
              "secondary": "rgba(0, 0, 0, 0.54)",
            },
            "tonalOffset": 0.2,
            "type": "light",
            "warning": Object {
              "contrastText": "rgba(0, 0, 0, 0.87)",
              "dark": "#f57c00",
              "light": "#ffb74d",
              "main": "#ff9800",
            },
          },
          "props": Object {
            "MuiTypography": Object {
              "variantMapping": Object {
                "body1": "p",
                "body2": "p",
                "h1": "h1",
                "h2": "h2",
                "h3": "h3",
                "h4": "h4",
                "h5": "h5",
                "h6": "h6",
                "subtitle1": "h2",
                "subtitle2": "h2",
              },
            },
          },
          "shadows": Array [
            "none",
            "0px 4px 10px rgba(0, 0, 0, 0.05)",
            "-4px 0px 10px rgba(0, 0, 0, 0.25)",
            "0px 0px 20px rgba(0, 0, 0, 0.25)",
            "0px 4px 10px rgba(0, 0, 0, 0.1)",
            "0px 0px 4px rgba(0, 0, 0, 0.05)",
            "0px 4px 10px rgba(0, 0, 0, 0.1)",
            "0px -4px 10px rgba(0, 0, 0, 0.1)",
            "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
            "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
            "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
            "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
            "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
            "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
            "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
            "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
            "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
            "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
            "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
            "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
            "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
          ],
          "shape": Object {
            "borderRadius": 4,
          },
          "spacing": [Function],
          "transitions": Object {
            "create": [Function],
            "duration": Object {
              "complex": 375,
              "enteringScreen": 225,
              "leavingScreen": 195,
              "short": 250,
              "shorter": 200,
              "shortest": 150,
              "standard": 300,
            },
            "easing": Object {
              "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
              "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
              "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
              "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
            },
            "getAutoHeightDuration": [Function],
          },
          "typography": Object {
            "body1": Object {
              "@media (max-width:599.95px)": Object {
                "fontSize": "0.875rem",
              },
              "@media (min-width:600px)": Object {
                "fontSize": "1rem",
              },
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "1rem",
              "fontWeight": 400,
              "lineHeight": 1.5,
            },
            "body2": Object {
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 400,
              "lineHeight": 1.43,
            },
            "button": Object {
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 500,
              "lineHeight": 1.75,
              "textTransform": "uppercase",
            },
            "caption": Object {
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "0.75rem",
              "fontWeight": 400,
              "lineHeight": 1.66,
            },
            "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
            "fontSize": 14,
            "fontWeightBold": 700,
            "fontWeightLight": 300,
            "fontWeightMedium": 500,
            "fontWeightRegular": 400,
            "h1": Object {
              "@media (max-width:599.95px)": Object {
                "fontSize": "2rem",
              },
              "@media (min-width:600px)": Object {
                "fontSize": "3rem",
              },
              "fontFamily": "\\"Muli\\",-apple-system,sans-serif",
              "fontSize": "6rem",
              "fontWeight": 300,
              "lineHeight": 1.167,
            },
            "h2": Object {
              "@media (max-width:599.95px)": Object {
                "fontSize": "1.5rem",
              },
              "@media (min-width:600px)": Object {
                "fontSize": "2.375rem",
              },
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "3.75rem",
              "fontWeight": 300,
              "lineHeight": 1.2,
            },
            "h3": Object {
              "@media (max-width:599.95px)": Object {
                "fontSize": "1.5rem",
              },
              "@media (min-width:600px)": Object {
                "fontSize": "2rem",
              },
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "3rem",
              "fontWeight": 400,
              "lineHeight": 1.167,
            },
            "h4": Object {
              "@media (max-width:599.95px)": Object {
                "fontSize": "1.3125rem",
              },
              "@media (min-width:600px)": Object {
                "fontSize": "1.5rem",
              },
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "2.125rem",
              "fontWeight": 400,
              "lineHeight": 1.235,
            },
            "h5": Object {
              "@media (max-width:599.95px)": Object {
                "fontSize": "1.125rem",
              },
              "@media (min-width:600px)": Object {
                "fontSize": "1.3125rem",
              },
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "1.5rem",
              "fontWeight": 400,
              "lineHeight": 1.334,
            },
            "h6": Object {
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "1.125rem",
              "fontWeight": 500,
              "lineHeight": 1.6,
            },
            "htmlFontSize": 16,
            "overline": Object {
              "fontFamily": "PT Mono,\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "0.75rem",
              "fontWeight": 400,
              "lineHeight": 2.66,
              "textTransform": "uppercase",
            },
            "pxToRem": [Function],
            "round": [Function],
            "subtitle1": Object {
              "@media (max-width:599.95px)": Object {
                "fontSize": "2rem",
              },
              "@media (min-width:600px)": Object {
                "fontSize": "2.375rem",
              },
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "1rem",
              "fontWeight": 400,
              "lineHeight": 1.75,
            },
            "subtitle2": Object {
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 500,
              "lineHeight": 1.57,
            },
          },
          "zIndex": Object {
            "appBar": 1100,
            "drawer": 1200,
            "mobileStepper": 1000,
            "modal": 1300,
            "snackbar": 1400,
            "speedDial": 1050,
            "tooltip": 1500,
          },
        },
      ],
    }
  }
  story={
    <OnBoardingContainer
      title="User Profile"
    >
      <UserProfileForm
        apiUrl=""
        submit={[Function]}
      />
    </OnBoardingContainer>
  }
>
  <MuiDecorator
    data={
      Object {
        "themeInd": 0,
        "themes": Array [
          Object {
            "breakpoints": Object {
              "between": [Function],
              "down": [Function],
              "keys": Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ],
              "only": [Function],
              "up": [Function],
              "values": Object {
                "lg": 1280,
                "md": 1064,
                "sm": 600,
                "tablet": 834,
                "xl": 1400,
                "xs": 0,
              },
              "width": [Function],
            },
            "direction": "ltr",
            "mixins": Object {
              "gutters": [Function],
              "toolbar": Object {
                "@media (min-width:0px) and (orientation: landscape)": Object {
                  "minHeight": 48,
                },
                "@media (min-width:600px)": Object {
                  "minHeight": 64,
                },
                "minHeight": 56,
              },
            },
            "overrides": Object {},
            "palette": Object {
              "action": Object {
                "activatedOpacity": 0.12,
                "active": "rgba(0, 0, 0, 0.54)",
                "disabled": "rgba(0, 0, 0, 0.26)",
                "disabledBackground": "rgba(0, 0, 0, 0.12)",
                "disabledOpacity": 0.38,
                "focus": "rgba(0, 0, 0, 0.12)",
                "focusOpacity": 0.12,
                "hover": "rgba(0, 0, 0, 0.04)",
                "hoverOpacity": 0.04,
                "selected": "rgba(0, 0, 0, 0.08)",
                "selectedOpacity": 0.08,
              },
              "augmentColor": [Function],
              "background": Object {
                "default": "#fafafa",
                "paper": "#fff",
              },
              "common": Object {
                "black": "#000",
                "white": "#fff",
              },
              "contrastThreshold": 3,
              "divider": "rgba(0, 0, 0, 0.12)",
              "error": Object {
                "contrastText": "#fff",
                "dark": "rgb(155, 48, 26)",
                "light": "#E6735C",
                "main": "#DE4526",
              },
              "getContrastText": [Function],
              "grey": Object {
                "100": "#D2D5D9",
                "200": "#F9F9F9",
                "300": "#cccfd4",
                "400": "#C0C5C4",
                "50": "#FAFAFA",
                "500": "#848484",
                "600": "#C4C4C4",
                "700": "#616161",
                "800": "#424242",
                "900": "#212121",
                "A100": "#d5d5d5",
                "A200": "#aaaaaa",
                "A400": "#303030",
                "A700": "#616161",
              },
              "info": Object {
                "contrastText": "#b0ddc0",
                "dark": "#545555",
                "light": "#EFEFEF",
                "main": "#8f8f8f",
              },
              "primary": Object {
                "contrastText": "#000",
                "dark": "rgb(178, 178, 178)",
                "light": "#202020",
                "main": "#fff",
              },
              "secondary": Object {
                "contrastText": "#B9E1C7",
                "dark": "#7BC796",
                "light": "#DCF0E3",
                "main": "#4FB573",
              },
              "success": Object {
                "contrastText": "rgba(0, 0, 0, 0.87)",
                "dark": "#388e3c",
                "light": "#81c784",
                "main": "#4caf50",
              },
              "text": Object {
                "disabled": "rgba(0, 0, 0, 0.38)",
                "hint": "rgba(0, 0, 0, 0.38)",
                "primary": "rgba(0, 0, 0, 0.87)",
                "secondary": "rgba(0, 0, 0, 0.54)",
              },
              "tonalOffset": 0.2,
              "type": "light",
              "warning": Object {
                "contrastText": "rgba(0, 0, 0, 0.87)",
                "dark": "#f57c00",
                "light": "#ffb74d",
                "main": "#ff9800",
              },
            },
            "props": Object {
              "MuiTypography": Object {
                "variantMapping": Object {
                  "body1": "p",
                  "body2": "p",
                  "h1": "h1",
                  "h2": "h2",
                  "h3": "h3",
                  "h4": "h4",
                  "h5": "h5",
                  "h6": "h6",
                  "subtitle1": "h2",
                  "subtitle2": "h2",
                },
              },
            },
            "shadows": Array [
              "none",
              "0px 4px 10px rgba(0, 0, 0, 0.05)",
              "-4px 0px 10px rgba(0, 0, 0, 0.25)",
              "0px 0px 20px rgba(0, 0, 0, 0.25)",
              "0px 4px 10px rgba(0, 0, 0, 0.1)",
              "0px 0px 4px rgba(0, 0, 0, 0.05)",
              "0px 4px 10px rgba(0, 0, 0, 0.1)",
              "0px -4px 10px rgba(0, 0, 0, 0.1)",
              "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
              "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
              "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
              "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
              "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
              "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
              "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
              "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
              "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
              "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
              "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
              "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
              "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
            ],
            "shape": Object {
              "borderRadius": 4,
            },
            "spacing": [Function],
            "transitions": Object {
              "create": [Function],
              "duration": Object {
                "complex": 375,
                "enteringScreen": 225,
                "leavingScreen": 195,
                "short": 250,
                "shorter": 200,
                "shortest": 150,
                "standard": 300,
              },
              "easing": Object {
                "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
              },
              "getAutoHeightDuration": [Function],
            },
            "typography": Object {
              "body1": Object {
                "@media (max-width:599.95px)": Object {
                  "fontSize": "0.875rem",
                },
                "@media (min-width:600px)": Object {
                  "fontSize": "1rem",
                },
                "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                "fontSize": "1rem",
                "fontWeight": 400,
                "lineHeight": 1.5,
              },
              "body2": Object {
                "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 400,
                "lineHeight": 1.43,
              },
              "button": Object {
                "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 500,
                "lineHeight": 1.75,
                "textTransform": "uppercase",
              },
              "caption": Object {
                "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                "fontSize": "0.75rem",
                "fontWeight": 400,
                "lineHeight": 1.66,
              },
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": 14,
              "fontWeightBold": 700,
              "fontWeightLight": 300,
              "fontWeightMedium": 500,
              "fontWeightRegular": 400,
              "h1": Object {
                "@media (max-width:599.95px)": Object {
                  "fontSize": "2rem",
                },
                "@media (min-width:600px)": Object {
                  "fontSize": "3rem",
                },
                "fontFamily": "\\"Muli\\",-apple-system,sans-serif",
                "fontSize": "6rem",
                "fontWeight": 300,
                "lineHeight": 1.167,
              },
              "h2": Object {
                "@media (max-width:599.95px)": Object {
                  "fontSize": "1.5rem",
                },
                "@media (min-width:600px)": Object {
                  "fontSize": "2.375rem",
                },
                "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                "fontSize": "3.75rem",
                "fontWeight": 300,
                "lineHeight": 1.2,
              },
              "h3": Object {
                "@media (max-width:599.95px)": Object {
                  "fontSize": "1.5rem",
                },
                "@media (min-width:600px)": Object {
                  "fontSize": "2rem",
                },
                "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                "fontSize": "3rem",
                "fontWeight": 400,
                "lineHeight": 1.167,
              },
              "h4": Object {
                "@media (max-width:599.95px)": Object {
                  "fontSize": "1.3125rem",
                },
                "@media (min-width:600px)": Object {
                  "fontSize": "1.5rem",
                },
                "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                "fontSize": "2.125rem",
                "fontWeight": 400,
                "lineHeight": 1.235,
              },
              "h5": Object {
                "@media (max-width:599.95px)": Object {
                  "fontSize": "1.125rem",
                },
                "@media (min-width:600px)": Object {
                  "fontSize": "1.3125rem",
                },
                "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                "fontSize": "1.5rem",
                "fontWeight": 400,
                "lineHeight": 1.334,
              },
              "h6": Object {
                "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                "fontSize": "1.125rem",
                "fontWeight": 500,
                "lineHeight": 1.6,
              },
              "htmlFontSize": 16,
              "overline": Object {
                "fontFamily": "PT Mono,\\"Lato\\",-apple-system,sans-serif",
                "fontSize": "0.75rem",
                "fontWeight": 400,
                "lineHeight": 2.66,
                "textTransform": "uppercase",
              },
              "pxToRem": [Function],
              "round": [Function],
              "subtitle1": Object {
                "@media (max-width:599.95px)": Object {
                  "fontSize": "2rem",
                },
                "@media (min-width:600px)": Object {
                  "fontSize": "2.375rem",
                },
                "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                "fontSize": "1rem",
                "fontWeight": 400,
                "lineHeight": 1.75,
              },
              "subtitle2": Object {
                "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 500,
                "lineHeight": 1.57,
              },
            },
            "zIndex": Object {
              "appBar": 1100,
              "drawer": 1200,
              "mobileStepper": 1000,
              "modal": 1300,
              "snackbar": 1400,
              "speedDial": 1050,
              "tooltip": 1500,
            },
          },
        ],
      }
    }
    sendData={[Function]}
    store={
      ChannelStore {
        "channel": Channel {
          "events": Object {
            "docsRendered": Array [
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
            ],
            "registerSubscription": Array [
              [Function],
            ],
            "sm/storybook-addon-material-ui/material-event/back": Array [
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
            ],
            "sm/storybook-addon-material-ui/material-event/init": Array [
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
            ],
            "storyRendered": Array [
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
              [Function],
            ],
          },
          "isAsync": false,
          "sender": "2795b43315214",
          "transport": Object {
            "send": [Function],
            "setHandler": [Function],
          },
        },
        "connect": [Function],
        "disconnect": [Function],
        "emit": [Function],
        "init": [Function],
        "name": "store",
        "onConnected": [Function],
        "onConnectedFn": [Function],
        "onData": [Function],
        "onDataChannel": [Function],
        "onInitChannel": [Function],
        "removeData": [Function],
        "removeInit": [Function],
        "send": [Function],
        "sendInit": [Function],
        "store": Object {
          "themeInd": 0,
          "themes": Array [
            Object {
              "breakpoints": Object {
                "between": [Function],
                "down": [Function],
                "keys": Array [
                  "xs",
                  "sm",
                  "md",
                  "lg",
                  "xl",
                ],
                "only": [Function],
                "up": [Function],
                "values": Object {
                  "lg": 1280,
                  "md": 1064,
                  "sm": 600,
                  "tablet": 834,
                  "xl": 1400,
                  "xs": 0,
                },
                "width": [Function],
              },
              "direction": "ltr",
              "mixins": Object {
                "gutters": [Function],
                "toolbar": Object {
                  "@media (min-width:0px) and (orientation: landscape)": Object {
                    "minHeight": 48,
                  },
                  "@media (min-width:600px)": Object {
                    "minHeight": 64,
                  },
                  "minHeight": 56,
                },
              },
              "overrides": Object {},
              "palette": Object {
                "action": Object {
                  "activatedOpacity": 0.12,
                  "active": "rgba(0, 0, 0, 0.54)",
                  "disabled": "rgba(0, 0, 0, 0.26)",
                  "disabledBackground": "rgba(0, 0, 0, 0.12)",
                  "disabledOpacity": 0.38,
                  "focus": "rgba(0, 0, 0, 0.12)",
                  "focusOpacity": 0.12,
                  "hover": "rgba(0, 0, 0, 0.04)",
                  "hoverOpacity": 0.04,
                  "selected": "rgba(0, 0, 0, 0.08)",
                  "selectedOpacity": 0.08,
                },
                "augmentColor": [Function],
                "background": Object {
                  "default": "#fafafa",
                  "paper": "#fff",
                },
                "common": Object {
                  "black": "#000",
                  "white": "#fff",
                },
                "contrastThreshold": 3,
                "divider": "rgba(0, 0, 0, 0.12)",
                "error": Object {
                  "contrastText": "#fff",
                  "dark": "rgb(155, 48, 26)",
                  "light": "#E6735C",
                  "main": "#DE4526",
                },
                "getContrastText": [Function],
                "grey": Object {
                  "100": "#D2D5D9",
                  "200": "#F9F9F9",
                  "300": "#cccfd4",
                  "400": "#C0C5C4",
                  "50": "#FAFAFA",
                  "500": "#848484",
                  "600": "#C4C4C4",
                  "700": "#616161",
                  "800": "#424242",
                  "900": "#212121",
                  "A100": "#d5d5d5",
                  "A200": "#aaaaaa",
                  "A400": "#303030",
                  "A700": "#616161",
                },
                "info": Object {
                  "contrastText": "#b0ddc0",
                  "dark": "#545555",
                  "light": "#EFEFEF",
                  "main": "#8f8f8f",
                },
                "primary": Object {
                  "contrastText": "#000",
                  "dark": "rgb(178, 178, 178)",
                  "light": "#202020",
                  "main": "#fff",
                },
                "secondary": Object {
                  "contrastText": "#B9E1C7",
                  "dark": "#7BC796",
                  "light": "#DCF0E3",
                  "main": "#4FB573",
                },
                "success": Object {
                  "contrastText": "rgba(0, 0, 0, 0.87)",
                  "dark": "#388e3c",
                  "light": "#81c784",
                  "main": "#4caf50",
                },
                "text": Object {
                  "disabled": "rgba(0, 0, 0, 0.38)",
                  "hint": "rgba(0, 0, 0, 0.38)",
                  "primary": "rgba(0, 0, 0, 0.87)",
                  "secondary": "rgba(0, 0, 0, 0.54)",
                },
                "tonalOffset": 0.2,
                "type": "light",
                "warning": Object {
                  "contrastText": "rgba(0, 0, 0, 0.87)",
                  "dark": "#f57c00",
                  "light": "#ffb74d",
                  "main": "#ff9800",
                },
              },
              "props": Object {
                "MuiTypography": Object {
                  "variantMapping": Object {
                    "body1": "p",
                    "body2": "p",
                    "h1": "h1",
                    "h2": "h2",
                    "h3": "h3",
                    "h4": "h4",
                    "h5": "h5",
                    "h6": "h6",
                    "subtitle1": "h2",
                    "subtitle2": "h2",
                  },
                },
              },
              "shadows": Array [
                "none",
                "0px 4px 10px rgba(0, 0, 0, 0.05)",
                "-4px 0px 10px rgba(0, 0, 0, 0.25)",
                "0px 0px 20px rgba(0, 0, 0, 0.25)",
                "0px 4px 10px rgba(0, 0, 0, 0.1)",
                "0px 0px 4px rgba(0, 0, 0, 0.05)",
                "0px 4px 10px rgba(0, 0, 0, 0.1)",
                "0px -4px 10px rgba(0, 0, 0, 0.1)",
                "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
              ],
              "shape": Object {
                "borderRadius": 4,
              },
              "spacing": [Function],
              "transitions": Object {
                "create": [Function],
                "duration": Object {
                  "complex": 375,
                  "enteringScreen": 225,
                  "leavingScreen": 195,
                  "short": 250,
                  "shorter": 200,
                  "shortest": 150,
                  "standard": 300,
                },
                "easing": Object {
                  "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                  "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                  "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                  "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                },
                "getAutoHeightDuration": [Function],
              },
              "typography": Object {
                "body1": Object {
                  "@media (max-width:599.95px)": Object {
                    "fontSize": "0.875rem",
                  },
                  "@media (min-width:600px)": Object {
                    "fontSize": "1rem",
                  },
                  "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                  "fontSize": "1rem",
                  "fontWeight": 400,
                  "lineHeight": 1.5,
                },
                "body2": Object {
                  "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                  "fontSize": "0.875rem",
                  "fontWeight": 400,
                  "lineHeight": 1.43,
                },
                "button": Object {
                  "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                  "fontSize": "0.875rem",
                  "fontWeight": 500,
                  "lineHeight": 1.75,
                  "textTransform": "uppercase",
                },
                "caption": Object {
                  "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                  "fontSize": "0.75rem",
                  "fontWeight": 400,
                  "lineHeight": 1.66,
                },
                "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                "fontSize": 14,
                "fontWeightBold": 700,
                "fontWeightLight": 300,
                "fontWeightMedium": 500,
                "fontWeightRegular": 400,
                "h1": Object {
                  "@media (max-width:599.95px)": Object {
                    "fontSize": "2rem",
                  },
                  "@media (min-width:600px)": Object {
                    "fontSize": "3rem",
                  },
                  "fontFamily": "\\"Muli\\",-apple-system,sans-serif",
                  "fontSize": "6rem",
                  "fontWeight": 300,
                  "lineHeight": 1.167,
                },
                "h2": Object {
                  "@media (max-width:599.95px)": Object {
                    "fontSize": "1.5rem",
                  },
                  "@media (min-width:600px)": Object {
                    "fontSize": "2.375rem",
                  },
                  "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                  "fontSize": "3.75rem",
                  "fontWeight": 300,
                  "lineHeight": 1.2,
                },
                "h3": Object {
                  "@media (max-width:599.95px)": Object {
                    "fontSize": "1.5rem",
                  },
                  "@media (min-width:600px)": Object {
                    "fontSize": "2rem",
                  },
                  "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                  "fontSize": "3rem",
                  "fontWeight": 400,
                  "lineHeight": 1.167,
                },
                "h4": Object {
                  "@media (max-width:599.95px)": Object {
                    "fontSize": "1.3125rem",
                  },
                  "@media (min-width:600px)": Object {
                    "fontSize": "1.5rem",
                  },
                  "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                  "fontSize": "2.125rem",
                  "fontWeight": 400,
                  "lineHeight": 1.235,
                },
                "h5": Object {
                  "@media (max-width:599.95px)": Object {
                    "fontSize": "1.125rem",
                  },
                  "@media (min-width:600px)": Object {
                    "fontSize": "1.3125rem",
                  },
                  "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                  "fontSize": "1.5rem",
                  "fontWeight": 400,
                  "lineHeight": 1.334,
                },
                "h6": Object {
                  "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                  "fontSize": "1.125rem",
                  "fontWeight": 500,
                  "lineHeight": 1.6,
                },
                "htmlFontSize": 16,
                "overline": Object {
                  "fontFamily": "PT Mono,\\"Lato\\",-apple-system,sans-serif",
                  "fontSize": "0.75rem",
                  "fontWeight": 400,
                  "lineHeight": 2.66,
                  "textTransform": "uppercase",
                },
                "pxToRem": [Function],
                "round": [Function],
                "subtitle1": Object {
                  "@media (max-width:599.95px)": Object {
                    "fontSize": "2rem",
                  },
                  "@media (min-width:600px)": Object {
                    "fontSize": "2.375rem",
                  },
                  "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                  "fontSize": "1rem",
                  "fontWeight": 400,
                  "lineHeight": 1.75,
                },
                "subtitle2": Object {
                  "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
                  "fontSize": "0.875rem",
                  "fontWeight": 500,
                  "lineHeight": 1.57,
                },
              },
              "zIndex": Object {
                "appBar": 1100,
                "drawer": 1200,
                "mobileStepper": 1000,
                "modal": 1300,
                "snackbar": 1400,
                "speedDial": 1050,
                "tooltip": 1500,
              },
            },
          ],
        },
        "subscriber": [Function],
      }
    }
    story={
      <OnBoardingContainer
        title="User Profile"
      >
        <UserProfileForm
          apiUrl=""
          submit={[Function]}
        />
      </OnBoardingContainer>
    }
  >
    <ThemeProvider
      theme={
        Object {
          "breakpoints": Object {
            "between": [Function],
            "down": [Function],
            "keys": Array [
              "xs",
              "sm",
              "md",
              "lg",
              "xl",
            ],
            "only": [Function],
            "up": [Function],
            "values": Object {
              "lg": 1280,
              "md": 1064,
              "sm": 600,
              "tablet": 834,
              "xl": 1400,
              "xs": 0,
            },
            "width": [Function],
          },
          "direction": "ltr",
          "mixins": Object {
            "gutters": [Function],
            "toolbar": Object {
              "@media (min-width:0px) and (orientation: landscape)": Object {
                "minHeight": 48,
              },
              "@media (min-width:600px)": Object {
                "minHeight": 64,
              },
              "minHeight": 56,
            },
          },
          "overrides": Object {},
          "palette": Object {
            "action": Object {
              "activatedOpacity": 0.12,
              "active": "rgba(0, 0, 0, 0.54)",
              "disabled": "rgba(0, 0, 0, 0.26)",
              "disabledBackground": "rgba(0, 0, 0, 0.12)",
              "disabledOpacity": 0.38,
              "focus": "rgba(0, 0, 0, 0.12)",
              "focusOpacity": 0.12,
              "hover": "rgba(0, 0, 0, 0.04)",
              "hoverOpacity": 0.04,
              "selected": "rgba(0, 0, 0, 0.08)",
              "selectedOpacity": 0.08,
            },
            "augmentColor": [Function],
            "background": Object {
              "default": "#fafafa",
              "paper": "#fff",
            },
            "common": Object {
              "black": "#000",
              "white": "#fff",
            },
            "contrastThreshold": 3,
            "divider": "rgba(0, 0, 0, 0.12)",
            "error": Object {
              "contrastText": "#fff",
              "dark": "rgb(155, 48, 26)",
              "light": "#E6735C",
              "main": "#DE4526",
            },
            "getContrastText": [Function],
            "grey": Object {
              "100": "#D2D5D9",
              "200": "#F9F9F9",
              "300": "#cccfd4",
              "400": "#C0C5C4",
              "50": "#FAFAFA",
              "500": "#848484",
              "600": "#C4C4C4",
              "700": "#616161",
              "800": "#424242",
              "900": "#212121",
              "A100": "#d5d5d5",
              "A200": "#aaaaaa",
              "A400": "#303030",
              "A700": "#616161",
            },
            "info": Object {
              "contrastText": "#b0ddc0",
              "dark": "#545555",
              "light": "#EFEFEF",
              "main": "#8f8f8f",
            },
            "primary": Object {
              "contrastText": "#000",
              "dark": "rgb(178, 178, 178)",
              "light": "#202020",
              "main": "#fff",
            },
            "secondary": Object {
              "contrastText": "#B9E1C7",
              "dark": "#7BC796",
              "light": "#DCF0E3",
              "main": "#4FB573",
            },
            "success": Object {
              "contrastText": "rgba(0, 0, 0, 0.87)",
              "dark": "#388e3c",
              "light": "#81c784",
              "main": "#4caf50",
            },
            "text": Object {
              "disabled": "rgba(0, 0, 0, 0.38)",
              "hint": "rgba(0, 0, 0, 0.38)",
              "primary": "rgba(0, 0, 0, 0.87)",
              "secondary": "rgba(0, 0, 0, 0.54)",
            },
            "tonalOffset": 0.2,
            "type": "light",
            "warning": Object {
              "contrastText": "rgba(0, 0, 0, 0.87)",
              "dark": "#f57c00",
              "light": "#ffb74d",
              "main": "#ff9800",
            },
          },
          "props": Object {
            "MuiTypography": Object {
              "variantMapping": Object {
                "body1": "p",
                "body2": "p",
                "h1": "h1",
                "h2": "h2",
                "h3": "h3",
                "h4": "h4",
                "h5": "h5",
                "h6": "h6",
                "subtitle1": "h2",
                "subtitle2": "h2",
              },
            },
          },
          "shadows": Array [
            "none",
            "0px 4px 10px rgba(0, 0, 0, 0.05)",
            "-4px 0px 10px rgba(0, 0, 0, 0.25)",
            "0px 0px 20px rgba(0, 0, 0, 0.25)",
            "0px 4px 10px rgba(0, 0, 0, 0.1)",
            "0px 0px 4px rgba(0, 0, 0, 0.05)",
            "0px 4px 10px rgba(0, 0, 0, 0.1)",
            "0px -4px 10px rgba(0, 0, 0, 0.1)",
            "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
            "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
            "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
            "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
            "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
            "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
            "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
            "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
            "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
            "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
            "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
            "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
            "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
          ],
          "shape": Object {
            "borderRadius": 4,
          },
          "spacing": [Function],
          "transitions": Object {
            "create": [Function],
            "duration": Object {
              "complex": 375,
              "enteringScreen": 225,
              "leavingScreen": 195,
              "short": 250,
              "shorter": 200,
              "shortest": 150,
              "standard": 300,
            },
            "easing": Object {
              "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
              "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
              "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
              "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
            },
            "getAutoHeightDuration": [Function],
          },
          "typography": Object {
            "body1": Object {
              "@media (max-width:599.95px)": Object {
                "fontSize": "0.875rem",
              },
              "@media (min-width:600px)": Object {
                "fontSize": "1rem",
              },
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "1rem",
              "fontWeight": 400,
              "lineHeight": 1.5,
            },
            "body2": Object {
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 400,
              "lineHeight": 1.43,
            },
            "button": Object {
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 500,
              "lineHeight": 1.75,
              "textTransform": "uppercase",
            },
            "caption": Object {
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "0.75rem",
              "fontWeight": 400,
              "lineHeight": 1.66,
            },
            "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
            "fontSize": 14,
            "fontWeightBold": 700,
            "fontWeightLight": 300,
            "fontWeightMedium": 500,
            "fontWeightRegular": 400,
            "h1": Object {
              "@media (max-width:599.95px)": Object {
                "fontSize": "2rem",
              },
              "@media (min-width:600px)": Object {
                "fontSize": "3rem",
              },
              "fontFamily": "\\"Muli\\",-apple-system,sans-serif",
              "fontSize": "6rem",
              "fontWeight": 300,
              "lineHeight": 1.167,
            },
            "h2": Object {
              "@media (max-width:599.95px)": Object {
                "fontSize": "1.5rem",
              },
              "@media (min-width:600px)": Object {
                "fontSize": "2.375rem",
              },
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "3.75rem",
              "fontWeight": 300,
              "lineHeight": 1.2,
            },
            "h3": Object {
              "@media (max-width:599.95px)": Object {
                "fontSize": "1.5rem",
              },
              "@media (min-width:600px)": Object {
                "fontSize": "2rem",
              },
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "3rem",
              "fontWeight": 400,
              "lineHeight": 1.167,
            },
            "h4": Object {
              "@media (max-width:599.95px)": Object {
                "fontSize": "1.3125rem",
              },
              "@media (min-width:600px)": Object {
                "fontSize": "1.5rem",
              },
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "2.125rem",
              "fontWeight": 400,
              "lineHeight": 1.235,
            },
            "h5": Object {
              "@media (max-width:599.95px)": Object {
                "fontSize": "1.125rem",
              },
              "@media (min-width:600px)": Object {
                "fontSize": "1.3125rem",
              },
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "1.5rem",
              "fontWeight": 400,
              "lineHeight": 1.334,
            },
            "h6": Object {
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "1.125rem",
              "fontWeight": 500,
              "lineHeight": 1.6,
            },
            "htmlFontSize": 16,
            "overline": Object {
              "fontFamily": "PT Mono,\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "0.75rem",
              "fontWeight": 400,
              "lineHeight": 2.66,
              "textTransform": "uppercase",
            },
            "pxToRem": [Function],
            "round": [Function],
            "subtitle1": Object {
              "@media (max-width:599.95px)": Object {
                "fontSize": "2rem",
              },
              "@media (min-width:600px)": Object {
                "fontSize": "2.375rem",
              },
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "1rem",
              "fontWeight": 400,
              "lineHeight": 1.75,
            },
            "subtitle2": Object {
              "fontFamily": "\\"Lato\\",-apple-system,sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 500,
              "lineHeight": 1.57,
            },
          },
          "zIndex": Object {
            "appBar": 1100,
            "drawer": 1200,
            "mobileStepper": 1000,
            "modal": 1300,
            "snackbar": 1400,
            "speedDial": 1050,
            "tooltip": 1500,
          },
          Symbol(mui.nested): false,
        }
      }
    >
      <div>
        <OnBoardingContainer
          title="User Profile"
        >
          <Section
            className="makeStyles-root-568"
            title="User Profile"
            titleClassName="makeStyles-content-569"
            titleVariant="h3"
          >
            <section
              className="makeStyles-root-570 makeStyles-root-572 makeStyles-root-568"
            >
              <Title
                align="center"
                className="makeStyles-title-571 makeStyles-title-573 makeStyles-content-569"
                variant="h3"
              >
                <WithStyles(ForwardRef(Typography))
                  align="center"
                  className="makeStyles-root-574 makeStyles-title-571 makeStyles-title-573 makeStyles-content-569"
                  color="textPrimary"
                  variant="h3"
                >
                  <ForwardRef(Typography)
                    align="center"
                    className="makeStyles-root-574 makeStyles-title-571 makeStyles-title-573 makeStyles-content-569"
                    classes={
                      Object {
                        "alignCenter": "MuiTypography-alignCenter",
                        "alignJustify": "MuiTypography-alignJustify",
                        "alignLeft": "MuiTypography-alignLeft",
                        "alignRight": "MuiTypography-alignRight",
                        "body1": "MuiTypography-body1",
                        "body2": "MuiTypography-body2",
                        "button": "MuiTypography-button",
                        "caption": "MuiTypography-caption",
                        "colorError": "MuiTypography-colorError",
                        "colorInherit": "MuiTypography-colorInherit",
                        "colorPrimary": "MuiTypography-colorPrimary",
                        "colorSecondary": "MuiTypography-colorSecondary",
                        "colorTextPrimary": "MuiTypography-colorTextPrimary",
                        "colorTextSecondary": "MuiTypography-colorTextSecondary",
                        "displayBlock": "MuiTypography-displayBlock",
                        "displayInline": "MuiTypography-displayInline",
                        "gutterBottom": "MuiTypography-gutterBottom",
                        "h1": "MuiTypography-h1",
                        "h2": "MuiTypography-h2",
                        "h3": "MuiTypography-h3",
                        "h4": "MuiTypography-h4",
                        "h5": "MuiTypography-h5",
                        "h6": "MuiTypography-h6",
                        "noWrap": "MuiTypography-noWrap",
                        "overline": "MuiTypography-overline",
                        "paragraph": "MuiTypography-paragraph",
                        "root": "MuiTypography-root",
                        "srOnly": "MuiTypography-srOnly",
                        "subtitle1": "MuiTypography-subtitle1",
                        "subtitle2": "MuiTypography-subtitle2",
                      }
                    }
                    color="textPrimary"
                    variant="h3"
                    variantMapping={
                      Object {
                        "body1": "p",
                        "body2": "p",
                        "h1": "h1",
                        "h2": "h2",
                        "h3": "h3",
                        "h4": "h4",
                        "h5": "h5",
                        "h6": "h6",
                        "subtitle1": "h2",
                        "subtitle2": "h2",
                      }
                    }
                  >
                    <h3
                      className="MuiTypography-root makeStyles-root-574 makeStyles-title-571 makeStyles-title-573 makeStyles-content-569 MuiTypography-h3 MuiTypography-colorTextPrimary MuiTypography-alignCenter"
                    >
                      User Profile
                    </h3>
                  </ForwardRef(Typography)>
                </WithStyles(ForwardRef(Typography))>
              </Title>
              <div
                className="makeStyles-content-569"
              >
                <UserProfileForm
                  apiUrl=""
                  submit={[Function]}
                >
                  <Formik
                    initialValues={
                      Object {
                        "description": undefined,
                        "name": "",
                        "phone": undefined,
                        "photo": undefined,
                        "role": "",
                      }
                    }
                    onSubmit={[Function]}
                    validate={[Function]}
                  >
                    <Form>
                      <form
                        action="#"
                        onReset={[Function]}
                        onSubmit={[Function]}
                      >
                        <OnBoardingCard>
                          <RegenCard
                            className="makeStyles-root-576"
                          >
                            <WithStyles(ForwardRef(Card))
                              className="makeStyles-root-577 makeStyles-root-578 makeStyles-root-576"
                              elevation={0}
                            >
                              <ForwardRef(Card)
                                className="makeStyles-root-577 makeStyles-root-578 makeStyles-root-576"
                                classes={
                                  Object {
                                    "root": "MuiCard-root",
                                  }
                                }
                                elevation={0}
                              >
                                <WithStyles(ForwardRef(Paper))
                                  className="MuiCard-root makeStyles-root-577 makeStyles-root-578 makeStyles-root-576"
                                  elevation={0}
                                >
                                  <ForwardRef(Paper)
                                    className="MuiCard-root makeStyles-root-577 makeStyles-root-578 makeStyles-root-576"
                                    classes={
                                      Object {
                                        "elevation0": "MuiPaper-elevation0",
                                        "elevation1": "MuiPaper-elevation1",
                                        "elevation10": "MuiPaper-elevation10",
                                        "elevation11": "MuiPaper-elevation11",
                                        "elevation12": "MuiPaper-elevation12",
                                        "elevation13": "MuiPaper-elevation13",
                                        "elevation14": "MuiPaper-elevation14",
                                        "elevation15": "MuiPaper-elevation15",
                                        "elevation16": "MuiPaper-elevation16",
                                        "elevation17": "MuiPaper-elevation17",
                                        "elevation18": "MuiPaper-elevation18",
                                        "elevation19": "MuiPaper-elevation19",
                                        "elevation2": "MuiPaper-elevation2",
                                        "elevation20": "MuiPaper-elevation20",
                                        "elevation21": "MuiPaper-elevation21",
                                        "elevation22": "MuiPaper-elevation22",
                                        "elevation23": "MuiPaper-elevation23",
                                        "elevation24": "MuiPaper-elevation24",
                                        "elevation3": "MuiPaper-elevation3",
                                        "elevation4": "MuiPaper-elevation4",
                                        "elevation5": "MuiPaper-elevation5",
                                        "elevation6": "MuiPaper-elevation6",
                                        "elevation7": "MuiPaper-elevation7",
                                        "elevation8": "MuiPaper-elevation8",
                                        "elevation9": "MuiPaper-elevation9",
                                        "outlined": "MuiPaper-outlined",
                                        "root": "MuiPaper-root",
                                        "rounded": "MuiPaper-rounded",
                                      }
                                    }
                                    elevation={0}
                                  >
                                    <div
                                      className="MuiPaper-root MuiCard-root makeStyles-root-577 makeStyles-root-578 makeStyles-root-576 MuiPaper-elevation0 MuiPaper-rounded"
                                    >
                                      <Field
                                        className="makeStyles-textField-575"
                                        component={[Function]}
                                        label="Full name"
                                        name="name"
                                      >
                                        <ControlledTextField
                                          className="makeStyles-textField-575"
                                          field={
                                            Object {
                                              "name": "name",
                                              "onBlur": [Function],
                                              "onChange": [Function],
                                              "value": "",
                                            }
                                          }
                                          form={
                                            Object {
                                              "dirty": false,
                                              "errors": Object {},
                                              "getFieldHelpers": [Function],
                                              "getFieldMeta": [Function],
                                              "getFieldProps": [Function],
                                              "handleBlur": [Function],
                                              "handleChange": [Function],
                                              "handleReset": [Function],
                                              "handleSubmit": [Function],
                                              "initialErrors": Object {},
                                              "initialStatus": undefined,
                                              "initialTouched": Object {},
                                              "initialValues": Object {
                                                "description": undefined,
                                                "name": "",
                                                "phone": undefined,
                                                "photo": undefined,
                                                "role": "",
                                              },
                                              "isSubmitting": false,
                                              "isValid": true,
                                              "isValidating": false,
                                              "registerField": [Function],
                                              "resetForm": [Function],
                                              "setErrors": [Function],
                                              "setFieldError": [Function],
                                              "setFieldTouched": [Function],
                                              "setFieldValue": [Function],
                                              "setFormikState": [Function],
                                              "setStatus": [Function],
                                              "setSubmitting": [Function],
                                              "setTouched": [Function],
                                              "setValues": [Function],
                                              "status": undefined,
                                              "submitCount": 0,
                                              "submitForm": [Function],
                                              "touched": Object {},
                                              "unregisterField": [Function],
                                              "validateField": [Function],
                                              "validateForm": [Function],
                                              "validateOnBlur": true,
                                              "validateOnChange": true,
                                              "validateOnMount": false,
                                              "values": Object {
                                                "description": undefined,
                                                "name": "",
                                                "phone": undefined,
                                                "photo": undefined,
                                                "role": "",
                                              },
                                            }
                                          }
                                          label="Full name"
                                        >
                                          <FieldFormControl
                                            className="makeStyles-textField-575"
                                            disabled={false}
                                            field={
                                              Object {
                                                "name": "name",
                                                "onBlur": [Function],
                                                "onChange": [Function],
                                                "value": "",
                                              }
                                            }
                                            form={
                                              Object {
                                                "dirty": false,
                                                "errors": Object {},
                                                "getFieldHelpers": [Function],
                                                "getFieldMeta": [Function],
                                                "getFieldProps": [Function],
                                                "handleBlur": [Function],
                                                "handleChange": [Function],
                                                "handleReset": [Function],
                                                "handleSubmit": [Function],
                                                "initialErrors": Object {},
                                                "initialStatus": undefined,
                                                "initialTouched": Object {},
                                                "initialValues": Object {
                                                  "description": undefined,
                                                  "name": "",
                                                  "phone": undefined,
                                                  "photo": undefined,
                                                  "role": "",
                                                },
                                                "isSubmitting": false,
                                                "isValid": true,
                                                "isValidating": false,
                                                "registerField": [Function],
                                                "resetForm": [Function],
                                                "setErrors": [Function],
                                                "setFieldError": [Function],
                                                "setFieldTouched": [Function],
                                                "setFieldValue": [Function],
                                                "setFormikState": [Function],
                                                "setStatus": [Function],
                                                "setSubmitting": [Function],
                                                "setTouched": [Function],
                                                "setValues": [Function],
                                                "status": undefined,
                                                "submitCount": 0,
                                                "submitForm": [Function],
                                                "touched": Object {},
                                                "unregisterField": [Function],
                                                "validateField": [Function],
                                                "validateForm": [Function],
                                                "validateOnBlur": true,
                                                "validateOnChange": true,
                                                "validateOnMount": false,
                                                "values": Object {
                                                  "description": undefined,
                                                  "name": "",
                                                  "phone": undefined,
                                                  "photo": undefined,
                                                  "role": "",
                                                },
                                              }
                                            }
                                            label="Full name"
                                          >
                                            <WithStyles(ForwardRef(FormControl))
                                              className="makeStyles-textField-575"
                                              fullWidth={true}
                                            >
                                              <ForwardRef(FormControl)
                                                className="makeStyles-textField-575"
                                                classes={
                                                  Object {
                                                    "fullWidth": "MuiFormControl-fullWidth",
                                                    "marginDense": "MuiFormControl-marginDense",
                                                    "marginNormal": "MuiFormControl-marginNormal",
                                                    "root": "MuiFormControl-root",
                                                  }
                                                }
                                                fullWidth={true}
                                              >
                                                <div
                                                  className="MuiFormControl-root makeStyles-textField-575 MuiFormControl-fullWidth"
                                                >
                                                  <ControlledFormLabel
                                                    disabled={false}
                                                  >
                                                    <label
                                                      className="makeStyles-label-584 makeStyles-label-585"
                                                    >
                                                      Full name
                                                    </label>
                                                  </ControlledFormLabel>
                                                  <Input
                                                    disabled={false}
                                                    endAdornment={null}
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    startAdornment={null}
                                                    value=""
                                                  >
                                                    <WithStyles(ForwardRef(Input))
                                                      className="makeStyles-input-586"
                                                      disableUnderline={true}
                                                      disabled={false}
                                                      endAdornment={null}
                                                      onBlur={[Function]}
                                                      onChange={[Function]}
                                                      startAdornment={null}
                                                      value=""
                                                    >
                                                      <ForwardRef(Input)
                                                        className="makeStyles-input-586"
                                                        classes={
                                                          Object {
                                                            "colorSecondary": "MuiInput-colorSecondary",
                                                            "disabled": "Mui-disabled",
                                                            "error": "Mui-error",
                                                            "focused": "Mui-focused",
                                                            "formControl": "MuiInput-formControl",
                                                            "fullWidth": "MuiInput-fullWidth",
                                                            "input": "MuiInput-input",
                                                            "inputMarginDense": "MuiInput-inputMarginDense",
                                                            "inputMultiline": "MuiInput-inputMultiline",
                                                            "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                            "marginDense": "MuiInput-marginDense",
                                                            "multiline": "MuiInput-multiline",
                                                            "root": "MuiInput-root",
                                                            "underline": "MuiInput-underline",
                                                          }
                                                        }
                                                        disableUnderline={true}
                                                        disabled={false}
                                                        endAdornment={null}
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        startAdornment={null}
                                                        value=""
                                                      >
                                                        <WithStyles(ForwardRef(InputBase))
                                                          className="makeStyles-input-586"
                                                          classes={
                                                            Object {
                                                              "colorSecondary": "MuiInput-colorSecondary",
                                                              "disabled": "Mui-disabled",
                                                              "error": "Mui-error",
                                                              "focused": "Mui-focused",
                                                              "formControl": "MuiInput-formControl",
                                                              "fullWidth": "MuiInput-fullWidth",
                                                              "input": "MuiInput-input",
                                                              "inputMarginDense": "MuiInput-inputMarginDense",
                                                              "inputMultiline": "MuiInput-inputMultiline",
                                                              "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                              "marginDense": "MuiInput-marginDense",
                                                              "multiline": "MuiInput-multiline",
                                                              "root": "MuiInput-root",
                                                              "underline": null,
                                                            }
                                                          }
                                                          disabled={false}
                                                          endAdornment={null}
                                                          fullWidth={false}
                                                          inputComponent="input"
                                                          multiline={false}
                                                          onBlur={[Function]}
                                                          onChange={[Function]}
                                                          startAdornment={null}
                                                          type="text"
                                                          value=""
                                                        >
                                                          <ForwardRef(InputBase)
                                                            className="makeStyles-input-586"
                                                            classes={
                                                              Object {
                                                                "adornedEnd": "MuiInputBase-adornedEnd",
                                                                "adornedStart": "MuiInputBase-adornedStart",
                                                                "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                                                                "disabled": "Mui-disabled Mui-disabled",
                                                                "error": "Mui-error Mui-error",
                                                                "focused": "Mui-focused Mui-focused",
                                                                "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                                                "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                                                "input": "MuiInputBase-input MuiInput-input",
                                                                "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                                                "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                                                "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                                                "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                                                "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                                                "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                                                "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                                                                "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                                                "root": "MuiInputBase-root MuiInput-root",
                                                              }
                                                            }
                                                            disabled={false}
                                                            endAdornment={null}
                                                            fullWidth={false}
                                                            inputComponent="input"
                                                            multiline={false}
                                                            onBlur={[Function]}
                                                            onChange={[Function]}
                                                            startAdornment={null}
                                                            type="text"
                                                            value=""
                                                          >
                                                            <div
                                                              className="MuiInputBase-root MuiInput-root makeStyles-input-586 MuiInputBase-formControl MuiInput-formControl"
                                                              onClick={[Function]}
                                                            >
                                                              <input
                                                                aria-invalid={false}
                                                                className="MuiInputBase-input MuiInput-input"
                                                                disabled={false}
                                                                onAnimationStart={[Function]}
                                                                onBlur={[Function]}
                                                                onChange={[Function]}
                                                                onFocus={[Function]}
                                                                required={false}
                                                                type="text"
                                                                value=""
                                                              />
                                                            </div>
                                                          </ForwardRef(InputBase)>
                                                        </WithStyles(ForwardRef(InputBase))>
                                                      </ForwardRef(Input)>
                                                    </WithStyles(ForwardRef(Input))>
                                                  </Input>
                                                  <WithStyles(ForwardRef(FormHelperText))
                                                    className="makeStyles-error-580 makeStyles-error-583"
                                                  >
                                                    <ForwardRef(FormHelperText)
                                                      className="makeStyles-error-580 makeStyles-error-583"
                                                      classes={
                                                        Object {
                                                          "contained": "MuiFormHelperText-contained",
                                                          "disabled": "Mui-disabled",
                                                          "error": "Mui-error",
                                                          "filled": "MuiFormHelperText-filled",
                                                          "focused": "Mui-focused",
                                                          "marginDense": "MuiFormHelperText-marginDense",
                                                          "required": "Mui-required",
                                                          "root": "MuiFormHelperText-root",
                                                        }
                                                      }
                                                    >
                                                      <p
                                                        className="MuiFormHelperText-root makeStyles-error-580 makeStyles-error-583"
                                                      >
                                                        this text is hidden
                                                      </p>
                                                    </ForwardRef(FormHelperText)>
                                                  </WithStyles(ForwardRef(FormHelperText))>
                                                </div>
                                              </ForwardRef(FormControl)>
                                            </WithStyles(ForwardRef(FormControl))>
                                          </FieldFormControl>
                                        </ControlledTextField>
                                      </Field>
                                      <Field
                                        className="makeStyles-textField-575"
                                        component={[Function]}
                                        label="Role"
                                        name="role"
                                        placeholder="i.e. Farmer, Conservationist, Manager, etc."
                                      >
                                        <ControlledTextField
                                          className="makeStyles-textField-575"
                                          field={
                                            Object {
                                              "name": "role",
                                              "onBlur": [Function],
                                              "onChange": [Function],
                                              "value": "",
                                            }
                                          }
                                          form={
                                            Object {
                                              "dirty": false,
                                              "errors": Object {},
                                              "getFieldHelpers": [Function],
                                              "getFieldMeta": [Function],
                                              "getFieldProps": [Function],
                                              "handleBlur": [Function],
                                              "handleChange": [Function],
                                              "handleReset": [Function],
                                              "handleSubmit": [Function],
                                              "initialErrors": Object {},
                                              "initialStatus": undefined,
                                              "initialTouched": Object {},
                                              "initialValues": Object {
                                                "description": undefined,
                                                "name": "",
                                                "phone": undefined,
                                                "photo": undefined,
                                                "role": "",
                                              },
                                              "isSubmitting": false,
                                              "isValid": true,
                                              "isValidating": false,
                                              "registerField": [Function],
                                              "resetForm": [Function],
                                              "setErrors": [Function],
                                              "setFieldError": [Function],
                                              "setFieldTouched": [Function],
                                              "setFieldValue": [Function],
                                              "setFormikState": [Function],
                                              "setStatus": [Function],
                                              "setSubmitting": [Function],
                                              "setTouched": [Function],
                                              "setValues": [Function],
                                              "status": undefined,
                                              "submitCount": 0,
                                              "submitForm": [Function],
                                              "touched": Object {},
                                              "unregisterField": [Function],
                                              "validateField": [Function],
                                              "validateForm": [Function],
                                              "validateOnBlur": true,
                                              "validateOnChange": true,
                                              "validateOnMount": false,
                                              "values": Object {
                                                "description": undefined,
                                                "name": "",
                                                "phone": undefined,
                                                "photo": undefined,
                                                "role": "",
                                              },
                                            }
                                          }
                                          label="Role"
                                          placeholder="i.e. Farmer, Conservationist, Manager, etc."
                                        >
                                          <FieldFormControl
                                            className="makeStyles-textField-575"
                                            disabled={false}
                                            field={
                                              Object {
                                                "name": "role",
                                                "onBlur": [Function],
                                                "onChange": [Function],
                                                "value": "",
                                              }
                                            }
                                            form={
                                              Object {
                                                "dirty": false,
                                                "errors": Object {},
                                                "getFieldHelpers": [Function],
                                                "getFieldMeta": [Function],
                                                "getFieldProps": [Function],
                                                "handleBlur": [Function],
                                                "handleChange": [Function],
                                                "handleReset": [Function],
                                                "handleSubmit": [Function],
                                                "initialErrors": Object {},
                                                "initialStatus": undefined,
                                                "initialTouched": Object {},
                                                "initialValues": Object {
                                                  "description": undefined,
                                                  "name": "",
                                                  "phone": undefined,
                                                  "photo": undefined,
                                                  "role": "",
                                                },
                                                "isSubmitting": false,
                                                "isValid": true,
                                                "isValidating": false,
                                                "registerField": [Function],
                                                "resetForm": [Function],
                                                "setErrors": [Function],
                                                "setFieldError": [Function],
                                                "setFieldTouched": [Function],
                                                "setFieldValue": [Function],
                                                "setFormikState": [Function],
                                                "setStatus": [Function],
                                                "setSubmitting": [Function],
                                                "setTouched": [Function],
                                                "setValues": [Function],
                                                "status": undefined,
                                                "submitCount": 0,
                                                "submitForm": [Function],
                                                "touched": Object {},
                                                "unregisterField": [Function],
                                                "validateField": [Function],
                                                "validateForm": [Function],
                                                "validateOnBlur": true,
                                                "validateOnChange": true,
                                                "validateOnMount": false,
                                                "values": Object {
                                                  "description": undefined,
                                                  "name": "",
                                                  "phone": undefined,
                                                  "photo": undefined,
                                                  "role": "",
                                                },
                                              }
                                            }
                                            label="Role"
                                          >
                                            <WithStyles(ForwardRef(FormControl))
                                              className="makeStyles-textField-575"
                                              fullWidth={true}
                                            >
                                              <ForwardRef(FormControl)
                                                className="makeStyles-textField-575"
                                                classes={
                                                  Object {
                                                    "fullWidth": "MuiFormControl-fullWidth",
                                                    "marginDense": "MuiFormControl-marginDense",
                                                    "marginNormal": "MuiFormControl-marginNormal",
                                                    "root": "MuiFormControl-root",
                                                  }
                                                }
                                                fullWidth={true}
                                              >
                                                <div
                                                  className="MuiFormControl-root makeStyles-textField-575 MuiFormControl-fullWidth"
                                                >
                                                  <ControlledFormLabel
                                                    disabled={false}
                                                  >
                                                    <label
                                                      className="makeStyles-label-584 makeStyles-label-588"
                                                    >
                                                      Role
                                                    </label>
                                                  </ControlledFormLabel>
                                                  <Input
                                                    disabled={false}
                                                    endAdornment={null}
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    placeholder="i.e. Farmer, Conservationist, Manager, etc."
                                                    startAdornment={null}
                                                    value=""
                                                  >
                                                    <WithStyles(ForwardRef(Input))
                                                      className="makeStyles-input-586"
                                                      disableUnderline={true}
                                                      disabled={false}
                                                      endAdornment={null}
                                                      onBlur={[Function]}
                                                      onChange={[Function]}
                                                      placeholder="i.e. Farmer, Conservationist, Manager, etc."
                                                      startAdornment={null}
                                                      value=""
                                                    >
                                                      <ForwardRef(Input)
                                                        className="makeStyles-input-586"
                                                        classes={
                                                          Object {
                                                            "colorSecondary": "MuiInput-colorSecondary",
                                                            "disabled": "Mui-disabled",
                                                            "error": "Mui-error",
                                                            "focused": "Mui-focused",
                                                            "formControl": "MuiInput-formControl",
                                                            "fullWidth": "MuiInput-fullWidth",
                                                            "input": "MuiInput-input",
                                                            "inputMarginDense": "MuiInput-inputMarginDense",
                                                            "inputMultiline": "MuiInput-inputMultiline",
                                                            "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                            "marginDense": "MuiInput-marginDense",
                                                            "multiline": "MuiInput-multiline",
                                                            "root": "MuiInput-root",
                                                            "underline": "MuiInput-underline",
                                                          }
                                                        }
                                                        disableUnderline={true}
                                                        disabled={false}
                                                        endAdornment={null}
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        placeholder="i.e. Farmer, Conservationist, Manager, etc."
                                                        startAdornment={null}
                                                        value=""
                                                      >
                                                        <WithStyles(ForwardRef(InputBase))
                                                          className="makeStyles-input-586"
                                                          classes={
                                                            Object {
                                                              "colorSecondary": "MuiInput-colorSecondary",
                                                              "disabled": "Mui-disabled",
                                                              "error": "Mui-error",
                                                              "focused": "Mui-focused",
                                                              "formControl": "MuiInput-formControl",
                                                              "fullWidth": "MuiInput-fullWidth",
                                                              "input": "MuiInput-input",
                                                              "inputMarginDense": "MuiInput-inputMarginDense",
                                                              "inputMultiline": "MuiInput-inputMultiline",
                                                              "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                              "marginDense": "MuiInput-marginDense",
                                                              "multiline": "MuiInput-multiline",
                                                              "root": "MuiInput-root",
                                                              "underline": null,
                                                            }
                                                          }
                                                          disabled={false}
                                                          endAdornment={null}
                                                          fullWidth={false}
                                                          inputComponent="input"
                                                          multiline={false}
                                                          onBlur={[Function]}
                                                          onChange={[Function]}
                                                          placeholder="i.e. Farmer, Conservationist, Manager, etc."
                                                          startAdornment={null}
                                                          type="text"
                                                          value=""
                                                        >
                                                          <ForwardRef(InputBase)
                                                            className="makeStyles-input-586"
                                                            classes={
                                                              Object {
                                                                "adornedEnd": "MuiInputBase-adornedEnd",
                                                                "adornedStart": "MuiInputBase-adornedStart",
                                                                "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                                                                "disabled": "Mui-disabled Mui-disabled",
                                                                "error": "Mui-error Mui-error",
                                                                "focused": "Mui-focused Mui-focused",
                                                                "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                                                "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                                                "input": "MuiInputBase-input MuiInput-input",
                                                                "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                                                "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                                                "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                                                "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                                                "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                                                "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                                                "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                                                                "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                                                "root": "MuiInputBase-root MuiInput-root",
                                                              }
                                                            }
                                                            disabled={false}
                                                            endAdornment={null}
                                                            fullWidth={false}
                                                            inputComponent="input"
                                                            multiline={false}
                                                            onBlur={[Function]}
                                                            onChange={[Function]}
                                                            placeholder="i.e. Farmer, Conservationist, Manager, etc."
                                                            startAdornment={null}
                                                            type="text"
                                                            value=""
                                                          >
                                                            <div
                                                              className="MuiInputBase-root MuiInput-root makeStyles-input-586 MuiInputBase-formControl MuiInput-formControl"
                                                              onClick={[Function]}
                                                            >
                                                              <input
                                                                aria-invalid={false}
                                                                className="MuiInputBase-input MuiInput-input"
                                                                disabled={false}
                                                                onAnimationStart={[Function]}
                                                                onBlur={[Function]}
                                                                onChange={[Function]}
                                                                onFocus={[Function]}
                                                                placeholder="i.e. Farmer, Conservationist, Manager, etc."
                                                                required={false}
                                                                type="text"
                                                                value=""
                                                              />
                                                            </div>
                                                          </ForwardRef(InputBase)>
                                                        </WithStyles(ForwardRef(InputBase))>
                                                      </ForwardRef(Input)>
                                                    </WithStyles(ForwardRef(Input))>
                                                  </Input>
                                                  <WithStyles(ForwardRef(FormHelperText))
                                                    className="makeStyles-error-580 makeStyles-error-587"
                                                  >
                                                    <ForwardRef(FormHelperText)
                                                      className="makeStyles-error-580 makeStyles-error-587"
                                                      classes={
                                                        Object {
                                                          "contained": "MuiFormHelperText-contained",
                                                          "disabled": "Mui-disabled",
                                                          "error": "Mui-error",
                                                          "filled": "MuiFormHelperText-filled",
                                                          "focused": "Mui-focused",
                                                          "marginDense": "MuiFormHelperText-marginDense",
                                                          "required": "Mui-required",
                                                          "root": "MuiFormHelperText-root",
                                                        }
                                                      }
                                                    >
                                                      <p
                                                        className="MuiFormHelperText-root makeStyles-error-580 makeStyles-error-587"
                                                      >
                                                        this text is hidden
                                                      </p>
                                                    </ForwardRef(FormHelperText)>
                                                  </WithStyles(ForwardRef(FormHelperText))>
                                                </div>
                                              </ForwardRef(FormControl)>
                                            </WithStyles(ForwardRef(FormControl))>
                                          </FieldFormControl>
                                        </ControlledTextField>
                                      </Field>
                                      <Field
                                        className="makeStyles-textField-575"
                                        component={[Function]}
                                        label="Bio photo"
                                        name="photo"
                                        optional={true}
                                      >
                                        <ImageField
                                          className="makeStyles-textField-575"
                                          field={
                                            Object {
                                              "name": "photo",
                                              "onBlur": [Function],
                                              "onChange": [Function],
                                              "value": undefined,
                                            }
                                          }
                                          form={
                                            Object {
                                              "dirty": false,
                                              "errors": Object {},
                                              "getFieldHelpers": [Function],
                                              "getFieldMeta": [Function],
                                              "getFieldProps": [Function],
                                              "handleBlur": [Function],
                                              "handleChange": [Function],
                                              "handleReset": [Function],
                                              "handleSubmit": [Function],
                                              "initialErrors": Object {},
                                              "initialStatus": undefined,
                                              "initialTouched": Object {},
                                              "initialValues": Object {
                                                "description": undefined,
                                                "name": "",
                                                "phone": undefined,
                                                "photo": undefined,
                                                "role": "",
                                              },
                                              "isSubmitting": false,
                                              "isValid": true,
                                              "isValidating": false,
                                              "registerField": [Function],
                                              "resetForm": [Function],
                                              "setErrors": [Function],
                                              "setFieldError": [Function],
                                              "setFieldTouched": [Function],
                                              "setFieldValue": [Function],
                                              "setFormikState": [Function],
                                              "setStatus": [Function],
                                              "setSubmitting": [Function],
                                              "setTouched": [Function],
                                              "setValues": [Function],
                                              "status": undefined,
                                              "submitCount": 0,
                                              "submitForm": [Function],
                                              "touched": Object {},
                                              "unregisterField": [Function],
                                              "validateField": [Function],
                                              "validateForm": [Function],
                                              "validateOnBlur": true,
                                              "validateOnChange": true,
                                              "validateOnMount": false,
                                              "values": Object {
                                                "description": undefined,
                                                "name": "",
                                                "phone": undefined,
                                                "photo": undefined,
                                                "role": "",
                                              },
                                            }
                                          }
                                          label="Bio photo"
                                          optional={true}
                                        >
                                          <FieldFormControl
                                            className="makeStyles-textField-575"
                                            disabled={false}
                                            field={
                                              Object {
                                                "name": "photo",
                                                "onBlur": [Function],
                                                "onChange": [Function],
                                                "value": undefined,
                                              }
                                            }
                                            form={
                                              Object {
                                                "dirty": false,
                                                "errors": Object {},
                                                "getFieldHelpers": [Function],
                                                "getFieldMeta": [Function],
                                                "getFieldProps": [Function],
                                                "handleBlur": [Function],
                                                "handleChange": [Function],
                                                "handleReset": [Function],
                                                "handleSubmit": [Function],
                                                "initialErrors": Object {},
                                                "initialStatus": undefined,
                                                "initialTouched": Object {},
                                                "initialValues": Object {
                                                  "description": undefined,
                                                  "name": "",
                                                  "phone": undefined,
                                                  "photo": undefined,
                                                  "role": "",
                                                },
                                                "isSubmitting": false,
                                                "isValid": true,
                                                "isValidating": false,
                                                "registerField": [Function],
                                                "resetForm": [Function],
                                                "setErrors": [Function],
                                                "setFieldError": [Function],
                                                "setFieldTouched": [Function],
                                                "setFieldValue": [Function],
                                                "setFormikState": [Function],
                                                "setStatus": [Function],
                                                "setSubmitting": [Function],
                                                "setTouched": [Function],
                                                "setValues": [Function],
                                                "status": undefined,
                                                "submitCount": 0,
                                                "submitForm": [Function],
                                                "touched": Object {},
                                                "unregisterField": [Function],
                                                "validateField": [Function],
                                                "validateForm": [Function],
                                                "validateOnBlur": true,
                                                "validateOnChange": true,
                                                "validateOnMount": false,
                                                "values": Object {
                                                  "description": undefined,
                                                  "name": "",
                                                  "phone": undefined,
                                                  "photo": undefined,
                                                  "role": "",
                                                },
                                              }
                                            }
                                            label="Bio photo"
                                            optional={true}
                                          >
                                            <WithStyles(ForwardRef(FormControl))
                                              className="makeStyles-textField-575"
                                              fullWidth={true}
                                            >
                                              <ForwardRef(FormControl)
                                                className="makeStyles-textField-575"
                                                classes={
                                                  Object {
                                                    "fullWidth": "MuiFormControl-fullWidth",
                                                    "marginDense": "MuiFormControl-marginDense",
                                                    "marginNormal": "MuiFormControl-marginNormal",
                                                    "root": "MuiFormControl-root",
                                                  }
                                                }
                                                fullWidth={true}
                                              >
                                                <div
                                                  className="MuiFormControl-root makeStyles-textField-575 MuiFormControl-fullWidth"
                                                >
                                                  <ControlledFormLabel
                                                    disabled={false}
                                                    optional={true}
                                                  >
                                                    <label
                                                      className="makeStyles-label-584 makeStyles-label-593"
                                                    >
                                                      Bio photo
                                                    </label>
                                                  </ControlledFormLabel>
                                                  <Styled(MuiBox)
                                                    alignItems="center"
                                                    className="makeStyles-imageBox-590"
                                                    display="flex"
                                                  >
                                                    <div
                                                      className="MuiBox-root MuiBox-root-594 makeStyles-imageBox-590"
                                                    >
                                                      <WithStyles(ForwardRef(Avatar))
                                                        className="makeStyles-avatar-589"
                                                      >
                                                        <ForwardRef(Avatar)
                                                          className="makeStyles-avatar-589"
                                                          classes={
                                                            Object {
                                                              "circle": "MuiAvatar-circle",
                                                              "colorDefault": "MuiAvatar-colorDefault",
                                                              "fallback": "MuiAvatar-fallback",
                                                              "img": "MuiAvatar-img",
                                                              "root": "MuiAvatar-root",
                                                              "rounded": "MuiAvatar-rounded",
                                                              "square": "MuiAvatar-square",
                                                            }
                                                          }
                                                        >
                                                          <div
                                                            className="MuiAvatar-root MuiAvatar-circle makeStyles-avatar-589 MuiAvatar-colorDefault"
                                                          >
                                                            <ForwardRef(PersonIcon)
                                                              className="MuiAvatar-fallback"
                                                            >
                                                              <WithStyles(ForwardRef(SvgIcon))
                                                                className="MuiAvatar-fallback"
                                                              >
                                                                <ForwardRef(SvgIcon)
                                                                  className="MuiAvatar-fallback"
                                                                  classes={
                                                                    Object {
                                                                      "colorAction": "MuiSvgIcon-colorAction",
                                                                      "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                                      "colorError": "MuiSvgIcon-colorError",
                                                                      "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                                      "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                                      "root": "MuiSvgIcon-root",
                                                                    }
                                                                  }
                                                                >
                                                                  <svg
                                                                    aria-hidden={true}
                                                                    className="MuiSvgIcon-root MuiAvatar-fallback"
                                                                    focusable="false"
                                                                    viewBox="0 0 24 24"
                                                                  >
                                                                    <path
                                                                      d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
                                                                    />
                                                                  </svg>
                                                                </ForwardRef(SvgIcon)>
                                                              </WithStyles(ForwardRef(SvgIcon))>
                                                            </ForwardRef(PersonIcon)>
                                                          </div>
                                                        </ForwardRef(Avatar)>
                                                      </WithStyles(ForwardRef(Avatar))>
                                                      <input
                                                        accept="image/*"
                                                        hidden={true}
                                                        id="image-upload-input"
                                                        onChange={[Function]}
                                                        type="file"
                                                      />
                                                      <label
                                                        htmlFor="image-upload-input"
                                                      >
                                                        <OutlinedButton
                                                          className="makeStyles-button-591"
                                                          isImageBtn={true}
                                                        >
                                                          <WithStyles(SpanButton)
                                                            className="makeStyles-button-591"
                                                            color="secondary"
                                                          >
                                                            <SpanButton
                                                              className="makeStyles-button-591"
                                                              classes={
                                                                Object {
                                                                  "root": "SpanButton-root-595",
                                                                }
                                                              }
                                                              color="secondary"
                                                            >
                                                              <WithStyles(ForwardRef(Button))
                                                                className="makeStyles-button-591"
                                                                classes={
                                                                  Object {
                                                                    "root": "SpanButton-root-595",
                                                                  }
                                                                }
                                                                color="secondary"
                                                                component="span"
                                                                variant="contained"
                                                              >
                                                                <ForwardRef(Button)
                                                                  className="makeStyles-button-591"
                                                                  classes={
                                                                    Object {
                                                                      "colorInherit": "MuiButton-colorInherit",
                                                                      "contained": "MuiButton-contained",
                                                                      "containedPrimary": "MuiButton-containedPrimary",
                                                                      "containedSecondary": "MuiButton-containedSecondary",
                                                                      "containedSizeLarge": "MuiButton-containedSizeLarge",
                                                                      "containedSizeSmall": "MuiButton-containedSizeSmall",
                                                                      "disableElevation": "MuiButton-disableElevation",
                                                                      "disabled": "Mui-disabled",
                                                                      "endIcon": "MuiButton-endIcon",
                                                                      "focusVisible": "Mui-focusVisible",
                                                                      "fullWidth": "MuiButton-fullWidth",
                                                                      "iconSizeLarge": "MuiButton-iconSizeLarge",
                                                                      "iconSizeMedium": "MuiButton-iconSizeMedium",
                                                                      "iconSizeSmall": "MuiButton-iconSizeSmall",
                                                                      "label": "MuiButton-label",
                                                                      "outlined": "MuiButton-outlined",
                                                                      "outlinedPrimary": "MuiButton-outlinedPrimary",
                                                                      "outlinedSecondary": "MuiButton-outlinedSecondary",
                                                                      "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                                                                      "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                                                                      "root": "MuiButton-root SpanButton-root-595",
                                                                      "sizeLarge": "MuiButton-sizeLarge",
                                                                      "sizeSmall": "MuiButton-sizeSmall",
                                                                      "startIcon": "MuiButton-startIcon",
                                                                      "text": "MuiButton-text",
                                                                      "textPrimary": "MuiButton-textPrimary",
                                                                      "textSecondary": "MuiButton-textSecondary",
                                                                      "textSizeLarge": "MuiButton-textSizeLarge",
                                                                      "textSizeSmall": "MuiButton-textSizeSmall",
                                                                    }
                                                                  }
                                                                  color="secondary"
                                                                  component="span"
                                                                  variant="contained"
                                                                >
                                                                  <WithStyles(ForwardRef(ButtonBase))
                                                                    className="MuiButton-root SpanButton-root-595 MuiButton-contained makeStyles-button-591 MuiButton-containedSecondary"
                                                                    component="span"
                                                                    disabled={false}
                                                                    focusRipple={true}
                                                                    focusVisibleClassName="Mui-focusVisible"
                                                                    type="button"
                                                                  >
                                                                    <ForwardRef(ButtonBase)
                                                                      className="MuiButton-root SpanButton-root-595 MuiButton-contained makeStyles-button-591 MuiButton-containedSecondary"
                                                                      classes={
                                                                        Object {
                                                                          "disabled": "Mui-disabled",
                                                                          "focusVisible": "Mui-focusVisible",
                                                                          "root": "MuiButtonBase-root",
                                                                        }
                                                                      }
                                                                      component="span"
                                                                      disabled={false}
                                                                      focusRipple={true}
                                                                      focusVisibleClassName="Mui-focusVisible"
                                                                      type="button"
                                                                    >
                                                                      <span
                                                                        aria-disabled={false}
                                                                        className="MuiButtonBase-root MuiButton-root SpanButton-root-595 MuiButton-contained makeStyles-button-591 MuiButton-containedSecondary"
                                                                        onBlur={[Function]}
                                                                        onDragLeave={[Function]}
                                                                        onFocus={[Function]}
                                                                        onKeyDown={[Function]}
                                                                        onKeyUp={[Function]}
                                                                        onMouseDown={[Function]}
                                                                        onMouseLeave={[Function]}
                                                                        onMouseUp={[Function]}
                                                                        onTouchEnd={[Function]}
                                                                        onTouchMove={[Function]}
                                                                        onTouchStart={[Function]}
                                                                        role="button"
                                                                        tabIndex={0}
                                                                      >
                                                                        <span
                                                                          className="MuiButton-label"
                                                                        >
                                                                          Add Image
                                                                        </span>
                                                                        <WithStyles(memo)
                                                                          center={false}
                                                                        >
                                                                          <ForwardRef(TouchRipple)
                                                                            center={false}
                                                                            classes={
                                                                              Object {
                                                                                "child": "MuiTouchRipple-child",
                                                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                                                "ripple": "MuiTouchRipple-ripple",
                                                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                                                "root": "MuiTouchRipple-root",
                                                                              }
                                                                            }
                                                                          >
                                                                            <span
                                                                              className="MuiTouchRipple-root"
                                                                            >
                                                                              <TransitionGroup
                                                                                childFactory={[Function]}
                                                                                component={null}
                                                                                exit={true}
                                                                              />
                                                                            </span>
                                                                          </ForwardRef(TouchRipple)>
                                                                        </WithStyles(memo)>
                                                                      </span>
                                                                    </ForwardRef(ButtonBase)>
                                                                  </WithStyles(ForwardRef(ButtonBase))>
                                                                </ForwardRef(Button)>
                                                              </WithStyles(ForwardRef(Button))>
                                                            </SpanButton>
                                                          </WithStyles(SpanButton)>
                                                        </OutlinedButton>
                                                      </label>
                                                    </div>
                                                  </Styled(MuiBox)>
                                                  <WithStyles(ForwardRef(FormHelperText))
                                                    className="makeStyles-error-580 makeStyles-error-592"
                                                  >
                                                    <ForwardRef(FormHelperText)
                                                      className="makeStyles-error-580 makeStyles-error-592"
                                                      classes={
                                                        Object {
                                                          "contained": "MuiFormHelperText-contained",
                                                          "disabled": "Mui-disabled",
                                                          "error": "Mui-error",
                                                          "filled": "MuiFormHelperText-filled",
                                                          "focused": "Mui-focused",
                                                          "marginDense": "MuiFormHelperText-marginDense",
                                                          "required": "Mui-required",
                                                          "root": "MuiFormHelperText-root",
                                                        }
                                                      }
                                                    >
                                                      <p
                                                        className="MuiFormHelperText-root makeStyles-error-580 makeStyles-error-592"
                                                      >
                                                        this text is hidden
                                                      </p>
                                                    </ForwardRef(FormHelperText)>
                                                  </WithStyles(ForwardRef(FormHelperText))>
                                                </div>
                                              </ForwardRef(FormControl)>
                                            </WithStyles(ForwardRef(FormControl))>
                                          </FieldFormControl>
                                          <CropImageModal
                                            circularCrop={true}
                                            initialImage=""
                                            onClose={[Function]}
                                            onSubmit={[Function]}
                                            open={false}
                                          >
                                            <RegenModal
                                              className="makeStyles-modal-596"
                                              onClose={[Function]}
                                              open={false}
                                            >
                                              <ForwardRef(Modal)
                                                onClose={[Function]}
                                                open={false}
                                              />
                                            </RegenModal>
                                          </CropImageModal>
                                        </ImageField>
                                      </Field>
                                      <Field
                                        className="makeStyles-textField-575"
                                        component={[Function]}
                                        label="Phone number"
                                        name="phone"
                                        optional={true}
                                        placeholder="+1 719 200 3488"
                                      >
                                        <RegenPhoneField
                                          className="makeStyles-textField-575"
                                          field={
                                            Object {
                                              "name": "phone",
                                              "onBlur": [Function],
                                              "onChange": [Function],
                                              "value": undefined,
                                            }
                                          }
                                          form={
                                            Object {
                                              "dirty": false,
                                              "errors": Object {},
                                              "getFieldHelpers": [Function],
                                              "getFieldMeta": [Function],
                                              "getFieldProps": [Function],
                                              "handleBlur": [Function],
                                              "handleChange": [Function],
                                              "handleReset": [Function],
                                              "handleSubmit": [Function],
                                              "initialErrors": Object {},
                                              "initialStatus": undefined,
                                              "initialTouched": Object {},
                                              "initialValues": Object {
                                                "description": undefined,
                                                "name": "",
                                                "phone": undefined,
                                                "photo": undefined,
                                                "role": "",
                                              },
                                              "isSubmitting": false,
                                              "isValid": true,
                                              "isValidating": false,
                                              "registerField": [Function],
                                              "resetForm": [Function],
                                              "setErrors": [Function],
                                              "setFieldError": [Function],
                                              "setFieldTouched": [Function],
                                              "setFieldValue": [Function],
                                              "setFormikState": [Function],
                                              "setStatus": [Function],
                                              "setSubmitting": [Function],
                                              "setTouched": [Function],
                                              "setValues": [Function],
                                              "status": undefined,
                                              "submitCount": 0,
                                              "submitForm": [Function],
                                              "touched": Object {},
                                              "unregisterField": [Function],
                                              "validateField": [Function],
                                              "validateForm": [Function],
                                              "validateOnBlur": true,
                                              "validateOnChange": true,
                                              "validateOnMount": false,
                                              "values": Object {
                                                "description": undefined,
                                                "name": "",
                                                "phone": undefined,
                                                "photo": undefined,
                                                "role": "",
                                              },
                                            }
                                          }
                                          label="Phone number"
                                          optional={true}
                                          placeholder="+1 719 200 3488"
                                        >
                                          <FieldFormControl
                                            className="makeStyles-textField-575"
                                            disabled={false}
                                            field={
                                              Object {
                                                "name": "phone",
                                                "onBlur": [Function],
                                                "onChange": [Function],
                                                "value": undefined,
                                              }
                                            }
                                            form={
                                              Object {
                                                "dirty": false,
                                                "errors": Object {},
                                                "getFieldHelpers": [Function],
                                                "getFieldMeta": [Function],
                                                "getFieldProps": [Function],
                                                "handleBlur": [Function],
                                                "handleChange": [Function],
                                                "handleReset": [Function],
                                                "handleSubmit": [Function],
                                                "initialErrors": Object {},
                                                "initialStatus": undefined,
                                                "initialTouched": Object {},
                                                "initialValues": Object {
                                                  "description": undefined,
                                                  "name": "",
                                                  "phone": undefined,
                                                  "photo": undefined,
                                                  "role": "",
                                                },
                                                "isSubmitting": false,
                                                "isValid": true,
                                                "isValidating": false,
                                                "registerField": [Function],
                                                "resetForm": [Function],
                                                "setErrors": [Function],
                                                "setFieldError": [Function],
                                                "setFieldTouched": [Function],
                                                "setFieldValue": [Function],
                                                "setFormikState": [Function],
                                                "setStatus": [Function],
                                                "setSubmitting": [Function],
                                                "setTouched": [Function],
                                                "setValues": [Function],
                                                "status": undefined,
                                                "submitCount": 0,
                                                "submitForm": [Function],
                                                "touched": Object {},
                                                "unregisterField": [Function],
                                                "validateField": [Function],
                                                "validateForm": [Function],
                                                "validateOnBlur": true,
                                                "validateOnChange": true,
                                                "validateOnMount": false,
                                                "values": Object {
                                                  "description": undefined,
                                                  "name": "",
                                                  "phone": undefined,
                                                  "photo": undefined,
                                                  "role": "",
                                                },
                                              }
                                            }
                                            label="Phone number"
                                            optional={true}
                                          >
                                            <WithStyles(ForwardRef(FormControl))
                                              className="makeStyles-textField-575"
                                              fullWidth={true}
                                            >
                                              <ForwardRef(FormControl)
                                                className="makeStyles-textField-575"
                                                classes={
                                                  Object {
                                                    "fullWidth": "MuiFormControl-fullWidth",
                                                    "marginDense": "MuiFormControl-marginDense",
                                                    "marginNormal": "MuiFormControl-marginNormal",
                                                    "root": "MuiFormControl-root",
                                                  }
                                                }
                                                fullWidth={true}
                                              >
                                                <div
                                                  className="MuiFormControl-root makeStyles-textField-575 MuiFormControl-fullWidth"
                                                >
                                                  <ControlledFormLabel
                                                    disabled={false}
                                                    optional={true}
                                                  >
                                                    <label
                                                      className="makeStyles-label-584 makeStyles-label-605"
                                                    >
                                                      Phone number
                                                    </label>
                                                  </ControlledFormLabel>
                                                  <t
                                                    alwaysDefaultMask={false}
                                                    areaCodes={null}
                                                    autoFormat={true}
                                                    autocompleteSearch={false}
                                                    buttonClass=""
                                                    buttonStyle={Object {}}
                                                    containerClass="makeStyles-inputWrap-601"
                                                    containerStyle={Object {}}
                                                    copyNumbersOnly={true}
                                                    country="us"
                                                    countryCodeEditable={true}
                                                    defaultErrorMessage=""
                                                    defaultMask="... ... ... ... .."
                                                    disableCountryCode={false}
                                                    disableCountryGuess={false}
                                                    disableDropdown={false}
                                                    disableInitialCountryGuess={false}
                                                    disableSearchIcon={false}
                                                    disabled={false}
                                                    dropdownClass=""
                                                    dropdownStyle={Object {}}
                                                    enableAreaCodeStretch={false}
                                                    enableAreaCodes={false}
                                                    enableClickOutside={true}
                                                    enableLongNumbers={false}
                                                    enableSearch={true}
                                                    enableTerritories={false}
                                                    excludeCountries={Array []}
                                                    flagsImagePath="./flags.png"
                                                    inputClass="makeStyles-input-602 makeStyles-input-603"
                                                    inputProps={Object {}}
                                                    inputStyle={Object {}}
                                                    isValid={true}
                                                    jumpCursorToEnd={true}
                                                    keys={
                                                      Object {
                                                        "A": 65,
                                                        "DOWN": 40,
                                                        "ENTER": 13,
                                                        "ESC": 27,
                                                        "LEFT": 37,
                                                        "PLUS": 43,
                                                        "RIGHT": 39,
                                                        "SPACE": 32,
                                                        "TAB": 9,
                                                        "UP": 38,
                                                        "Z": 90,
                                                      }
                                                    }
                                                    localization={Object {}}
                                                    masks={null}
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onEnterKeyPress={null}
                                                    onlyCountries={Array []}
                                                    placeholder="+1 719 200 3488"
                                                    preferredCountries={Array []}
                                                    prefix="+"
                                                    preserveOrder={Array []}
                                                    priority={null}
                                                    regions=""
                                                    renderStringAsFlag=""
                                                    searchClass=""
                                                    searchNotFound="No entries to show"
                                                    searchPlaceholder="search"
                                                    searchStyle={Object {}}
                                                    showDropdown={false}
                                                    specialLabel="Phone"
                                                    value=""
                                                  >
                                                    <div
                                                      className="makeStyles-inputWrap-601 react-tel-input"
                                                      onKeyDown={[Function]}
                                                      style={Object {}}
                                                    >
                                                      <div
                                                        className="special-label"
                                                      >
                                                        Phone
                                                      </div>
                                                      <input
                                                        className="makeStyles-input-602 makeStyles-input-603 form-control"
                                                        disabled={false}
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        onClick={[Function]}
                                                        onCopy={[Function]}
                                                        onDoubleClick={[Function]}
                                                        onFocus={[Function]}
                                                        onKeyDown={[Function]}
                                                        placeholder="+1 719 200 3488"
                                                        style={Object {}}
                                                        type="tel"
                                                        value="+1"
                                                      />
                                                      <div
                                                        className=" flag-dropdown"
                                                        style={Object {}}
                                                      >
                                                        <div
                                                          aria-haspopup="listbox"
                                                          className="selected-flag"
                                                          onClick={[Function]}
                                                          role="button"
                                                          tabIndex="0"
                                                          title="United States: + 1"
                                                        >
                                                          <div
                                                            className="flag us"
                                                          >
                                                            <div
                                                              className="arrow"
                                                            />
                                                          </div>
                                                        </div>
                                                      </div>
                                                    </div>
                                                  </t>
                                                  <WithStyles(ForwardRef(FormHelperText))
                                                    className="makeStyles-error-580 makeStyles-error-604"
                                                  >
                                                    <ForwardRef(FormHelperText)
                                                      className="makeStyles-error-580 makeStyles-error-604"
                                                      classes={
                                                        Object {
                                                          "contained": "MuiFormHelperText-contained",
                                                          "disabled": "Mui-disabled",
                                                          "error": "Mui-error",
                                                          "filled": "MuiFormHelperText-filled",
                                                          "focused": "Mui-focused",
                                                          "marginDense": "MuiFormHelperText-marginDense",
                                                          "required": "Mui-required",
                                                          "root": "MuiFormHelperText-root",
                                                        }
                                                      }
                                                    >
                                                      <p
                                                        className="MuiFormHelperText-root makeStyles-error-580 makeStyles-error-604"
                                                      >
                                                        this text is hidden
                                                      </p>
                                                    </ForwardRef(FormHelperText)>
                                                  </WithStyles(ForwardRef(FormHelperText))>
                                                </div>
                                              </ForwardRef(FormControl)>
                                            </WithStyles(ForwardRef(FormControl))>
                                          </FieldFormControl>
                                        </RegenPhoneField>
                                      </Field>
                                      <Field
                                        charLimit={160}
                                        className="makeStyles-textField-575"
                                        component={[Function]}
                                        description="Describe any relevant background and experience. This info may be shown on the project page."
                                        label="Short personal description"
                                        multiline={true}
                                        name="description"
                                        optional={true}
                                        rows={3}
                                      >
                                        <ControlledTextField
                                          charLimit={160}
                                          className="makeStyles-textField-575"
                                          description="Describe any relevant background and experience. This info may be shown on the project page."
                                          field={
                                            Object {
                                              "name": "description",
                                              "onBlur": [Function],
                                              "onChange": [Function],
                                              "value": undefined,
                                            }
                                          }
                                          form={
                                            Object {
                                              "dirty": false,
                                              "errors": Object {},
                                              "getFieldHelpers": [Function],
                                              "getFieldMeta": [Function],
                                              "getFieldProps": [Function],
                                              "handleBlur": [Function],
                                              "handleChange": [Function],
                                              "handleReset": [Function],
                                              "handleSubmit": [Function],
                                              "initialErrors": Object {},
                                              "initialStatus": undefined,
                                              "initialTouched": Object {},
                                              "initialValues": Object {
                                                "description": undefined,
                                                "name": "",
                                                "phone": undefined,
                                                "photo": undefined,
                                                "role": "",
                                              },
                                              "isSubmitting": false,
                                              "isValid": true,
                                              "isValidating": false,
                                              "registerField": [Function],
                                              "resetForm": [Function],
                                              "setErrors": [Function],
                                              "setFieldError": [Function],
                                              "setFieldTouched": [Function],
                                              "setFieldValue": [Function],
                                              "setFormikState": [Function],
                                              "setStatus": [Function],
                                              "setSubmitting": [Function],
                                              "setTouched": [Function],
                                              "setValues": [Function],
                                              "status": undefined,
                                              "submitCount": 0,
                                              "submitForm": [Function],
                                              "touched": Object {},
                                              "unregisterField": [Function],
                                              "validateField": [Function],
                                              "validateForm": [Function],
                                              "validateOnBlur": true,
                                              "validateOnChange": true,
                                              "validateOnMount": false,
                                              "values": Object {
                                                "description": undefined,
                                                "name": "",
                                                "phone": undefined,
                                                "photo": undefined,
                                                "role": "",
                                              },
                                            }
                                          }
                                          label="Short personal description"
                                          multiline={true}
                                          optional={true}
                                          rows={3}
                                        >
                                          <FieldFormControl
                                            className="makeStyles-textField-575"
                                            description="Describe any relevant background and experience. This info may be shown on the project page."
                                            disabled={false}
                                            field={
                                              Object {
                                                "name": "description",
                                                "onBlur": [Function],
                                                "onChange": [Function],
                                                "value": undefined,
                                              }
                                            }
                                            form={
                                              Object {
                                                "dirty": false,
                                                "errors": Object {},
                                                "getFieldHelpers": [Function],
                                                "getFieldMeta": [Function],
                                                "getFieldProps": [Function],
                                                "handleBlur": [Function],
                                                "handleChange": [Function],
                                                "handleReset": [Function],
                                                "handleSubmit": [Function],
                                                "initialErrors": Object {},
                                                "initialStatus": undefined,
                                                "initialTouched": Object {},
                                                "initialValues": Object {
                                                  "description": undefined,
                                                  "name": "",
                                                  "phone": undefined,
                                                  "photo": undefined,
                                                  "role": "",
                                                },
                                                "isSubmitting": false,
                                                "isValid": true,
                                                "isValidating": false,
                                                "registerField": [Function],
                                                "resetForm": [Function],
                                                "setErrors": [Function],
                                                "setFieldError": [Function],
                                                "setFieldTouched": [Function],
                                                "setFieldValue": [Function],
                                                "setFormikState": [Function],
                                                "setStatus": [Function],
                                                "setSubmitting": [Function],
                                                "setTouched": [Function],
                                                "setValues": [Function],
                                                "status": undefined,
                                                "submitCount": 0,
                                                "submitForm": [Function],
                                                "touched": Object {},
                                                "unregisterField": [Function],
                                                "validateField": [Function],
                                                "validateForm": [Function],
                                                "validateOnBlur": true,
                                                "validateOnChange": true,
                                                "validateOnMount": false,
                                                "values": Object {
                                                  "description": undefined,
                                                  "name": "",
                                                  "phone": undefined,
                                                  "photo": undefined,
                                                  "role": "",
                                                },
                                              }
                                            }
                                            label="Short personal description"
                                            optional={true}
                                          >
                                            <WithStyles(ForwardRef(FormControl))
                                              className="makeStyles-textField-575"
                                              fullWidth={true}
                                            >
                                              <ForwardRef(FormControl)
                                                className="makeStyles-textField-575"
                                                classes={
                                                  Object {
                                                    "fullWidth": "MuiFormControl-fullWidth",
                                                    "marginDense": "MuiFormControl-marginDense",
                                                    "marginNormal": "MuiFormControl-marginNormal",
                                                    "root": "MuiFormControl-root",
                                                  }
                                                }
                                                fullWidth={true}
                                              >
                                                <div
                                                  className="MuiFormControl-root makeStyles-textField-575 MuiFormControl-fullWidth"
                                                >
                                                  <ControlledFormLabel
                                                    disabled={false}
                                                    optional={true}
                                                  >
                                                    <label
                                                      className="makeStyles-label-584 makeStyles-label-607"
                                                    >
                                                      Short personal description
                                                    </label>
                                                  </ControlledFormLabel>
                                                  <WithStyles(ForwardRef(Typography))
                                                    className="makeStyles-txtGray-581"
                                                    variant="body1"
                                                  >
                                                    <ForwardRef(Typography)
                                                      className="makeStyles-txtGray-581"
                                                      classes={
                                                        Object {
                                                          "alignCenter": "MuiTypography-alignCenter",
                                                          "alignJustify": "MuiTypography-alignJustify",
                                                          "alignLeft": "MuiTypography-alignLeft",
                                                          "alignRight": "MuiTypography-alignRight",
                                                          "body1": "MuiTypography-body1",
                                                          "body2": "MuiTypography-body2",
                                                          "button": "MuiTypography-button",
                                                          "caption": "MuiTypography-caption",
                                                          "colorError": "MuiTypography-colorError",
                                                          "colorInherit": "MuiTypography-colorInherit",
                                                          "colorPrimary": "MuiTypography-colorPrimary",
                                                          "colorSecondary": "MuiTypography-colorSecondary",
                                                          "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                                          "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                                          "displayBlock": "MuiTypography-displayBlock",
                                                          "displayInline": "MuiTypography-displayInline",
                                                          "gutterBottom": "MuiTypography-gutterBottom",
                                                          "h1": "MuiTypography-h1",
                                                          "h2": "MuiTypography-h2",
                                                          "h3": "MuiTypography-h3",
                                                          "h4": "MuiTypography-h4",
                                                          "h5": "MuiTypography-h5",
                                                          "h6": "MuiTypography-h6",
                                                          "noWrap": "MuiTypography-noWrap",
                                                          "overline": "MuiTypography-overline",
                                                          "paragraph": "MuiTypography-paragraph",
                                                          "root": "MuiTypography-root",
                                                          "srOnly": "MuiTypography-srOnly",
                                                          "subtitle1": "MuiTypography-subtitle1",
                                                          "subtitle2": "MuiTypography-subtitle2",
                                                        }
                                                      }
                                                      variant="body1"
                                                      variantMapping={
                                                        Object {
                                                          "body1": "p",
                                                          "body2": "p",
                                                          "h1": "h1",
                                                          "h2": "h2",
                                                          "h3": "h3",
                                                          "h4": "h4",
                                                          "h5": "h5",
                                                          "h6": "h6",
                                                          "subtitle1": "h2",
                                                          "subtitle2": "h2",
                                                        }
                                                      }
                                                    >
                                                      <p
                                                        className="MuiTypography-root makeStyles-txtGray-581 MuiTypography-body1"
                                                      >
                                                        Describe any relevant background and experience. This info may be shown on the project page.
                                                      </p>
                                                    </ForwardRef(Typography)>
                                                  </WithStyles(ForwardRef(Typography))>
                                                  <Input
                                                    disabled={false}
                                                    endAdornment={null}
                                                    multiline={true}
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    rows={3}
                                                    startAdornment={null}
                                                  >
                                                    <WithStyles(ForwardRef(Input))
                                                      className="makeStyles-input-586"
                                                      disableUnderline={true}
                                                      disabled={false}
                                                      endAdornment={null}
                                                      multiline={true}
                                                      onBlur={[Function]}
                                                      onChange={[Function]}
                                                      rows={3}
                                                      startAdornment={null}
                                                    >
                                                      <ForwardRef(Input)
                                                        className="makeStyles-input-586"
                                                        classes={
                                                          Object {
                                                            "colorSecondary": "MuiInput-colorSecondary",
                                                            "disabled": "Mui-disabled",
                                                            "error": "Mui-error",
                                                            "focused": "Mui-focused",
                                                            "formControl": "MuiInput-formControl",
                                                            "fullWidth": "MuiInput-fullWidth",
                                                            "input": "MuiInput-input",
                                                            "inputMarginDense": "MuiInput-inputMarginDense",
                                                            "inputMultiline": "MuiInput-inputMultiline",
                                                            "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                            "marginDense": "MuiInput-marginDense",
                                                            "multiline": "MuiInput-multiline",
                                                            "root": "MuiInput-root",
                                                            "underline": "MuiInput-underline",
                                                          }
                                                        }
                                                        disableUnderline={true}
                                                        disabled={false}
                                                        endAdornment={null}
                                                        multiline={true}
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        rows={3}
                                                        startAdornment={null}
                                                      >
                                                        <WithStyles(ForwardRef(InputBase))
                                                          className="makeStyles-input-586"
                                                          classes={
                                                            Object {
                                                              "colorSecondary": "MuiInput-colorSecondary",
                                                              "disabled": "Mui-disabled",
                                                              "error": "Mui-error",
                                                              "focused": "Mui-focused",
                                                              "formControl": "MuiInput-formControl",
                                                              "fullWidth": "MuiInput-fullWidth",
                                                              "input": "MuiInput-input",
                                                              "inputMarginDense": "MuiInput-inputMarginDense",
                                                              "inputMultiline": "MuiInput-inputMultiline",
                                                              "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                              "marginDense": "MuiInput-marginDense",
                                                              "multiline": "MuiInput-multiline",
                                                              "root": "MuiInput-root",
                                                              "underline": null,
                                                            }
                                                          }
                                                          disabled={false}
                                                          endAdornment={null}
                                                          fullWidth={false}
                                                          inputComponent="input"
                                                          multiline={true}
                                                          onBlur={[Function]}
                                                          onChange={[Function]}
                                                          rows={3}
                                                          startAdornment={null}
                                                          type="text"
                                                        >
                                                          <ForwardRef(InputBase)
                                                            className="makeStyles-input-586"
                                                            classes={
                                                              Object {
                                                                "adornedEnd": "MuiInputBase-adornedEnd",
                                                                "adornedStart": "MuiInputBase-adornedStart",
                                                                "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                                                                "disabled": "Mui-disabled Mui-disabled",
                                                                "error": "Mui-error Mui-error",
                                                                "focused": "Mui-focused Mui-focused",
                                                                "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                                                "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                                                "input": "MuiInputBase-input MuiInput-input",
                                                                "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                                                "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                                                "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                                                "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                                                "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                                                "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                                                "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                                                                "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                                                "root": "MuiInputBase-root MuiInput-root",
                                                              }
                                                            }
                                                            disabled={false}
                                                            endAdornment={null}
                                                            fullWidth={false}
                                                            inputComponent="input"
                                                            multiline={true}
                                                            onBlur={[Function]}
                                                            onChange={[Function]}
                                                            rows={3}
                                                            startAdornment={null}
                                                            type="text"
                                                          >
                                                            <div
                                                              className="MuiInputBase-root MuiInput-root makeStyles-input-586 MuiInputBase-formControl MuiInput-formControl MuiInputBase-multiline MuiInput-multiline"
                                                              onClick={[Function]}
                                                            >
                                                              <textarea
                                                                aria-invalid={false}
                                                                className="MuiInputBase-input MuiInput-input MuiInputBase-inputMultiline MuiInput-inputMultiline"
                                                                disabled={false}
                                                                onAnimationStart={[Function]}
                                                                onBlur={[Function]}
                                                                onChange={[Function]}
                                                                onFocus={[Function]}
                                                                required={false}
                                                                rows={3}
                                                              />
                                                            </div>
                                                          </ForwardRef(InputBase)>
                                                        </WithStyles(ForwardRef(InputBase))>
                                                      </ForwardRef(Input)>
                                                    </WithStyles(ForwardRef(Input))>
                                                  </Input>
                                                  <WithStyles(ForwardRef(Typography))
                                                    className="makeStyles-charCount-579"
                                                    variant="body1"
                                                  >
                                                    <ForwardRef(Typography)
                                                      className="makeStyles-charCount-579"
                                                      classes={
                                                        Object {
                                                          "alignCenter": "MuiTypography-alignCenter",
                                                          "alignJustify": "MuiTypography-alignJustify",
                                                          "alignLeft": "MuiTypography-alignLeft",
                                                          "alignRight": "MuiTypography-alignRight",
                                                          "body1": "MuiTypography-body1",
                                                          "body2": "MuiTypography-body2",
                                                          "button": "MuiTypography-button",
                                                          "caption": "MuiTypography-caption",
                                                          "colorError": "MuiTypography-colorError",
                                                          "colorInherit": "MuiTypography-colorInherit",
                                                          "colorPrimary": "MuiTypography-colorPrimary",
                                                          "colorSecondary": "MuiTypography-colorSecondary",
                                                          "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                                          "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                                          "displayBlock": "MuiTypography-displayBlock",
                                                          "displayInline": "MuiTypography-displayInline",
                                                          "gutterBottom": "MuiTypography-gutterBottom",
                                                          "h1": "MuiTypography-h1",
                                                          "h2": "MuiTypography-h2",
                                                          "h3": "MuiTypography-h3",
                                                          "h4": "MuiTypography-h4",
                                                          "h5": "MuiTypography-h5",
                                                          "h6": "MuiTypography-h6",
                                                          "noWrap": "MuiTypography-noWrap",
                                                          "overline": "MuiTypography-overline",
                                                          "paragraph": "MuiTypography-paragraph",
                                                          "root": "MuiTypography-root",
                                                          "srOnly": "MuiTypography-srOnly",
                                                          "subtitle1": "MuiTypography-subtitle1",
                                                          "subtitle2": "MuiTypography-subtitle2",
                                                        }
                                                      }
                                                      variant="body1"
                                                      variantMapping={
                                                        Object {
                                                          "body1": "p",
                                                          "body2": "p",
                                                          "h1": "h1",
                                                          "h2": "h2",
                                                          "h3": "h3",
                                                          "h4": "h4",
                                                          "h5": "h5",
                                                          "h6": "h6",
                                                          "subtitle1": "h2",
                                                          "subtitle2": "h2",
                                                        }
                                                      }
                                                    >
                                                      <p
                                                        className="MuiTypography-root makeStyles-charCount-579 MuiTypography-body1"
                                                      >
                                                        160 characters remaining
                                                      </p>
                                                    </ForwardRef(Typography)>
                                                  </WithStyles(ForwardRef(Typography))>
                                                  <WithStyles(ForwardRef(FormHelperText))
                                                    className="makeStyles-error-580 makeStyles-error-606"
                                                  >
                                                    <ForwardRef(FormHelperText)
                                                      className="makeStyles-error-580 makeStyles-error-606"
                                                      classes={
                                                        Object {
                                                          "contained": "MuiFormHelperText-contained",
                                                          "disabled": "Mui-disabled",
                                                          "error": "Mui-error",
                                                          "filled": "MuiFormHelperText-filled",
                                                          "focused": "Mui-focused",
                                                          "marginDense": "MuiFormHelperText-marginDense",
                                                          "required": "Mui-required",
                                                          "root": "MuiFormHelperText-root",
                                                        }
                                                      }
                                                    >
                                                      <p
                                                        className="MuiFormHelperText-root makeStyles-error-580 makeStyles-error-606"
                                                      >
                                                        this text is hidden
                                                      </p>
                                                    </ForwardRef(FormHelperText)>
                                                  </WithStyles(ForwardRef(FormHelperText))>
                                                </div>
                                              </ForwardRef(FormControl)>
                                            </WithStyles(ForwardRef(FormControl))>
                                          </FieldFormControl>
                                        </ControlledTextField>
                                      </Field>
                                    </div>
                                  </ForwardRef(Paper)>
                                </WithStyles(ForwardRef(Paper))>
                              </ForwardRef(Card)>
                            </WithStyles(ForwardRef(Card))>
                          </RegenCard>
                        </OnBoardingCard>
                        <OnboardingSubmit
                          disabled={false}
                          onSubmit={[Function]}
                        >
                          <WithStyles(ForwardRef(Grid))
                            container={true}
                            justify="flex-end"
                          >
                            <ForwardRef(Grid)
                              classes={
                                Object {
                                  "align-content-xs-center": "MuiGrid-align-content-xs-center",
                                  "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                                  "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                                  "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                                  "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                                  "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                                  "align-items-xs-center": "MuiGrid-align-items-xs-center",
                                  "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                                  "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                                  "container": "MuiGrid-container",
                                  "direction-xs-column": "MuiGrid-direction-xs-column",
                                  "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                                  "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                                  "grid-lg-1": "MuiGrid-grid-lg-1",
                                  "grid-lg-10": "MuiGrid-grid-lg-10",
                                  "grid-lg-11": "MuiGrid-grid-lg-11",
                                  "grid-lg-12": "MuiGrid-grid-lg-12",
                                  "grid-lg-2": "MuiGrid-grid-lg-2",
                                  "grid-lg-3": "MuiGrid-grid-lg-3",
                                  "grid-lg-4": "MuiGrid-grid-lg-4",
                                  "grid-lg-5": "MuiGrid-grid-lg-5",
                                  "grid-lg-6": "MuiGrid-grid-lg-6",
                                  "grid-lg-7": "MuiGrid-grid-lg-7",
                                  "grid-lg-8": "MuiGrid-grid-lg-8",
                                  "grid-lg-9": "MuiGrid-grid-lg-9",
                                  "grid-lg-auto": "MuiGrid-grid-lg-auto",
                                  "grid-lg-true": "MuiGrid-grid-lg-true",
                                  "grid-md-1": "MuiGrid-grid-md-1",
                                  "grid-md-10": "MuiGrid-grid-md-10",
                                  "grid-md-11": "MuiGrid-grid-md-11",
                                  "grid-md-12": "MuiGrid-grid-md-12",
                                  "grid-md-2": "MuiGrid-grid-md-2",
                                  "grid-md-3": "MuiGrid-grid-md-3",
                                  "grid-md-4": "MuiGrid-grid-md-4",
                                  "grid-md-5": "MuiGrid-grid-md-5",
                                  "grid-md-6": "MuiGrid-grid-md-6",
                                  "grid-md-7": "MuiGrid-grid-md-7",
                                  "grid-md-8": "MuiGrid-grid-md-8",
                                  "grid-md-9": "MuiGrid-grid-md-9",
                                  "grid-md-auto": "MuiGrid-grid-md-auto",
                                  "grid-md-true": "MuiGrid-grid-md-true",
                                  "grid-sm-1": "MuiGrid-grid-sm-1",
                                  "grid-sm-10": "MuiGrid-grid-sm-10",
                                  "grid-sm-11": "MuiGrid-grid-sm-11",
                                  "grid-sm-12": "MuiGrid-grid-sm-12",
                                  "grid-sm-2": "MuiGrid-grid-sm-2",
                                  "grid-sm-3": "MuiGrid-grid-sm-3",
                                  "grid-sm-4": "MuiGrid-grid-sm-4",
                                  "grid-sm-5": "MuiGrid-grid-sm-5",
                                  "grid-sm-6": "MuiGrid-grid-sm-6",
                                  "grid-sm-7": "MuiGrid-grid-sm-7",
                                  "grid-sm-8": "MuiGrid-grid-sm-8",
                                  "grid-sm-9": "MuiGrid-grid-sm-9",
                                  "grid-sm-auto": "MuiGrid-grid-sm-auto",
                                  "grid-sm-true": "MuiGrid-grid-sm-true",
                                  "grid-xl-1": "MuiGrid-grid-xl-1",
                                  "grid-xl-10": "MuiGrid-grid-xl-10",
                                  "grid-xl-11": "MuiGrid-grid-xl-11",
                                  "grid-xl-12": "MuiGrid-grid-xl-12",
                                  "grid-xl-2": "MuiGrid-grid-xl-2",
                                  "grid-xl-3": "MuiGrid-grid-xl-3",
                                  "grid-xl-4": "MuiGrid-grid-xl-4",
                                  "grid-xl-5": "MuiGrid-grid-xl-5",
                                  "grid-xl-6": "MuiGrid-grid-xl-6",
                                  "grid-xl-7": "MuiGrid-grid-xl-7",
                                  "grid-xl-8": "MuiGrid-grid-xl-8",
                                  "grid-xl-9": "MuiGrid-grid-xl-9",
                                  "grid-xl-auto": "MuiGrid-grid-xl-auto",
                                  "grid-xl-true": "MuiGrid-grid-xl-true",
                                  "grid-xs-1": "MuiGrid-grid-xs-1",
                                  "grid-xs-10": "MuiGrid-grid-xs-10",
                                  "grid-xs-11": "MuiGrid-grid-xs-11",
                                  "grid-xs-12": "MuiGrid-grid-xs-12",
                                  "grid-xs-2": "MuiGrid-grid-xs-2",
                                  "grid-xs-3": "MuiGrid-grid-xs-3",
                                  "grid-xs-4": "MuiGrid-grid-xs-4",
                                  "grid-xs-5": "MuiGrid-grid-xs-5",
                                  "grid-xs-6": "MuiGrid-grid-xs-6",
                                  "grid-xs-7": "MuiGrid-grid-xs-7",
                                  "grid-xs-8": "MuiGrid-grid-xs-8",
                                  "grid-xs-9": "MuiGrid-grid-xs-9",
                                  "grid-xs-auto": "MuiGrid-grid-xs-auto",
                                  "grid-xs-true": "MuiGrid-grid-xs-true",
                                  "item": "MuiGrid-item",
                                  "justify-xs-center": "MuiGrid-justify-xs-center",
                                  "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
                                  "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
                                  "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
                                  "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
                                  "root": "MuiGrid-root",
                                  "spacing-xs-0": "MuiGrid-spacing-xs-0",
                                  "spacing-xs-1": "MuiGrid-spacing-xs-1",
                                  "spacing-xs-10": "MuiGrid-spacing-xs-10",
                                  "spacing-xs-2": "MuiGrid-spacing-xs-2",
                                  "spacing-xs-3": "MuiGrid-spacing-xs-3",
                                  "spacing-xs-4": "MuiGrid-spacing-xs-4",
                                  "spacing-xs-5": "MuiGrid-spacing-xs-5",
                                  "spacing-xs-6": "MuiGrid-spacing-xs-6",
                                  "spacing-xs-7": "MuiGrid-spacing-xs-7",
                                  "spacing-xs-8": "MuiGrid-spacing-xs-8",
                                  "spacing-xs-9": "MuiGrid-spacing-xs-9",
                                  "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                                  "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                                  "zeroMinWidth": "MuiGrid-zeroMinWidth",
                                }
                              }
                              container={true}
                              justify="flex-end"
                            >
                              <div
                                className="MuiGrid-root MuiGrid-container MuiGrid-justify-xs-flex-end"
                              >
                                <ContainedButton
                                  className="makeStyles-button-608"
                                  disabled={false}
                                  onClick={[Function]}
                                >
                                  <WithStyles(WithStyles(ForwardRef(Button)))
                                    className="makeStyles-button-608"
                                    color="secondary"
                                    disabled={false}
                                    onClick={[Function]}
                                    variant="contained"
                                  >
                                    <WithStyles(ForwardRef(Button))
                                      className="makeStyles-button-608"
                                      classes={
                                        Object {
                                          "root": "WithStyles(ForwardRef(Button))-root-610",
                                        }
                                      }
                                      color="secondary"
                                      disabled={false}
                                      onClick={[Function]}
                                      variant="contained"
                                    >
                                      <ForwardRef(Button)
                                        className="makeStyles-button-608"
                                        classes={
                                          Object {
                                            "colorInherit": "MuiButton-colorInherit",
                                            "contained": "MuiButton-contained",
                                            "containedPrimary": "MuiButton-containedPrimary",
                                            "containedSecondary": "MuiButton-containedSecondary",
                                            "containedSizeLarge": "MuiButton-containedSizeLarge",
                                            "containedSizeSmall": "MuiButton-containedSizeSmall",
                                            "disableElevation": "MuiButton-disableElevation",
                                            "disabled": "Mui-disabled",
                                            "endIcon": "MuiButton-endIcon",
                                            "focusVisible": "Mui-focusVisible",
                                            "fullWidth": "MuiButton-fullWidth",
                                            "iconSizeLarge": "MuiButton-iconSizeLarge",
                                            "iconSizeMedium": "MuiButton-iconSizeMedium",
                                            "iconSizeSmall": "MuiButton-iconSizeSmall",
                                            "label": "MuiButton-label",
                                            "outlined": "MuiButton-outlined",
                                            "outlinedPrimary": "MuiButton-outlinedPrimary",
                                            "outlinedSecondary": "MuiButton-outlinedSecondary",
                                            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                                            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                                            "root": "MuiButton-root WithStyles(ForwardRef(Button))-root-610",
                                            "sizeLarge": "MuiButton-sizeLarge",
                                            "sizeSmall": "MuiButton-sizeSmall",
                                            "startIcon": "MuiButton-startIcon",
                                            "text": "MuiButton-text",
                                            "textPrimary": "MuiButton-textPrimary",
                                            "textSecondary": "MuiButton-textSecondary",
                                            "textSizeLarge": "MuiButton-textSizeLarge",
                                            "textSizeSmall": "MuiButton-textSizeSmall",
                                          }
                                        }
                                        color="secondary"
                                        disabled={false}
                                        onClick={[Function]}
                                        variant="contained"
                                      >
                                        <WithStyles(ForwardRef(ButtonBase))
                                          className="MuiButton-root WithStyles(ForwardRef(Button))-root-610 MuiButton-contained makeStyles-button-608 MuiButton-containedSecondary"
                                          component="button"
                                          disabled={false}
                                          focusRipple={true}
                                          focusVisibleClassName="Mui-focusVisible"
                                          onClick={[Function]}
                                          type="button"
                                        >
                                          <ForwardRef(ButtonBase)
                                            className="MuiButton-root WithStyles(ForwardRef(Button))-root-610 MuiButton-contained makeStyles-button-608 MuiButton-containedSecondary"
                                            classes={
                                              Object {
                                                "disabled": "Mui-disabled",
                                                "focusVisible": "Mui-focusVisible",
                                                "root": "MuiButtonBase-root",
                                              }
                                            }
                                            component="button"
                                            disabled={false}
                                            focusRipple={true}
                                            focusVisibleClassName="Mui-focusVisible"
                                            onClick={[Function]}
                                            type="button"
                                          >
                                            <button
                                              className="MuiButtonBase-root MuiButton-root WithStyles(ForwardRef(Button))-root-610 MuiButton-contained makeStyles-button-608 MuiButton-containedSecondary"
                                              disabled={false}
                                              onBlur={[Function]}
                                              onClick={[Function]}
                                              onDragLeave={[Function]}
                                              onFocus={[Function]}
                                              onKeyDown={[Function]}
                                              onKeyUp={[Function]}
                                              onMouseDown={[Function]}
                                              onMouseLeave={[Function]}
                                              onMouseUp={[Function]}
                                              onTouchEnd={[Function]}
                                              onTouchMove={[Function]}
                                              onTouchStart={[Function]}
                                              tabIndex={0}
                                              type="button"
                                            >
                                              <span
                                                className="MuiButton-label"
                                              >
                                                Next
                                              </span>
                                              <WithStyles(memo)
                                                center={false}
                                              >
                                                <ForwardRef(TouchRipple)
                                                  center={false}
                                                  classes={
                                                    Object {
                                                      "child": "MuiTouchRipple-child",
                                                      "childLeaving": "MuiTouchRipple-childLeaving",
                                                      "childPulsate": "MuiTouchRipple-childPulsate",
                                                      "ripple": "MuiTouchRipple-ripple",
                                                      "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                      "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                      "root": "MuiTouchRipple-root",
                                                    }
                                                  }
                                                >
                                                  <span
                                                    className="MuiTouchRipple-root"
                                                  >
                                                    <TransitionGroup
                                                      childFactory={[Function]}
                                                      component={null}
                                                      exit={true}
                                                    />
                                                  </span>
                                                </ForwardRef(TouchRipple)>
                                              </WithStyles(memo)>
                                            </button>
                                          </ForwardRef(ButtonBase)>
                                        </WithStyles(ForwardRef(ButtonBase))>
                                      </ForwardRef(Button)>
                                    </WithStyles(ForwardRef(Button))>
                                  </WithStyles(WithStyles(ForwardRef(Button)))>
                                </ContainedButton>
                              </div>
                            </ForwardRef(Grid)>
                          </WithStyles(ForwardRef(Grid))>
                        </OnboardingSubmit>
                      </form>
                    </Form>
                  </Formik>
                </UserProfileForm>
              </div>
            </section>
          </Section>
        </OnBoardingContainer>
      </div>
    </ThemeProvider>
  </MuiDecorator>
</WithChannel(MuiDecorator)>
`;
